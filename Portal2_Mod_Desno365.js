/*
This work is licensed under the Creative Commons Attribution- NonCommercial 4.0 International License. To view a copy
of this license, visit http://creativecommons.org/licenses/by-nc/4.0/ or send a letter to Creative Commons, 444 Castro
Street, Suite 900, Mountain View, California, 94041, USA.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

/* ******* Portal 2 Mod by Desno365 ******* */

//updates variables
const CURRENT_VERSION = "r009";
var latestVersion;

// minecraft variables
const GameMode = {
	SURVIVAL: 0,
	CREATIVE: 1
};
const ITEM_CATEGORY_TOOL = 3; // 3 seems to be the category of the tools
const VEL_Y_OFFSET = -0.07840000092983246;

//initialize variables
var countdownInitialized = 0;
var initialized = true;
var leftGame = true;

//change carried item variables
var previousCarriedItem = 0;

//general portals variables
var fireButtonsInitialized = false;
var portalWithUseItem = false;
var velBeforeY = 0;

//orange variables
var generatedPortalOrange = false;
var arrowOrangeLaunched = false;
var orangeThrow;
var xBeforeO = -1, yBeforeO = -1, zBeforeO = -1;
var orangeInformation = [];
var portalShotOrange = new java.util.Vector();

//blue variables
var generatedPortalBlue = false;
var arrowBlueLaunched = false;
var blueThrow;
var xBeforeB = -1, yBeforeB = -1, zBeforeB = -1;
var blueInformation = [];
var portalShotBlue = new java.util.Vector();

//entity support variables
var speeder = true;
var portalsWithEveryEntity = false;
var mobs = [];

//tip messages displayed variables
var displayedMessageNoSound = false;

//PortalGun gravity and GravityGun variables
var gravityButtonsInitialized = false;
var pickEnabledBool = false;
var currentPickDisplayed = false;
var isPickingEntity = false;
var currentDropDisplayed = false;
var currentGGButtonsDisplayed = false;
var ggMob;

//long fall boots variables
var isFalling = false;
var countdownHealth = 0;
var previousHealth;

//jumper variables
var jumperPower = 6;
var maxPower = 25;

//orange gel variables
var speedMultiplier = 1.1;
var limitedMaxSpeed = true;

//turrets variables
var needSaving = false;
var countdownSaving = 0;
var turrets = [];
var spawnedTurretsNumber = 0;
var singing = false;
var falling = [];

//radio block variables
var isRadioPlaying = false;
var radioCountdown = 0;
var maxLogarithmicVolume = 20;
var radioX;
var radioY;
var radioZ;

//images variables
var scaled = [];
var g = [];
var blueB = "";
var orangeB = "iVBORw0KGgoAAAANSUhEUgAAAEgAAABICAYAAABV7bNHAAAKQWlDQ1BJQ0MgUHJvZmlsZQAASA2dlndUU9kWh8+9N73QEiIgJfQaegkg0jtIFQRRiUmAUAKGhCZ2RAVGFBEpVmRUwAFHhyJjRRQLg4Ji1wnyEFDGwVFEReXdjGsJ7601896a/cdZ39nnt9fZZ+9917oAUPyCBMJ0WAGANKFYFO7rwVwSE8vE9wIYEAEOWAHA4WZmBEf4RALU/L09mZmoSMaz9u4ugGS72yy/UCZz1v9/kSI3QyQGAApF1TY8fiYX5QKUU7PFGTL/BMr0lSkyhjEyFqEJoqwi48SvbPan5iu7yZiXJuShGlnOGbw0noy7UN6aJeGjjAShXJgl4GejfAdlvVRJmgDl9yjT0/icTAAwFJlfzOcmoWyJMkUUGe6J8gIACJTEObxyDov5OWieAHimZ+SKBIlJYqYR15hp5ejIZvrxs1P5YjErlMNN4Yh4TM/0tAyOMBeAr2+WRQElWW2ZaJHtrRzt7VnW5mj5v9nfHn5T/T3IevtV8Sbsz55BjJ5Z32zsrC+9FgD2JFqbHbO+lVUAtG0GQOXhrE/vIADyBQC03pzzHoZsXpLE4gwnC4vs7GxzAZ9rLivoN/ufgm/Kv4Y595nL7vtWO6YXP4EjSRUzZUXlpqemS0TMzAwOl89k/fcQ/+PAOWnNycMsnJ/AF/GF6FVR6JQJhIlou4U8gViQLmQKhH/V4X8YNicHGX6daxRodV8AfYU5ULhJB8hvPQBDIwMkbj96An3rWxAxCsi+vGitka9zjzJ6/uf6Hwtcim7hTEEiU+b2DI9kciWiLBmj34RswQISkAd0oAo0gS4wAixgDRyAM3AD3iAAhIBIEAOWAy5IAmlABLJBPtgACkEx2AF2g2pwANSBetAEToI2cAZcBFfADXALDIBHQAqGwUswAd6BaQiC8BAVokGqkBakD5lC1hAbWgh5Q0FQOBQDxUOJkBCSQPnQJqgYKoOqoUNQPfQjdBq6CF2D+qAH0CA0Bv0BfYQRmALTYQ3YALaA2bA7HAhHwsvgRHgVnAcXwNvhSrgWPg63whfhG/AALIVfwpMIQMgIA9FGWAgb8URCkFgkAREha5EipAKpRZqQDqQbuY1IkXHkAwaHoWGYGBbGGeOHWYzhYlZh1mJKMNWYY5hWTBfmNmYQM4H5gqVi1bGmWCesP3YJNhGbjS3EVmCPYFuwl7ED2GHsOxwOx8AZ4hxwfrgYXDJuNa4Etw/XjLuA68MN4SbxeLwq3hTvgg/Bc/BifCG+Cn8cfx7fjx/GvyeQCVoEa4IPIZYgJGwkVBAaCOcI/YQRwjRRgahPdCKGEHnEXGIpsY7YQbxJHCZOkxRJhiQXUiQpmbSBVElqIl0mPSa9IZPJOmRHchhZQF5PriSfIF8lD5I/UJQoJhRPShxFQtlOOUq5QHlAeUOlUg2obtRYqpi6nVpPvUR9Sn0vR5Mzl/OX48mtk6uRa5Xrl3slT5TXl3eXXy6fJ18hf0r+pvy4AlHBQMFTgaOwVqFG4bTCPYVJRZqilWKIYppiiWKD4jXFUSW8koGStxJPqUDpsNIlpSEaQtOledK4tE20Otpl2jAdRzek+9OT6cX0H+i99AllJWVb5SjlHOUa5bPKUgbCMGD4M1IZpYyTjLuMj/M05rnP48/bNq9pXv+8KZX5Km4qfJUilWaVAZWPqkxVb9UU1Z2qbapP1DBqJmphatlq+9Uuq43Pp893ns+dXzT/5PyH6rC6iXq4+mr1w+o96pMamhq+GhkaVRqXNMY1GZpumsma5ZrnNMe0aFoLtQRa5VrntV4wlZnuzFRmJbOLOaGtru2nLdE+pN2rPa1jqLNYZ6NOs84TXZIuWzdBt1y3U3dCT0svWC9fr1HvoT5Rn62fpL9Hv1t/ysDQINpgi0GbwaihiqG/YZ5ho+FjI6qRq9Eqo1qjO8Y4Y7ZxivE+41smsImdSZJJjclNU9jU3lRgus+0zwxr5mgmNKs1u8eisNxZWaxG1qA5wzzIfKN5m/krCz2LWIudFt0WXyztLFMt6ywfWSlZBVhttOqw+sPaxJprXWN9x4Zq42Ozzqbd5rWtqS3fdr/tfTuaXbDdFrtOu8/2DvYi+yb7MQc9h3iHvQ732HR2KLuEfdUR6+jhuM7xjOMHJ3snsdNJp9+dWc4pzg3OowsMF/AX1C0YctFx4bgccpEuZC6MX3hwodRV25XjWuv6zE3Xjed2xG3E3dg92f24+ysPSw+RR4vHlKeT5xrPC16Il69XkVevt5L3Yu9q76c+Oj6JPo0+E752vqt9L/hh/QL9dvrd89fw5/rX+08EOASsCegKpARGBFYHPgsyCRIFdQTDwQHBu4IfL9JfJFzUFgJC/EN2hTwJNQxdFfpzGC4sNKwm7Hm4VXh+eHcELWJFREPEu0iPyNLIR4uNFksWd0bJR8VF1UdNRXtFl0VLl1gsWbPkRoxajCCmPRYfGxV7JHZyqffS3UuH4+ziCuPuLjNclrPs2nK15anLz66QX8FZcSoeGx8d3xD/iRPCqeVMrvRfuXflBNeTu4f7kufGK+eN8V34ZfyRBJeEsoTRRJfEXYljSa5JFUnjAk9BteB1sl/ygeSplJCUoykzqdGpzWmEtPi000IlYYqwK10zPSe9L8M0ozBDuspp1e5VE6JA0ZFMKHNZZruYjv5M9UiMJJslg1kLs2qy3mdHZZ/KUcwR5vTkmuRuyx3J88n7fjVmNXd1Z752/ob8wTXuaw6thdauXNu5Tnddwbrh9b7rj20gbUjZ8MtGy41lG99uit7UUaBRsL5gaLPv5sZCuUJR4b0tzlsObMVsFWzt3WazrWrblyJe0fViy+KK4k8l3JLr31l9V/ndzPaE7b2l9qX7d+B2CHfc3em681iZYlle2dCu4F2t5czyovK3u1fsvlZhW3FgD2mPZI+0MqiyvUqvakfVp+qk6oEaj5rmvep7t+2d2sfb17/fbX/TAY0DxQc+HhQcvH/I91BrrUFtxWHc4azDz+ui6rq/Z39ff0TtSPGRz0eFR6XHwo911TvU1zeoN5Q2wo2SxrHjccdv/eD1Q3sTq+lQM6O5+AQ4ITnx4sf4H++eDDzZeYp9qukn/Z/2ttBailqh1tzWibakNml7THvf6YDTnR3OHS0/m/989Iz2mZqzymdLz5HOFZybOZ93fvJCxoXxi4kXhzpXdD66tOTSna6wrt7LgZevXvG5cqnbvfv8VZerZ645XTt9nX297Yb9jdYeu56WX+x+aem172296XCz/ZbjrY6+BX3n+l37L972un3ljv+dGwOLBvruLr57/17cPel93v3RB6kPXj/Mejj9aP1j7OOiJwpPKp6qP6391fjXZqm99Oyg12DPs4hnj4a4Qy//lfmvT8MFz6nPK0a0RupHrUfPjPmM3Xqx9MXwy4yX0+OFvyn+tveV0auffnf7vWdiycTwa9HrmT9K3qi+OfrW9m3nZOjk03dp76anit6rvj/2gf2h+2P0x5Hp7E/4T5WfjT93fAn88ngmbWbm3/eE8/syOll+AAAACXBIWXMAABYlAAAWJQFJUiTwAAADymlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iWE1QIENvcmUgNS40LjAiPgogICA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPgogICAgICA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIgogICAgICAgICAgICB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iCiAgICAgICAgICAgIHhtbG5zOnRpZmY9Imh0dHA6Ly9ucy5hZG9iZS5jb20vdGlmZi8xLjAvIgogICAgICAgICAgICB4bWxuczpleGlmPSJodHRwOi8vbnMuYWRvYmUuY29tL2V4aWYvMS4wLyI+CiAgICAgICAgIDx4bXA6TW9kaWZ5RGF0ZT4yMDE0LTA1LTE5VDE2OjUxOjI1PC94bXA6TW9kaWZ5RGF0ZT4KICAgICAgICAgPHhtcDpDcmVhdG9yVG9vbD5BZG9iZSBQaG90b3Nob3AgQ0MgKE1hY2ludG9zaCk8L3htcDpDcmVhdG9yVG9vbD4KICAgICAgICAgPHhtcDpDcmVhdGVEYXRlPjIwMTQtMDUtMTlUMTY6NTE6MjU8L3htcDpDcmVhdGVEYXRlPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICAgICA8dGlmZjpZUmVzb2x1dGlvbj4xNDQ8L3RpZmY6WVJlc29sdXRpb24+CiAgICAgICAgIDx0aWZmOlJlc29sdXRpb25Vbml0PjI8L3RpZmY6UmVzb2x1dGlvblVuaXQ+CiAgICAgICAgIDx0aWZmOlhSZXNvbHV0aW9uPjE0NDwvdGlmZjpYUmVzb2x1dGlvbj4KICAgICAgICAgPGV4aWY6Q29sb3JTcGFjZT42NTUzNTwvZXhpZjpDb2xvclNwYWNlPgogICAgICAgICA8ZXhpZjpQaXhlbFhEaW1lbnNpb24+NzI8L2V4aWY6UGl4ZWxYRGltZW5zaW9uPgogICAgICAgICA8ZXhpZjpQaXhlbFlEaW1lbnNpb24+NzI8L2V4aWY6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";
var overlay = "";
var divider = "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";
var pick = "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TUw6Y29tLmFkb2JlLnhtcAAAAAAAPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iWE1QIENvcmUgNS40LjAiPgogICA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPgogICAgICA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIgogICAgICAgICAgICB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iCiAgICAgICAgICAgIHhtbG5zOnRpZmY9Imh0dHA6Ly9ucy5hZG9iZS5jb20vdGlmZi8xLjAvIgogICAgICAgICAgICB4bWxuczpleGlmPSJodHRwOi8vbnMuYWRvYmUuY29tL2V4aWYvMS4wLyI+CiAgICAgICAgIDx4bXA6TW9kaWZ5RGF0ZT4yMDE0LTA3LTEwVDIxOjQyOjMxPC94bXA6TW9kaWZ5RGF0ZT4KICAgICAgICAgPHhtcDpDcmVhdG9yVG9vbD5BZG9iZSBQaG90b3Nob3AgQ0MgKE1hY2ludG9zaCk8L3htcDpDcmVhdG9yVG9vbD4KICAgICAgICAgPHhtcDpDcmVhdGVEYXRlPjIwMTQtMDctMTBUMjE6NDI6MzE8L3htcDpDcmVhdGVEYXRlPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICAgICA8dGlmZjpZUmVzb2x1dGlvbj4xNDQ8L3RpZmY6WVJlc29sdXRpb24+CiAgICAgICAgIDx0aWZmOlJlc29sdXRpb25Vbml0PjI8L3RpZmY6UmVzb2x1dGlvblVuaXQ+CiAgICAgICAgIDx0aWZmOlhSZXNvbHV0aW9uPjE0NDwvdGlmZjpYUmVzb2x1dGlvbj4KICAgICAgICAgPGV4aWY6Q29sb3JTcGFjZT42NTUzNTwvZXhpZjpDb2xvclNwYWNlPgogICAgICAgICA8ZXhpZjpQaXhlbFhEaW1lbnNpb24+NzI8L2V4aWY6UGl4ZWxYRGltZW5zaW9uPgogICAgICAgICA8ZXhpZjpQaXhlbFlEaW1lbnNpb24+MzA8L2V4aWY6UGl4ZWxZRGltZW5zaW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KRCulGAAAAShJREFUaAXtVkEOwjAM2xD///IAiaiumshNKEio3mVp4iarZ2s7r+d16AoZuL8rZ4jYu3Dd9j4/P70piCPXINDOK1X7rb6HFERevAgiBP3aYittRY62piwFER5FECEoY7HoS4F5HOfZCbGsjr0w9vZhPYrZbHefFOTS0pIiqHHhRhmLYYMZuc5gXj1ncTY/g89grX93l4I6OsaFCBo56TJVi1W/JN3w4oLN/thW+FxSELLhxCLIIQVTVYuhjLEfxswKiM3EONubgTmGpXOlIEKRCCIEVS2GMiYjaBl7oSWijYiPMJZHLPbGvGHduxTk0tKSIqhx4UZVi7nNJpJM2qwejZjZN4MZ+ktBAyV9QgT1fAyrjMVKEh0m/llCCiIvzBSE/whky17lB2szGFk38kwjAAAAAElFTkSuQmCC";
var drop = "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TUw6Y29tLmFkb2JlLnhtcAAAAAAAPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iWE1QIENvcmUgNS40LjAiPgogICA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPgogICAgICA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIgogICAgICAgICAgICB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iCiAgICAgICAgICAgIHhtbG5zOnRpZmY9Imh0dHA6Ly9ucy5hZG9iZS5jb20vdGlmZi8xLjAvIgogICAgICAgICAgICB4bWxuczpleGlmPSJodHRwOi8vbnMuYWRvYmUuY29tL2V4aWYvMS4wLyI+CiAgICAgICAgIDx4bXA6TW9kaWZ5RGF0ZT4yMDE0LTA3LTEwVDEyOjM5OjQwPC94bXA6TW9kaWZ5RGF0ZT4KICAgICAgICAgPHhtcDpDcmVhdG9yVG9vbD5BZG9iZSBQaG90b3Nob3AgQ0MgKE1hY2ludG9zaCk8L3htcDpDcmVhdG9yVG9vbD4KICAgICAgICAgPHhtcDpDcmVhdGVEYXRlPjIwMTQtMDctMTBUMTI6Mzk6NDA8L3htcDpDcmVhdGVEYXRlPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICAgICA8dGlmZjpZUmVzb2x1dGlvbj4xNDQ8L3RpZmY6WVJlc29sdXRpb24+CiAgICAgICAgIDx0aWZmOlJlc29sdXRpb25Vbml0PjI8L3RpZmY6UmVzb2x1dGlvblVuaXQ+CiAgICAgICAgIDx0aWZmOlhSZXNvbHV0aW9uPjE0NDwvdGlmZjpYUmVzb2x1dGlvbj4KICAgICAgICAgPGV4aWY6Q29sb3JTcGFjZT42NTUzNTwvZXhpZjpDb2xvclNwYWNlPgogICAgICAgICA8ZXhpZjpQaXhlbFhEaW1lbnNpb24+NzI8L2V4aWY6UGl4ZWxYRGltZW5zaW9uPgogICAgICAgICA8ZXhpZjpQaXhlbFlEaW1lbnNpb24+MzA8L2V4aWY6UGl4ZWxZRGltZW5zaW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4K5R8WygAAAStJREFUaAXtluEOgjAMhMX4/q+MG7rmsty42ZBA5Phj0147/LiKy1quh68hgde3sgwV9y6sz3t/f/3tm4O0kitwPf/ShXYQf/CRNaBAwQMD4lwia0CBggcGxLlEdu8thm+oaCiBelthH2oxn52HfRjjOS2P52Ed801bP1ETeTsoUPDAgDiXyPYrhvajliudqIlBgwC1M/OaZqYPj1R6Va+zqMYOQswkNiACBVP9imFtFLc1qHW0JdOjltVrbkYz6p3Np8+wgwRiAxKAMismRl6yrH4K6k3TNbSDxPM0IAGoXzG02Ywtxfh0+df7QD07VNVZz5azg4ZoPgUDEoD6FUN51pbZPjwb46Pn4WwZ20ECkQEJQHsrJlovXz5kNe0g8Zybg878zyNu8dzyG3teGVMmMkG7AAAAAElFTkSuQmCC";
var pickGray = "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TUw6Y29tLmFkb2JlLnhtcAAAAAAAPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iWE1QIENvcmUgNS40LjAiPgogICA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPgogICAgICA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIgogICAgICAgICAgICB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iCiAgICAgICAgICAgIHhtbG5zOnRpZmY9Imh0dHA6Ly9ucy5hZG9iZS5jb20vdGlmZi8xLjAvIgogICAgICAgICAgICB4bWxuczpleGlmPSJodHRwOi8vbnMuYWRvYmUuY29tL2V4aWYvMS4wLyI+CiAgICAgICAgIDx4bXA6TW9kaWZ5RGF0ZT4yMDE0LTA3LTEwVDIyOjM3OjEwPC94bXA6TW9kaWZ5RGF0ZT4KICAgICAgICAgPHhtcDpDcmVhdG9yVG9vbD5BZG9iZSBQaG90b3Nob3AgQ0MgKE1hY2ludG9zaCk8L3htcDpDcmVhdG9yVG9vbD4KICAgICAgICAgPHhtcDpDcmVhdGVEYXRlPjIwMTQtMDctMTBUMjE6NDI6MzE8L3htcDpDcmVhdGVEYXRlPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICAgICA8dGlmZjpZUmVzb2x1dGlvbj4xNDQ8L3RpZmY6WVJlc29sdXRpb24+CiAgICAgICAgIDx0aWZmOlJlc29sdXRpb25Vbml0PjI8L3RpZmY6UmVzb2x1dGlvblVuaXQ+CiAgICAgICAgIDx0aWZmOlhSZXNvbHV0aW9uPjE0NDwvdGlmZjpYUmVzb2x1dGlvbj4KICAgICAgICAgPGV4aWY6Q29sb3JTcGFjZT42NTUzNTwvZXhpZjpDb2xvclNwYWNlPgogICAgICAgICA8ZXhpZjpQaXhlbFhEaW1lbnNpb24+NzI8L2V4aWY6UGl4ZWxYRGltZW5zaW9uPgogICAgICAgICA8ZXhpZjpQaXhlbFlEaW1lbnNpb24+MzA8L2V4aWY6UGl4ZWxZRGltZW5zaW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4Kl6a6EgAAASlJREFUaAXtVtEKwyAMbMd+22/vKEw8MeFM5gbD60tjcib1ekd7llKuQ5fLwPNdOV3E3oXrsff5+emrgjhyDQLtvFK13+p7SEHkxYsgQtCvLbbSVuRoa8pSEOFRBBGCIhbzvhSYx3GWnRDL6tgLY2sf1r2YzTb3SUEmLS0pghoXZhSxGDaYkesM5u45i6vzI/gItvbv7lJQR8e4EEEjJ10ma7Hsl6Qbnlyw2R/bCp9LCkI2jFgEGaRgKmsxlDH2w5hZAbGRGGdbMzDHsHSuFEQoEkGEoKzFUMZkBC1jL7SEtxHxHqbmEYu9MV+x5l0KMmlpSRHUuDCjrMXMZhNJJm1W90bM7JvBDP2loIGSPiGCej6GVcRiKYkOE/8sIQWRF1YVhP8IZMte5RfS/xbTdIAx9gAAAABJRU5ErkJggg==";
var dropGray = "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TUw6Y29tLmFkb2JlLnhtcAAAAAAAPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iWE1QIENvcmUgNS40LjAiPgogICA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPgogICAgICA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIgogICAgICAgICAgICB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iCiAgICAgICAgICAgIHhtbG5zOnRpZmY9Imh0dHA6Ly9ucy5hZG9iZS5jb20vdGlmZi8xLjAvIgogICAgICAgICAgICB4bWxuczpleGlmPSJodHRwOi8vbnMuYWRvYmUuY29tL2V4aWYvMS4wLyI+CiAgICAgICAgIDx4bXA6TW9kaWZ5RGF0ZT4yMDE0LTA3LTEwVDIyOjM2OjQ5PC94bXA6TW9kaWZ5RGF0ZT4KICAgICAgICAgPHhtcDpDcmVhdG9yVG9vbD5BZG9iZSBQaG90b3Nob3AgQ0MgKE1hY2ludG9zaCk8L3htcDpDcmVhdG9yVG9vbD4KICAgICAgICAgPHhtcDpDcmVhdGVEYXRlPjIwMTQtMDctMTBUMTI6Mzk6NDg8L3htcDpDcmVhdGVEYXRlPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICAgICA8dGlmZjpZUmVzb2x1dGlvbj4xNDQ8L3RpZmY6WVJlc29sdXRpb24+CiAgICAgICAgIDx0aWZmOlJlc29sdXRpb25Vbml0PjI8L3RpZmY6UmVzb2x1dGlvblVuaXQ+CiAgICAgICAgIDx0aWZmOlhSZXNvbHV0aW9uPjE0NDwvdGlmZjpYUmVzb2x1dGlvbj4KICAgICAgICAgPGV4aWY6Q29sb3JTcGFjZT42NTUzNTwvZXhpZjpDb2xvclNwYWNlPgogICAgICAgICA8ZXhpZjpQaXhlbFhEaW1lbnNpb24+NzI8L2V4aWY6UGl4ZWxYRGltZW5zaW9uPgogICAgICAgICA8ZXhpZjpQaXhlbFlEaW1lbnNpb24+MzA8L2V4aWY6UGl4ZWxZRGltZW5zaW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KuKWWTAAAASxJREFUaAXtluEOgjAMhMXw2jw7MnXNZblycyGByPnHpr128HEVp2VZ1oc/KYH5W5lSxb0L6/Pe96/vvjpIK7kC1/MvXWgH8QcfWQMKFDwwIM4lsgYUKHhgQJxLZPfeYviGioYtUG8r7EMt5kfnYR/GeE7N43lYx3zVlm/URN4OChQ8MCDOJbLtiqH9qOW2TtTEoCRAbc+8qunpwyOVXtXLLKqxgxAziQ2IQMFUu2JYy+K6BqWOtmR61LJ6yfVost7e/PAZdpBAbEAC0MiKiZGXLKufgnLRdA3tIPE8DUgAalcMbdZjSzF+uPzrdaCeHarqrOeds4NSNJ+CAQlA7YqhfNSWo314NsZHz8PZMraDBCIDEoD2Vky0Xr58yGraQeI5Vwed+Z9HXOK55RfjKhfNrAQr0wAAAABJRU5ErkJggg==";
var shoot = "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TUw6Y29tLmFkb2JlLnhtcAAAAAAAPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iWE1QIENvcmUgNS40LjAiPgogICA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPgogICAgICA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIgogICAgICAgICAgICB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iCiAgICAgICAgICAgIHhtbG5zOnRpZmY9Imh0dHA6Ly9ucy5hZG9iZS5jb20vdGlmZi8xLjAvIgogICAgICAgICAgICB4bWxuczpleGlmPSJodHRwOi8vbnMuYWRvYmUuY29tL2V4aWYvMS4wLyI+CiAgICAgICAgIDx4bXA6TW9kaWZ5RGF0ZT4yMDE0LTA3LTEyVDE1OjA2OjA3PC94bXA6TW9kaWZ5RGF0ZT4KICAgICAgICAgPHhtcDpDcmVhdG9yVG9vbD5BZG9iZSBQaG90b3Nob3AgQ0MgKE1hY2ludG9zaCk8L3htcDpDcmVhdG9yVG9vbD4KICAgICAgICAgPHhtcDpDcmVhdGVEYXRlPjIwMTQtMDctMTJUMTU6MDY6MDc8L3htcDpDcmVhdGVEYXRlPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICAgICA8dGlmZjpZUmVzb2x1dGlvbj4xNDQ8L3RpZmY6WVJlc29sdXRpb24+CiAgICAgICAgIDx0aWZmOlJlc29sdXRpb25Vbml0PjI8L3RpZmY6UmVzb2x1dGlvblVuaXQ+CiAgICAgICAgIDx0aWZmOlhSZXNvbHV0aW9uPjE0NDwvdGlmZjpYUmVzb2x1dGlvbj4KICAgICAgICAgPGV4aWY6Q29sb3JTcGFjZT42NTUzNTwvZXhpZjpDb2xvclNwYWNlPgogICAgICAgICA8ZXhpZjpQaXhlbFhEaW1lbnNpb24+ODM8L2V4aWY6UGl4ZWxYRGltZW5zaW9uPgogICAgICAgICA8ZXhpZjpQaXhlbFlEaW1lbnNpb24+MzA8L2V4aWY6UGl4ZWxZRGltZW5zaW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4Kjqdy/wAAAR9JREFUaAXtmVEPgyAMhMey//+XnSZCLqTQVm4P0/NFUsoBn1cxsWz79dJFIfA5VQpF7dki2/vZ++fuvjqTqYqvjTs53t2XnEm0kWAKJpEAUUrOFEwiAaLU7DTH0ysypXdyj/SujsM1/UpjtGaMt7lV5vhIFtuCuQgQh/dlbtoXByTbET0rx4rNprbyrVhWo5XwPtDVkzNneJN9gpkENkvvy3xk65EG5ls5Xr815m9jcibx0QkmEWZf5igdKVH3hEPBu7flTOITFkwizL7MsWwj00ReBRGdPgd1I2vC/KqFsasaVeu4j/RaXM5EXIttwVwEiMPL+d+8WRU71U4R0K/eFC4nWWXuAMp0C2aGlpMrmA6gTHf9zox8h2V0H5n7BR3LIUiYzwVPAAAAAElFTkSuQmCC";
var shootGray = "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TUw6Y29tLmFkb2JlLnhtcAAAAAAAPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iWE1QIENvcmUgNS40LjAiPgogICA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPgogICAgICA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIgogICAgICAgICAgICB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iCiAgICAgICAgICAgIHhtbG5zOnRpZmY9Imh0dHA6Ly9ucy5hZG9iZS5jb20vdGlmZi8xLjAvIgogICAgICAgICAgICB4bWxuczpleGlmPSJodHRwOi8vbnMuYWRvYmUuY29tL2V4aWYvMS4wLyI+CiAgICAgICAgIDx4bXA6TW9kaWZ5RGF0ZT4yMDE0LTA3LTEyVDE1OjEwOjA0PC94bXA6TW9kaWZ5RGF0ZT4KICAgICAgICAgPHhtcDpDcmVhdG9yVG9vbD5BZG9iZSBQaG90b3Nob3AgQ0MgKE1hY2ludG9zaCk8L3htcDpDcmVhdG9yVG9vbD4KICAgICAgICAgPHhtcDpDcmVhdGVEYXRlPjIwMTQtMDctMTJUMTU6MDY6MDc8L3htcDpDcmVhdGVEYXRlPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICAgICA8dGlmZjpZUmVzb2x1dGlvbj4xNDQ8L3RpZmY6WVJlc29sdXRpb24+CiAgICAgICAgIDx0aWZmOlJlc29sdXRpb25Vbml0PjI8L3RpZmY6UmVzb2x1dGlvblVuaXQ+CiAgICAgICAgIDx0aWZmOlhSZXNvbHV0aW9uPjE0NDwvdGlmZjpYUmVzb2x1dGlvbj4KICAgICAgICAgPGV4aWY6Q29sb3JTcGFjZT42NTUzNTwvZXhpZjpDb2xvclNwYWNlPgogICAgICAgICA8ZXhpZjpQaXhlbFhEaW1lbnNpb24+ODM8L2V4aWY6UGl4ZWxYRGltZW5zaW9uPgogICAgICAgICA8ZXhpZjpQaXhlbFlEaW1lbnNpb24+MzA8L2V4aWY6UGl4ZWxZRGltZW5zaW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4K3ntl/wAAASdJREFUaAXtlsEOwyAMQ9dpv823d500kIUCCY13WOtdFkFi4NUp3Uop+0M/CoHXV2WjqN1bZH/e+/zc01dnMlXxtXElx7vnkjOJNhJMwSQSIErJmYJJJECUmt3meHtFlvRu7pHe2Trc0680RnvG8ba22hwfSTIWzCRALO/b3LQvFizGET0rxxqbLW3lW2OrGq2Fj0JXT86c4V2cE8xFYLP0vs1Hth5pYL6V481bNX87JmcSH51gEmH2bY7SkRZ1bzgUvHosZxKfsGASYfZtjm0bWSbyKojo9DmoG9kT5lctHDurUbU+/yO9Ni5nIq5kLJhJgFjet3mzLCYtxqsaXr43H9keQwPXMfXkTESUjAUzCRDLBRNpJGPBTALE8noBRb7DsE6xQeANWIAazx5sny0AAAAASUVORK5CYII=";
var buttonNotPressed = "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TUw6Y29tLmFkb2JlLnhtcAAAAAAAPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iWE1QIENvcmUgNS40LjAiPgogICA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPgogICAgICA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIgogICAgICAgICAgICB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iCiAgICAgICAgICAgIHhtbG5zOnRpZmY9Imh0dHA6Ly9ucy5hZG9iZS5jb20vdGlmZi8xLjAvIgogICAgICAgICAgICB4bWxuczpleGlmPSJodHRwOi8vbnMuYWRvYmUuY29tL2V4aWYvMS4wLyI+CiAgICAgICAgIDx4bXA6TW9kaWZ5RGF0ZT4yMDE0LTA5LTExVDIyOjMxOjQ0PC94bXA6TW9kaWZ5RGF0ZT4KICAgICAgICAgPHhtcDpDcmVhdG9yVG9vbD5BZG9iZSBQaG90b3Nob3AgQ0MgKE1hY2ludG9zaCk8L3htcDpDcmVhdG9yVG9vbD4KICAgICAgICAgPHhtcDpDcmVhdGVEYXRlPjIwMTQtMDktMTFUMjI6MzE6MzM8L3htcDpDcmVhdGVEYXRlPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICAgICA8dGlmZjpZUmVzb2x1dGlvbj4xNDQ8L3RpZmY6WVJlc29sdXRpb24+CiAgICAgICAgIDx0aWZmOlJlc29sdXRpb25Vbml0PjI8L3RpZmY6UmVzb2x1dGlvblVuaXQ+CiAgICAgICAgIDx0aWZmOlhSZXNvbHV0aW9uPjE0NDwvdGlmZjpYUmVzb2x1dGlvbj4KICAgICAgICAgPGV4aWY6Q29sb3JTcGFjZT42NTUzNTwvZXhpZjpDb2xvclNwYWNlPgogICAgICAgICA8ZXhpZjpQaXhlbFhEaW1lbnNpb24+MTI4PC9leGlmOlBpeGVsWERpbWVuc2lvbj4KICAgICAgICAgPGV4aWY6UGl4ZWxZRGltZW5zaW9uPjQ4PC9leGlmOlBpeGVsWURpbWVuc2lvbj4KICAgICAgPC9yZGY6RGVzY3JpcHRpb24+CiAgIDwvcmRmOlJERj4KPC94OnhtcG1ldGE+CoTXvMoAAAEhSURBVHgB7ZyxDYNAFMUOxP6LpIpElIaKHYjENETXeQf7qtc+P+vKvxzv1zN6WgKrtnnFx2c/xjY53NcvHEIC3/Mc/QDC4Vk5AUhDmBNAODorJwBpCHMCCEdn5QQgDWFOAOHorJwApCHMCSAcnZUTgDSEOQGEo7NyApCGMCeAcHRWTgDSEOYEEI7OyglAGsKcAMLRWTkBSEOYE0A4OisnAGkIcwIIR2flBCANYU4A4eisnACkIcwJIBydlROANIQ5AYSjs3ICkIYwJ4BwdFZOANIQ5gQQjs7KCUAawpwAwtFZOQFIQ5gTQDg6KycAaQhzAghHZ+UEIA1hTgDh6KycAKQhzAkgHJ2VE4A0hDkBhKOzcgKQhjBv82L0PBrccxL4A+8QDr/rw2ZtAAAAAElFTkSuQmCC";
var buttonPressed = "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TUw6Y29tLmFkb2JlLnhtcAAAAAAAPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iWE1QIENvcmUgNS40LjAiPgogICA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPgogICAgICA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIgogICAgICAgICAgICB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iCiAgICAgICAgICAgIHhtbG5zOnRpZmY9Imh0dHA6Ly9ucy5hZG9iZS5jb20vdGlmZi8xLjAvIgogICAgICAgICAgICB4bWxuczpleGlmPSJodHRwOi8vbnMuYWRvYmUuY29tL2V4aWYvMS4wLyI+CiAgICAgICAgIDx4bXA6TW9kaWZ5RGF0ZT4yMDE0LTA5LTExVDIyOjM3OjMwPC94bXA6TW9kaWZ5RGF0ZT4KICAgICAgICAgPHhtcDpDcmVhdG9yVG9vbD5BZG9iZSBQaG90b3Nob3AgQ0MgKE1hY2ludG9zaCk8L3htcDpDcmVhdG9yVG9vbD4KICAgICAgICAgPHhtcDpDcmVhdGVEYXRlPjIwMTQtMDktMTFUMjI6Mzc6MjA8L3htcDpDcmVhdGVEYXRlPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICAgICA8dGlmZjpZUmVzb2x1dGlvbj4xNDQ8L3RpZmY6WVJlc29sdXRpb24+CiAgICAgICAgIDx0aWZmOlJlc29sdXRpb25Vbml0PjI8L3RpZmY6UmVzb2x1dGlvblVuaXQ+CiAgICAgICAgIDx0aWZmOlhSZXNvbHV0aW9uPjE0NDwvdGlmZjpYUmVzb2x1dGlvbj4KICAgICAgICAgPGV4aWY6Q29sb3JTcGFjZT42NTUzNTwvZXhpZjpDb2xvclNwYWNlPgogICAgICAgICA8ZXhpZjpQaXhlbFhEaW1lbnNpb24+MTI4PC9leGlmOlBpeGVsWERpbWVuc2lvbj4KICAgICAgICAgPGV4aWY6UGl4ZWxZRGltZW5zaW9uPjQ4PC9leGlmOlBpeGVsWURpbWVuc2lvbj4KICAgICAgPC9yZGY6RGVzY3JpcHRpb24+CiAgIDwvcmRmOlJERj4KPC94OnhtcG1ldGE+ClZEXB0AAAElSURBVHgB7ZyxDQJBEMQOdFWQISEBTXxEgqD9R6Ia0GXuwd5o0vE43sPtev+NTknguW1jruYrdD4Cr/djHH21a0wCCUAawpwAwtFZOQFIQ5gTQDg6KycAaQhzAghHZ+UEIA1hTgDh6KycAKQhzAkgHJ2VE4A0hDkBhKOzcgKQhjAngHB0Vk4A0hDmBBCOzsoJQBrCnADC0Vk5AUhDmBNAODorJwBpCHMCCEdn5QQgDWFOAOHorJwApCHMCSAcnZUTgDSEOQGEo7NyApCGMCeAcHRWTgDSEOYEEI7OyglAGsKcAMLRWTkBSEOYE0A4OisnAGkIcwIIR2flBCANYU4A4eisnACkIcwJIBydlROANIR5rkfR62lw5yQwL+fT+O4fZ/tajz8v+gjF0rnaDAAAAABJRU5ErkJggg==";
var twitterIcon  = "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";
g[0] = android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(orangeB, 0), 0, android.util.Base64.decode(orangeB, 0).length);
g[1] = android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(blueB, 0), 0, android.util.Base64.decode(blueB, 0).length);
g[2] = android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(overlay, 0), 0, android.util.Base64.decode(overlay, 0).length);
g[3] = android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(divider, 0), 0, android.util.Base64.decode(divider, 0).length);
g[4] = android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(pick, 0), 0, android.util.Base64.decode(pick, 0).length);
g[5] = android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(drop, 0), 0, android.util.Base64.decode(drop, 0).length);
g[6] = android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(pickGray, 0), 0, android.util.Base64.decode(pickGray, 0).length);
g[7] = android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(dropGray, 0), 0, android.util.Base64.decode(dropGray, 0).length);
g[8] = android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(shoot, 0), 0, android.util.Base64.decode(shoot, 0).length);
g[9] = android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(shootGray, 0), 0, android.util.Base64.decode(shootGray, 0).length);
g[10] = android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(buttonNotPressed, 0), 0, android.util.Base64.decode(buttonNotPressed, 0).length);
g[11] = android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(buttonPressed, 0), 0, android.util.Base64.decode(buttonPressed, 0).length);
g[12] = android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(twitterIcon, 0), 0, android.util.Base64.decode(twitterIcon, 0).length);
var minecraftButtonsWidth = 128;
var minecraftButtonsHeight = 48;

//backgrounds
var imageSquareLengthForGeneralBackgrounds = 16;
var imageSquareLengthScaledForGeneralBackgrounds = 64;
var matrixForGeneralBackgrounds = new android.graphics.Matrix();
matrixForGeneralBackgrounds.postScale(imageSquareLengthScaledForGeneralBackgrounds / imageSquareLengthForGeneralBackgrounds, imageSquareLengthScaledForGeneralBackgrounds / imageSquareLengthForGeneralBackgrounds);

var backgroundDarkDirtImage = "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAABw0lEQVR4nM2WS0/CQBSFPwiPCosS0UhidOnCn+D//yW6kQgJ1RR5KS7aU50DE9wNZ9POdGZ6z7mPua2nx7s9QLna8Bef620wvsqH/GfdclWNB1n36P5ZUQbjNonReri93ANc9CuL58USOGSg79tsDMD79CVY5wq5Mn6+kF4BxYB8I8iX9zcjjn0X3LcOnSP4eckV6Mhnu/4IgElWWTyjslDfPbrd5/KxfK+xEMui9Ao0L+sFACUhw+dpNT/OB8AvQ/kwlj0fDOsf1OfWzH1degXESD4WI1ns9cCjOlb5NsVb9YMsjA2PofQKNL5eLYDDCtbJJ9V88QocMhC8xpOH854lUji9AnqJMStXcwC6xsCZKRbKfpjnQqw+pFfAK1PMZ265Z4PqhOCxJJxfHdBL7L4WfN7zPsb4IFsIFT4fBYRonhPmudd23fPN+iK8TZsfWl05HwXch265dz7yYS+/rtcf74ikkLJkVzNXFiVXoOmKZZHf+57/w6wHxHvAU/DYSq5AEwPOXCg33wC091/BvFdK76LVScV6SCG9AqeYyNenOiE9Y7Hh2SOkV8AnxNz7/WZDXcnG/fnRA7338/2udHIFfgBs9yLA5bCE1QAAAABJRU5ErkJggg==";
var backgroundDarkDirtImageDecoded = android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(backgroundDarkDirtImage, 0), 0, android.util.Base64.decode(backgroundDarkDirtImage, 0).length);
var scaledBackgroundDarkDirtImageDecoded = new android.graphics.Bitmap.createBitmap(backgroundDarkDirtImageDecoded, 0, 0, imageSquareLengthForGeneralBackgrounds, imageSquareLengthForGeneralBackgrounds, matrixForGeneralBackgrounds, false);
const backgroundDarkDirtImageInt = 1;

var backgroundDirtImage = "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABHNCSVQICAgIfAhkiAAAAfxJREFUOI1dkr9r20AYhh87LjjEP6R2kNoi6qh0LBH2VjCITl48dikZ/G90y5K/KFOGgou7FYLloVDI2QJBTqKtpLp2bApGHcwdsm86fd+d3nuf763cXl8WQqYAREkOgO+5HNfCOKNjm7o/ns7xPZcT51njqt2oMwkWGI1TAHZFwZ+Xfb59/YLROMX3XJpndZbrrf75TEim95LK7fVlMZ7Otcpo0EN9l9XUCuMMQJ+rCpny1+riey4d20TIVB9Sao5lAOBYBh3bZDToaYtVgGZyh5ApvucyCRb0L84BtPIkWADwHRcAIVNdq0VJThhnOJaBkKkGpV5Rhvc7+EzTNomSnI5t4nvuIQOAVnfI8u5GW1AvKe8dyyBKchzL2E9BHe7YJo8PP2g39sTDOGNXFMyEpHlWJ1ttWK63LNdbzaWqNuPpHCFTPXf1/CjJNZNybxIsiJJ8z8CxDA2lDE15L188tlJVDQVFWRkNejiWQRhnuh7GGUKmCJnS6g6JkpyTj+/fXimFXVGQrTZ037xgPJ3TbtRZ2z1qqwey1YZqpcJMSF7ZJj/vZ4RxRuXTh3dFGGf0L841WYDXz58eJPB4KStVQF8GmP/6R5TkBwlUNo4TKmS6n4IKk++5PNk9avqTYIHvuTr3xwkFqKmNyrdSbXWHdO5udObVNFRfif4HjC8/LkSmx2oAAAAASUVORK5CYII=";
var backgroundDirtImageDecoded = android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(backgroundDirtImage, 0), 0, android.util.Base64.decode(backgroundDirtImage, 0).length);
var scaledBackgroundDirtImageDecoded = new android.graphics.Bitmap.createBitmap(backgroundDirtImageDecoded, 0, 0, imageSquareLengthForGeneralBackgrounds, imageSquareLengthForGeneralBackgrounds, matrixForGeneralBackgrounds, false);
const backgroundDirtImageInt = 2;

var backgroundGlowingImage = "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABHNCSVQICAgIfAhkiAAAAltJREFUOI2N0k9rY1UYx/HPvblJbtLE2k4nLQO2UNDBPxuHLsUX4NJhQF0ogisFl9qF78C34MIByWbAP6CuiiAqhXGyEMqA24pFQjvW5CY96c2910XClNnNc3aH53wfvr/nRFtpt/IUFdKaNBRP3JVlKYYX8qZeqGyFyGZgUufd0LIXWs5D5iCMvXbesBda3g4d3VA6CGNxHEvgspjpyx6TPxlveCB3KvdAZYC6UlD53sQ3JgY4DdkCMF021dC34ZfaiHbT4TgzWEL/U2irWxf51HWRyEZ6sVAYdxvgnnXH9cJOvGJvXPNZfMP7cexLz9pWU5j6UGZDqWYOoq20W90KTcNa6bkid5jM9ea1xzrb2qZycaslvZjrRg3j6tJU7mE6Xyj8+syl26OmRziYj59I+r24blzmvr7418fWHFdT51Flp4oQLRReH6X6zZEQJ/b1/I4BDrFdJkZJYYC/XOrL/FhNfLAMPYZjU4PZzDvlUKXynWvqaKBUeGmeGuhpify8hN+1dgXY1rav56FNTZGxSl9PDdXy/BbndtFZPm6rXwFGRhKFI6U8bWhJXFO4r6dUd2Zus6x5Q8c9PU05SNN0ATiX+NaZSGQSJqZyZ2qO5I5N9WUSiR9cOjb1ucwdQyGEBaAvc4SPDLUk7ndyrxr6W+bP5mLabf8oJG7grfqaL+L1K4V9PQMMsSexkc3s4Hlrbs7q/liu9I6hpoaX89huGS0AnU5HUPjKqgYGCq9Y89P1F1UqbdHyzxHhTY8EldPFbNGt3ZvVycmJlZUVk8nE6uqqEILZbOZp6n/Z1fhz6scehgAAAABJRU5ErkJggg==";
var backgroundGlowingImageDecoded = android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(backgroundGlowingImage, 0), 0, android.util.Base64.decode(backgroundGlowingImage, 0).length);
var scaledBackgroundGlowingImageDecoded = new android.graphics.Bitmap.createBitmap(backgroundGlowingImageDecoded, 0, 0, imageSquareLengthForGeneralBackgrounds, imageSquareLengthForGeneralBackgrounds, matrixForGeneralBackgrounds, false);
const backgroundGlowingImageInt = 3;

var backgroundObsidianImage = "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABHNCSVQICAgIfAhkiAAAAnhJREFUOI1Nkz1vG0cQhp/ZJbWkTJEMbUJOEANyEUiIkyKQEHcuEiCQ7cY/yb8rRZI+TeBAgGHYMqLGlBTqgxLv9uN2J8Wd7Uw5s4N5951nZDq9r3ShWlAFYwylKCKKiCGEio2NISJ9RPqoVoRQ49wmppSCiBJCRYyepgmAR2QDEYP3a75/+BMiAjSoNni/Zn/3EICeMQbva3745heMMQC8Ov4D8MQYONh7ysniCGMsKUVSuuVg7xkniyNAkK2tmTZNw3zyAGsty5sFxiRA+fHbF7w+/hOA6/q8U1Th3LBTZJDxeKYpBeaTHVb+AkgA5AzW9lCtKaWPtY4QauaTL7muLzt/BPlsYiaEAnjAoto+cG6TUjIpRZwbAgIopWREoAcgEoA7OJf5budn/h9/v/+NlAL7u095dfw7MXpEFFWLcw6ZTh8oJLy/ot8fYW2PO/0p1lpCCDTGU1WXzCc7nF39w97XTxiNRpwsjlj5Nda5wcsYaw72nhNjhU8VjSa2NieICD5VWNsj5kzTBFQzN9W/XNfnWAsyHs/VGNsJ3uhMLIAwG22zvDmllAZjwPvM9hdfcVWd8bHHtCsDEYNqOwEEVcPyZokINE1E1TAczlj5JSnlTx4ZmBJCRQjrbrct0iIFiIRQsb972NUqvF/z+NEh48HdlkTw7O8eUkrhw/INF7enLcplTMEDiVIKk+E9Vn7JYDDir7e/oiqAYJ2bvzy/fkcIa1SVmAve3zIbbxOzJ+eCMUopBdfbJDR1OxeLtRYj4gFl5ZedF5HhcIuL2wWqCgh1XX/683gwAxTIxJhaElUzIhbVPiINIoJq6Vqkq7UX+jHfkur4DyFuWaLn81aoAAAAAElFTkSuQmCC";
var backgroundObsidianImageDecoded = android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(backgroundObsidianImage, 0), 0, android.util.Base64.decode(backgroundObsidianImage, 0).length);
var scaledBackgroundObsidianImageDecoded = new android.graphics.Bitmap.createBitmap(backgroundObsidianImageDecoded, 0, 0, imageSquareLengthForGeneralBackgrounds, imageSquareLengthForGeneralBackgrounds, matrixForGeneralBackgrounds, false);
const backgroundObsidianImageInt = 4;

//file paths variables
var worldPath;
var modSaveFolder = "/portal_mod";
var minecraftpePath = android.os.Environment.getExternalStorageDirectory().getAbsolutePath() + "/games/com.mojang/minecraftpe";
var portalModSaveFolderMinecraftpeJavaIOFile = new java.io.File(minecraftpePath + modSaveFolder);
portalModSaveFolderMinecraftpeJavaIOFile.mkdirs();

//sounds variables
var sound1 = new android.media.MediaPlayer();
var sound2 = new android.media.MediaPlayer();
var sound3 = new android.media.MediaPlayer();
var music = new android.media.MediaPlayer();
var radio = new android.media.MediaPlayer();

//ui varaibles
var buttonsSize = 0;
var detectedDefaultTextSize = 1;
var currentActivity = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
var minecraftFont = "";
writeFileFromByteArray(android.util.Base64.decode(minecraftFont, 0), minecraftpePath + modSaveFolder + "/minecraft.ttf");
var font = new android.graphics.Typeface.createFromFile(minecraftpePath + modSaveFolder + "/minecraft.ttf");
var background = new android.graphics.drawable.BitmapDrawable(scaledBackgroundDarkDirtImageDecoded);
background.setTileModeXY(android.graphics.Shader.TileMode.REPEAT, android.graphics.Shader.TileMode.REPEAT);
var metrics = new android.util.DisplayMetrics();
currentActivity.getWindowManager().getDefaultDisplay().getMetrics(metrics);
var displayHeight = metrics.heightPixels;
var displayWidth = metrics.widthPixels;
var deviceDensity = android.content.Context(currentActivity).getResources().getDisplayMetrics().density;

// item functions needed on load
Item.setVerticalRender = function(id)
{
	try {
		Item.setHandEquipped(id, true);
	} catch(e) { /* old version of BlockLauncher */ }
}
Item.defineItem = function(id, textureName, textureNumber, name, stackLimit)
{
	try
	{
		ModPE.setItem(id, textureName, textureNumber, name, stackLimit);
	}catch(e)
	{
		// user hasn't installed the texture pack
		if(!textureUiShowed)
			pleaseInstallTextureUI();

		ModPE.setItem(id, "skull_zombie", 0, name, stackLimit);
	}
}

const ID_PORTAL_INFORMATION = 3650;
Item.defineItem(ID_PORTAL_INFORMATION, "portalinfo", 0, "Portal Information");
Item.addShapedRecipe(ID_PORTAL_INFORMATION, 1, 0, [
	"   ",
	" w ",
	"   "], ["w", 17, 0]);
Item.setCategory(ID_PORTAL_INFORMATION, ITEM_CATEGORY_TOOL);

const ID_PORTAL_GUN_BLUE = 3651;
Item.defineItem(ID_PORTAL_GUN_BLUE, "portalgunblue", 0, "PortalGun");
Item.setMaxDamage(ID_PORTAL_GUN_BLUE, 1000);
Item.addShapedRecipe(ID_PORTAL_GUN_BLUE, 1, 0, [
	"f f",
	" d ",
	"f f"], ["f", 265, 0, "d", 264, 0]);
Item.setCategory(ID_PORTAL_GUN_BLUE, ITEM_CATEGORY_TOOL);
Item.setVerticalRender(ID_PORTAL_GUN_BLUE);

const ID_PORTAL_GUN_GOLD = 3652;
Item.defineItem(ID_PORTAL_GUN_GOLD, "portalgungold", 0, "PortalGun Gold");
Item.setMaxDamage(ID_PORTAL_GUN_GOLD, 500);
Item.addShapedRecipe(ID_PORTAL_GUN_GOLD, 1, 0, [
	"f f",
	" g ",
	"f f"], ["f", 265, 0, "g", 266, 0]);
Item.setCategory(ID_PORTAL_GUN_GOLD, ITEM_CATEGORY_TOOL);
Item.setVerticalRender(ID_PORTAL_GUN_GOLD);

const ID_PORTAL_GUN_IRON = 3653;
Item.defineItem(ID_PORTAL_GUN_IRON, "portalguniron", 0, "PortalGun Iron");
Item.setMaxDamage(ID_PORTAL_GUN_IRON, 250);
Item.addShapedRecipe(ID_PORTAL_GUN_IRON, 1, 0, [
	"fff",
	"f f",
	"fff"], ["f", 265, 0]);
Item.setCategory(ID_PORTAL_GUN_IRON, ITEM_CATEGORY_TOOL);
Item.setVerticalRender(ID_PORTAL_GUN_IRON);

const ID_PORTAL_GUN_LAVA = 3654;
Item.defineItem(ID_PORTAL_GUN_LAVA, "portalgunlava", 0, "PortalGun Lava");
Item.setMaxDamage(ID_PORTAL_GUN_LAVA, 200);
Item.addShapedRecipe(ID_PORTAL_GUN_LAVA, 1, 0, [
	"f f",
	" a ",
	"f f"], ["f", 265, 0, "a", 259, 0]);
Item.setCategory(ID_PORTAL_GUN_LAVA, ITEM_CATEGORY_TOOL);
Item.setVerticalRender(ID_PORTAL_GUN_LAVA);

const ID_PORTAL_GUN_WOOD_AND_STONE = 3655;
Item.defineItem(ID_PORTAL_GUN_WOOD_AND_STONE, "portalgunwoodandstone", 0, "PortalGun Wood & Stone");
Item.setMaxDamage(ID_PORTAL_GUN_WOOD_AND_STONE, 100);
Item.addShapedRecipe(ID_PORTAL_GUN_WOOD_AND_STONE, 1, 0, [
	"sws",
	"s s",
	"sws"], ["s", 98, 0, "w", 17, 0]);
Item.setCategory(ID_PORTAL_GUN_WOOD_AND_STONE, ITEM_CATEGORY_TOOL);
Item.setVerticalRender(ID_PORTAL_GUN_WOOD_AND_STONE);

const ID_PORTAL_GUN_ORANGE = 3649;
Item.defineItem(ID_PORTAL_GUN_ORANGE, "portalgunorange", 0, "PortalGun");
Item.setMaxDamage(ID_PORTAL_GUN_ORANGE, 1000);
Item.setVerticalRender(ID_PORTAL_GUN_ORANGE);

const ID_GRAVITY_GUN = 3656;
Item.defineItem(ID_GRAVITY_GUN, "gravitygun", 0, "GravityGun");
Item.setMaxDamage(ID_GRAVITY_GUN, 400);
Item.addShapedRecipe(ID_GRAVITY_GUN, 1, 0, [
	"frf",
	"r r",
	"frf"], ["f", 265, 0, "r", 331, 0]);
Item.setCategory(ID_GRAVITY_GUN, ITEM_CATEGORY_TOOL);
Item.setVerticalRender(ID_GRAVITY_GUN);

const ID_TURRET_OPTIONS = 3657;
Item.defineItem(ID_TURRET_OPTIONS, "turretoptions", 0, "Turret Options");
Item.setCategory(ID_TURRET_OPTIONS, ITEM_CATEGORY_TOOL);

const ID_TURRET = 3658;
Item.defineItem(ID_TURRET, "turret", 0, "Turret");
Item.setCategory(ID_TURRET, ITEM_CATEGORY_TOOL);

const ID_LONG_FALL_BOOT = 3659;
Item.defineItem(ID_LONG_FALL_BOOT, "longfallboot", 0, "Long Fall Boot");
Item.addShapedRecipe(ID_LONG_FALL_BOOT, 1, 0, [
	"   ",
	"f f",
	"r r"], ["f", 265, 0, "r", 331, 0]);

const ID_LONG_FALL_BOOTS = 305;
ModPE.langEdit("item.bootsChain.name", "Long Fall Boots");
Item.setMaxDamage(ID_LONG_FALL_BOOTS, 1500);
Item.addShapedRecipe(ID_LONG_FALL_BOOTS, 1, 0, [
	"   ",
	"   ",
	"l l"], ["l", ID_LONG_FALL_BOOT, 0,]);

// block functions needed on load
Block.newBlock = function(id, name, textureNames, sourceId, opaque, renderType)
{
	try
	{
		Block.defineBlock(id, name, textureNames, sourceId, opaque, renderType);
	} catch(e)
	{
		// user hasn't installed the texture pack
		if(!textureUiShowed)
			pleaseInstallTextureUI();

		Block.defineBlock(id, name, "enchanting_table_top", sourceId, opaque, renderType);
	}
}

Block.newPortal = function(id, name, textureName, xMin, yMin, zMin, xMax, yMax, zMax)
{
	Block.newBlock(id, name, textureName, 0, false);
	Block.setShape(id, xMin, yMin, zMin, xMax, yMax, zMax);
	Block.setDestroyTime(id, 3);
	Block.setRenderLayer(id, 5);
	Block.setLightLevel(id, 3);
	Block.setLightOpacity(id, 0.01);
}

// Type 1
//orange z min down
const ORANGE_Z_MIN_D = 200;
Block.newPortal(ORANGE_Z_MIN_D, "Orange portal z-min-d", "portalorangedown", 0, 0, 1/16, 1, 1, 1/16);

//orange z min up
const ORANGE_Z_MIN_U = 201;
Block.newPortal(ORANGE_Z_MIN_U, "Orange portal z-min-up", "portalorangeup", 0, 0, 1/16, 1, 1, 1/16)


// Type 2
//orange z max down
const ORANGE_Z_MAX_D = 202;
Block.newPortal(ORANGE_Z_MAX_D, "Orange portal z-max-d", "portalorangedown", 0, 0, 15/16, 1, 1, 15/16);

//orange z max up
const ORANGE_Z_MAX_U = 203;
Block.newPortal(ORANGE_Z_MAX_U, "Orange portal z-max-up", "portalorangeup", 0, 0, 15/16, 1, 1, 15/16);


// Type 3
//orange y min down
const ORANGE_Y_MIN_D = 204;
Block.newPortal(ORANGE_Y_MIN_D, "Orange portal y-min-d", "portalorangedown", 0, 1/16, 0, 1, 1/16, 1);

//orange y min up
const ORANGE_Y_MIN_U = 205;
Block.newPortal(ORANGE_Y_MIN_U, "Orange portal y-min-up", "portalorangeup", 0, 1/16, 0, 1, 1/16, 1);


// Type 4
//orange y max down
const ORANGE_Y_MAX_D = 206;
Block.newPortal(ORANGE_Y_MAX_D, "Orange portal y-max-d", "portalorangedown", 0, 15/16, 0, 1, 15/16, 1);

//orange y max up
const ORANGE_Y_MAX_U = 207;
Block.newPortal(ORANGE_Y_MAX_U, "Orange portal y-max-up", "portalorangeup", 0, 15/16, 0, 1, 15/16, 1);


// Type 5
//orange x min down
const ORANGE_X_MIN_D = 208;
Block.newPortal(ORANGE_X_MIN_D, "Orange portal x-min-d", "portalorangedown", 1/16, 0, 0, 1/16, 1, 1);

//orange x min up
const ORANGE_X_MIN_U = 209;
Block.newPortal(ORANGE_X_MIN_U, "Orange portal x-min-up", "portalorangeup", 1/16, 0, 0, 1/16, 1, 1);


// Type 6
//orange x max down
const ORANGE_X_MAX_D = 210;
Block.newPortal(ORANGE_X_MAX_D, "Orange portal x-max-d", "portalorangedown", 15/16, 0, 0, 15/16, 1, 1);

//orange x max up
const ORANGE_X_MAX_U = 211;
Block.newPortal(ORANGE_X_MAX_U, "Orange portal x-max-up", "portalorangeup", 15/16, 0, 0, 15/16, 1, 1);


// Type 1
//blue z min down
const BLUE_Z_MIN_D = 212;
Block.newPortal(BLUE_Z_MIN_D, "Blue portal z-min-d", "portalbluedown", 0, 0, 1/16, 1, 1, 1/16);

//blue z min up
const BLUE_Z_MIN_U = 213;
Block.newPortal(BLUE_Z_MIN_U, "Blue portal z-min-up", "portalblueup", 0, 0, 1/16, 1, 1, 1/16);


// Type 2
//blue z max down
const BLUE_Z_MAX_D = 214;
Block.newPortal(BLUE_Z_MAX_D, "Blue portal z-max-d", "portalbluedown", 0, 0, 15/16, 1, 1, 15/16);

//blue z max up
const BLUE_Z_MAX_U = 215;
Block.newPortal(BLUE_Z_MAX_U, "Blue portal z-max-up", "portalblueup", 0, 0, 15/16, 1, 1, 15/16);


// Type 3
//blue y min down
const BLUE_Y_MIN_D = 216;
Block.newPortal(BLUE_Y_MIN_D, "Blue portal y-min-d", "portalbluedown", 0, 1/16, 0, 1, 1/16, 1);

//blue y min up
const BLUE_Y_MIN_U = 217;
Block.newPortal(BLUE_Y_MIN_U, "Blue portal y-min-up", "portalblueup", 0, 1/16, 0, 1, 1/16, 1);


// Type 4
//blue y max down
const BLUE_Y_MAX_D = 218;
Block.newPortal(BLUE_Y_MAX_D, "Blue portal y-max-d", "portalbluedown", 0, 15/16, 0, 1, 15/16, 1);

//blue y max up
const BLUE_Y_MAX_U = 219;
Block.newPortal(BLUE_Y_MAX_U, "Blue portal y-max-up", "portalblueup", 0, 15/16, 0, 1, 15/16, 1);


// Type 5
//blue x min down
const BLUE_X_MIN_D = 220;
Block.newPortal(BLUE_X_MIN_D, "Blue portal x-min-d", "portalbluedown", 1/16, 0, 0, 1/16, 1, 1);

//blue x min up
const BLUE_X_MIN_U = 221;
Block.newPortal(BLUE_X_MIN_U, "Blue portal x-min-up", "portalblueup", 1/16, 0, 0, 1/16, 1, 1);


// Type 6
//blue x max down
const BLUE_X_MAX_D = 222;
Block.newPortal(BLUE_X_MAX_D, "Blue portal x-max-d", "portalbluedown", 15/16, 0, 0, 15/16, 1, 1);

//blue x max up
const BLUE_X_MAX_U = 223;
Block.newPortal(BLUE_X_MAX_U, "Blue portal x-max-up", "portalblueup", 15/16, 0, 0, 15/16, 1, 1);


const PORTAL_JUKEBOX_ID = 224;
Block.newBlock(PORTAL_JUKEBOX_ID, "Portal Jukebox", [["jukebox_side", 0], ["jukebox_top", 0], ["jukebox_side", 0], ["jukebox_side", 0], ["jukebox_side", 0], ["jukebox_side", 0]]);
Block.setDestroyTime(PORTAL_JUKEBOX_ID, 1);

const JUMPER_ID = 225;
Block.newBlock(JUMPER_ID, "Jumper", "jumper");
Block.setDestroyTime(JUMPER_ID, 1);

//radio
const PORTAL_RADIO_A = 226;
Block.newBlock(PORTAL_RADIO_A, "Portal Radio", [["radiotop", 0], ["radiotop", 0], ["radioside", 0], ["radioside", 0], ["radiodisplay", 0], ["radioside", 0]], 0, false, 0);
Block.setDestroyTime(PORTAL_RADIO_A, 1);
Block.setShape(PORTAL_RADIO_A, 5/16, 0, 0, 11/16, 10/16, 1);
Block.setLightOpacity(PORTAL_RADIO_A, 0.01);
const PORTAL_RADIO_B = 227;
Block.newBlock(PORTAL_RADIO_B, "Portal Radio", [["radiotop", 0], ["radiotop", 0], ["radiodisplay", 0], ["radioside", 0], ["radioside", 0], ["radioside", 0]], 0, false, 0);
Block.setDestroyTime(PORTAL_RADIO_B, 1);
Block.setShape(PORTAL_RADIO_B, 0, 0, 5/16, 1, 10/16, 11/16);
Block.setLightOpacity(PORTAL_RADIO_B, 0.01);
const PORTAL_RADIO_C = 228;
Block.newBlock(PORTAL_RADIO_C, "Portal Radio", [["radiotop", 0], ["radiotop", 0], ["radioside", 0], ["radioside", 0], ["radioside", 0], ["radiodisplay", 0]], 0, false, 0);
Block.setDestroyTime(PORTAL_RADIO_C, 1);
Block.setShape(PORTAL_RADIO_C, 5/16, 0, 0, 11/16, 10/16, 1);
Block.setLightOpacity(PORTAL_RADIO_C, 0.01);
const PORTAL_RADIO_D = 229;
Block.newBlock(PORTAL_RADIO_D, "Portal Radio", [["radiotop", 0], ["radiotop", 0], ["radioside", 0], ["radiodisplay", 0], ["radioside", 0], ["radioside", 0]], 0, false, 0);
Block.setDestroyTime(PORTAL_RADIO_D, 1);
Block.setShape(PORTAL_RADIO_D, 0, 0, 5/16, 1, 10/16, 11/16);
Block.setLightOpacity(PORTAL_RADIO_D, 0.01);

//blue gel
const REPULSION_GEL_ID = 230;
Block.newBlock(REPULSION_GEL_ID, "Repulsion Gel Block", [["wool", 3]]);
Block.setDestroyTime(REPULSION_GEL_ID, 5);

//orange gel
const PROPULSION_GEL_ID = 231;
Block.newBlock(PROPULSION_GEL_ID, "Propulsion Gel Block", [["wool", 1]]);
Block.setDestroyTime(PROPULSION_GEL_ID, 5);

	
function selectLevelHook()
{
	initialized = true;
	needSaving = false;
	currentActivity.runOnUiThread(new java.lang.Runnable()
	{
		run: function()
		{
			try
			{
				worldPath = android.os.Environment.getExternalStorageDirectory() + "/games/com.mojang/minecraftWorlds/" + Level.getWorldDir();
				var portalSaveFolder = new java.io.File(worldPath + modSaveFolder);
				portalSaveFolder.mkdirs();	
			}catch(err)
			{
				clientMessage("Error: " + err);
			}
		}
	});
}

function newLevel()
{
	leftGame = false;

	if(Level.getGameMode() == GameMode.CREATIVE)
	{
		// crashes in survival
		Player.addItemCreativeInv(ID_PORTAL_INFORMATION, 1);
		Player.addItemCreativeInv(ID_PORTAL_GUN_BLUE, 1);
		Player.addItemCreativeInv(ID_PORTAL_GUN_GOLD, 1);
		Player.addItemCreativeInv(ID_PORTAL_GUN_IRON, 1);
		Player.addItemCreativeInv(ID_PORTAL_GUN_LAVA, 1);
		Player.addItemCreativeInv(ID_PORTAL_GUN_WOOD_AND_STONE, 1);
		Player.addItemCreativeInv(ID_GRAVITY_GUN, 1);
		Player.addItemCreativeInv(ID_TURRET, 1);
		Player.addItemCreativeInv(ID_TURRET_OPTIONS, 1);
		Player.addItemCreativeInv(PORTAL_JUKEBOX_ID, 1);
		Player.addItemCreativeInv(JUMPER_ID, 1);
		Player.addItemCreativeInv(PORTAL_RADIO_A, 1);
		Player.addItemCreativeInv(PORTAL_RADIO_B, 1);
		Player.addItemCreativeInv(PORTAL_RADIO_C, 1);
		Player.addItemCreativeInv(PORTAL_RADIO_D, 1);
		Player.addItemCreativeInv(REPULSION_GEL_ID, 1);
		Player.addItemCreativeInv(PROPULSION_GEL_ID, 1);
	}
	
	var bSizeTest = ModPE.readData("bSize");
	if(bSizeTest != "" && bSizeTest != null && bSizeTest != undefined)
		buttonsSize = parseFloat(bSizeTest);

	var backgroundTest = ModPE.readData("backgroundInt");
	if(backgroundTest != "" && backgroundTest != null && backgroundTest != undefined)
	{
		backgroundTest = parseFloat(backgroundTest);
		if(backgroundTest > 0)
		{
			switch(backgroundTest)
			{
				case backgroundDarkDirtImageInt:
				{
					background = new android.graphics.drawable.BitmapDrawable(scaledBackgroundDarkDirtImageDecoded);
					background.setTileModeXY(android.graphics.Shader.TileMode.REPEAT, android.graphics.Shader.TileMode.REPEAT);
					break;
				}
				case backgroundDirtImageInt:
				{
					background = new android.graphics.drawable.BitmapDrawable(scaledBackgroundDirtImageDecoded);
					background.setTileModeXY(android.graphics.Shader.TileMode.REPEAT, android.graphics.Shader.TileMode.REPEAT);
					break;
				}
				case backgroundGlowingImageInt:
				{
					background = new android.graphics.drawable.BitmapDrawable(scaledBackgroundGlowingImageDecoded);
					background.setTileModeXY(android.graphics.Shader.TileMode.REPEAT, android.graphics.Shader.TileMode.REPEAT);
					break;
				}
				case backgroundObsidianImageInt:
				{
					background = new android.graphics.drawable.BitmapDrawable(scaledBackgroundObsidianImageDecoded);
					background.setTileModeXY(android.graphics.Shader.TileMode.REPEAT, android.graphics.Shader.TileMode.REPEAT);
					break;
				}
				default:
				{
					background = new android.graphics.drawable.BitmapDrawable(scaledBackgroundDarkDirtImageDecoded);
					background.setTileModeXY(android.graphics.Shader.TileMode.REPEAT, android.graphics.Shader.TileMode.REPEAT);
					break;
				}
			}
		}else
		{
			background = new android.graphics.drawable.BitmapDrawable(scaledBackgroundDarkDirtImageDecoded);
			background.setTileModeXY(android.graphics.Shader.TileMode.REPEAT, android.graphics.Shader.TileMode.REPEAT);
		}
	}

	new java.lang.Thread(new java.lang.Runnable()
	{
		run: function()
		{
			getLatestVersionMod();
			if(latestVersion != CURRENT_VERSION && latestVersion != undefined)
				updateAvailableUI();
			else
			{
				currentActivity.runOnUiThread(new java.lang.Runnable() {
					run: function() {
						android.widget.Toast.makeText(currentActivity, new android.text.Html.fromHtml("<b>Portal 2 Mod</b>: You have the latest version."), 0).show();
					}
				});
			}
		}
	}).start();

	clientMessage("§fP§9O§fRTAL M§cO§fD " + CURRENT_VERSION + " by Desno365.");

	ModPE.playSoundFromFile("game-entry1.wav");
}

function leaveGame()
{
	leftGame = true;
	if(fireButtonsInitialized)
	{
		currentActivity.runOnUiThread(new java.lang.Runnable(
		{
		run: function()
			{
				popupOrange.dismiss();
				popupBlue.dismiss();
				popupOverlay.dismiss();
				popupPick.dismiss();
				popupDrop.dismiss();
			}
		}));
		fireButtonsInitialized = false;
	}

	if(gravityButtonsInitialized)
	{
		currentActivity.runOnUiThread(new java.lang.Runnable(
		{
		run: function()
			{
				popupShoot.dismiss();
				popupDropGG.dismiss();
			}
		}));
		gravityButtonsInitialized = false;
	}

	initialized = true;
	countdownInitialized = 0;

	orangeInformation.length = 0;
	blueInformation.length = 0;
	arrowOrangeLaunched = false;
	arrowBlueLaunched = false;

	pickEnabledBool = false;
	currentPickDisplayed = false;
	isPickingEntity = false;
	currentDropDisplayed = false;
	currentGGButtonsDisplayed = false;

	displayedMessageTurretsBeta = false;
	displayedMessageWoodStone = false;
	displayedMessageNoSound = false;
	displayedMessagePortalInformation = false;

	turrets.lenght = 0;
	turrets = [];
	spawnedTurretsNumber = 0;
	singing = false;

	sound1.reset();
	sound2.reset();
	music.reset();
	
	radio.reset();
	isRadioPlaying = false;
	radioCountdown = 0;
}

function useItem(x, y, z, itemId, blockId, side, itemDamage)
{
	//PortalGun Wood & Stone
	if(itemId == ID_PORTAL_GUN_WOOD_AND_STONE)
	{
		var random = Math.floor((Math.random() * 3) + 1);
		ModPE.playSoundFromFile("portals/portal_open" + random + ".wav");
		if(portalWithUseItem)
		{
			setPortalOrange(Math.floor(x), Math.floor(y), Math.floor(z));
			portalWithUseItem = !portalWithUseItem;
		}else
		{
			setPortalBlue(Math.floor(x), Math.floor(y), Math.floor(z));
			portalWithUseItem = !portalWithUseItem;
		}
		Item.damageCarried();
	}
	
	//radio
	if(Level.getTile(x, y, z) >= PORTAL_RADIO_A && Level.getTile(x, y, z) <= PORTAL_RADIO_D)
	{
		preventDefault();
		try
		{
			radio.reset();
			radio.setDataSource(new android.os.Environment.getExternalStorageDirectory() + "/games/com.mojang/portal-sounds/music/looping_radio_mix.wav");
			radio.prepare();
			radio.setLooping(true);
			radio.setVolume(1.0, 1.0);
			radio.start();
			ModPE.showTipMessage("Portal: Radio ON.");
			isRadioPlaying = true;
			radioX = Math.floor(x) + 0.5;
			radioY = Math.floor(y);
			radioZ = Math.floor(z) + 0.5;
		}
		catch(err)
		{
			ModPE.showTipMessage("Portal: Sounds not installed!");
		}
	}

	//turrets
	if(itemId == ID_TURRET)
	{
		if(spawnedTurretsNumber >= 20)
			clientMessage("For now you can't spawn more than 20 turrets.");
		else
		{
			ModPE.showTipMessage("Hit the turret with 'Turret Options' to make it aggressive.");

			turrets[spawnedTurretsNumber] = new turret(Level.spawnMob(x + 0.5, y + 0.8, z + 0.5, 11, "mob/turret.png"));
			Entity.setHealth(turrets[spawnedTurretsNumber].entity, 1);
			Entity.setRenderType(turrets[spawnedTurretsNumber].entity, TurretRenderType.renderType);
			turrets[spawnedTurretsNumber].x = Entity.getX(turrets[spawnedTurretsNumber].entity);
			turrets[spawnedTurretsNumber].y = Entity.getY(turrets[spawnedTurretsNumber].entity);
			turrets[spawnedTurretsNumber].z = Entity.getZ(turrets[spawnedTurretsNumber].entity);
			spawnedTurretsNumber++;
			saveTurrets();
			
			if(turrets[spawnedTurretsNumber - 1].isThereTurretAtDistance(1))
				if(turrets[spawnedTurretsNumber - 1].isThereTurretAtDistance(2))
					if(turrets[spawnedTurretsNumber - 1].isThereTurretAtDistance(3))
					{
						ModPE.playMusicFromFile("portal_turret_song.mp3");
						ModPE.showTipMessage("Singing...");
						singing = true;
					}
		}
		if(spawnedTurretsNumber >= 15)
			clientMessage("§cWARNING§f: So many turrets can slow down your device when playing");
	}

	//jukebox
	if(Level.getTile(x, y, z) == PORTAL_JUKEBOX_ID)
	{
		jukeboxGUI();
		preventDefault();
		return;
	}

	//Portal information
	if(itemId == ID_PORTAL_INFORMATION)
	{
		informationForPortalGUI();
		preventDefault();
		return;
	}
}

function changeCarriedItem(currentItem, previousItem)
{
	switch(currentItem)
	{
		//player carrying the Portal Wood & Stone item
		case ID_PORTAL_GUN_WOOD_AND_STONE:
		{
			ModPE.showTipMessage("Tap on a block to place a Portal.");
			break;
		}

		//player carrying the Portal Information item
		case ID_PORTAL_INFORMATION:
		{
			ModPE.showTipMessage("Tap on a block to open the GUI.");
			break;
		}
	}
}

function entityAddedHook(entity)
{
	//needed for mobs support for portal and jumper
	mobs.push(entity);
}

function attackHook(attacker, victim)
{
	if(attacker == Player.getEntity())
	{
		//PortalGun gravity
		if(pickEnabledBool && (Player.getCarriedItem() == ID_PORTAL_GUN_BLUE || Player.getCarriedItem() == ID_PORTAL_GUN_GOLD || Player.getCarriedItem() == ID_PORTAL_GUN_IRON || Player.getCarriedItem() == ID_PORTAL_GUN_LAVA || Player.getCarriedItem() == ID_PORTAL_GUN_ORANGE))
		{
			preventDefault();
			ggMob = victim;
			isPickingEntity = true;
			for(var i = 0; i < spawnedTurretsNumber; i++)
			{
				if(victim == turrets[i].entity)
				{
					var random = Math.floor((Math.random() * 10) + 1);
					ModPE.playSoundFromFile("turrets/turret_pickup_" + random + ".wav");
					if(singing)
					{
						ModPE.stopMusic();
						singing = false;
					}
					return;
				}
			}
			ModPE.playSoundFromFile("gravitygun/pickup.ogg");
		}

		//GravityGun
		if(Player.getCarriedItem() == ID_GRAVITY_GUN && !isPickingEntity)
		{
			preventDefault();
			ggMob = victim;
			isPickingEntity = true;
			Item.damageCarried();
			for(var i = 0; i < spawnedTurretsNumber; i++)
			{
				if(victim == turrets[i].entity)
				{
					var random = Math.floor((Math.random() * 10) + 1);
					ModPE.playSoundFromFile("turrets/turret_pickup_" + random + ".wav");
					if(singing)
					{
						ModPE.stopMusic();
						singing = false;
					}
					return;
				}
			}
			ModPE.playSoundFromFile("gravitygun/pickup.ogg");
		}

		//turrets options
		for(var i = 0; i < spawnedTurretsNumber; i++)
		{
			if(victim == turrets[i].entity)
			{
				if(Player.getCarriedItem() == ID_TURRET_OPTIONS)
					turretsOptionsGUI(i);
				else
					ModPE.showTipMessage("You can't hit a turret.");
				preventDefault();
			}
		}
	}
}

function deathHook(murderer, victim)
{
	//PortalGun gravity and GravityGun
	if(victim == ggMob)
	{
		ModPE.playSoundFromFile("gravitygun/fail.ogg");
		isPickingEntity = false;
	}
	
	//turrets
	for(var i = 0; i < spawnedTurretsNumber; i++)
	{
		if(victim == turrets[i].entity)
		{
			turrets.splice(i, 1);
			spawnedTurretsNumber--;
			var random = Math.floor((Math.random() * 9) + 1);
			ModPE.playSoundFromFile("turrets/turret_disabled_" + random + ".wav");
			saveTurrets();
			if(singing)
			{
				ModPE.stopMusic();
				singing = false;
			}
		}
	}
}

function entityRemovedHook(entity)
{
	removeThisEntityFromMobs:
	for(var j in mobs)
	{
		if(mobs[j] == entity)
		{
			mobs.splice(j, 1);
			break removeThisEntityFromMobs;
		}
	}
	/*//PortalGun's arrows
	for (var i = 0; i < portalShotOrange.size(); i++){
		if (Entity.getX(portalShotOrange.get(i)) == Entity.getX(entity)){
			var blockPlacer = portalShotOrange.get(i);
			var x = Entity.getX(blockPlacer);
			var y = Entity.getY(blockPlacer);
			var z = Entity.getZ(blockPlacer);
			arrowOrangeLaunched = false;
			setPortalOrange(Math.floor(x), Math.floor(y), Math.floor(z));
			portalShotOrange.remove(i);
			i--;
		}
	}
	for (var i = 0; i < portalShotBlue.size(); i++){
		if (Entity.getX(portalShotBlue.get(i)) == Entity.getX(entity)){
			var blockPlacer = portalShotBlue.get(i);
			var x = Entity.getX(blockPlacer);
			var y = Entity.getY(blockPlacer);
			var z = Entity.getZ(blockPlacer);
			arrowBlueLaunched = false;
			setPortalBlue(Math.floor(x), Math.floor(y), Math.floor(z));
			portalShotBlue.remove(i);
			i--;
		}
	}now uses modTick()*/

	//PortalGun gravity and GravityGun
	if(entity == ggMob)
	{
		ModPE.playSoundFromFile("gravitygun/fail.ogg");
		isPickingEntity = false;
	}

	//turrets
	for(var i = 0; i < spawnedTurretsNumber; i++)
	{
		if(entity == turrets[i].entity)
		{
			turrets.splice(i, 1);
			spawnedTurretsNumber--;
			needSaving = true;
			if(singing)
			{
				ModPE.stopMusic();
				singing = false;
			}
		}
	}
	if(Entity.getEntityTypeId(entity) == 81 && checkProximity(Player.getEntity(), entity, 1.4, 1.4))
		Player.setHealth(Entity.getHealth(Player.getEntity()) - 2);
}

function destroyBlock(x, y, z)
{
	//Portals
	if(Math.floor(x) == orangeInformation[0] && Math.floor(y) == orangeInformation[1] && Math.floor(z) == orangeInformation[2])
	{
		generatedPortalOrange = false;
		Level.setTile(orangeInformation[3], orangeInformation[4], orangeInformation[5], 0);
		savePortalsToDelete();
	}
	if(Math.floor(x) == orangeInformation[3] && Math.floor(y) == orangeInformation[4] && Math.floor(z) == orangeInformation[5])
	{
		generatedPortalOrange = false;
		Level.setTile(orangeInformation[0], orangeInformation[1], orangeInformation[2], 0);
		savePortalsToDelete();
	}

	if(Math.floor(x) == blueInformation[0] && Math.floor(y) == blueInformation[1] && Math.floor(z) == blueInformation[2])
	{
		generatedPortalBlue = false;
		Level.setTile(blueInformation[3], blueInformation[4], blueInformation[5], 0);
		savePortalsToDelete();
	}
	if(Math.floor(x) == blueInformation[3] && Math.floor(y) == blueInformation[4] && Math.floor(z) == blueInformation[5])
	{
		generatedPortalBlue = false;
		Level.setTile(blueInformation[0], blueInformation[1], blueInformation[2], 0);
		savePortalsToDelete();
	}
	
	//block under turrets
	for(var i = 0; i < spawnedTurretsNumber; i++)
		if(Math.floor(x) == Math.floor(Entity.getX(turrets[i].entity)) && (Math.floor(y) == (Math.floor(Entity.getY(turrets[i].entity)) - 1) || Math.floor(y) == Math.floor(Entity.getY(turrets[i].entity))) && Math.floor(z) == Math.floor(Entity.getZ(turrets[i].entity)))
			falling.push(turrets[i].entity);
	
	//playing radio
	if(isRadioPlaying)
	{
		if(Math.floor(x) + 0.5 == radioX && Math.floor(y) == radioY && Math.floor(z) + 0.5 == radioZ)
		{
			radio.reset();
			isRadioPlaying = false;
		}
	}
}

function procCmd(cmd1)
{
	var cmd2 = cmd1.toLowerCase();
	var data = cmd2.split(" ");
	switch(data[0])
	{
		case "portal-gun":
		case "portalgun":
		{
			Player.addItemInventory(ID_PORTAL_GUN_BLUE, 1, 0);
			break;
		}
		case "enable":
		case "mobs-support":
		{
			warningEveryEntity();
			break;
		}
		case "disable":
		case "no-mobs":
		{
			portalsWithEveryEntity = false;
			clientMessage("Disabled mobs support.");
			break;
		}
	}
}

function modTick()
{
	//change carried item hook
	if(Player.getCarriedItem() != previousCarriedItem)
		changeCarriedItem(Player.getCarriedItem(), previousCarriedItem);
	previousCarriedItem = Player.getCarriedItem();

	//initialized
	if(initialized)
	{
		countdownInitialized++;
		if(countdownInitialized == 20)
		{
			loadPortalsToDelete();
			var entities = Entity.getAll();
			for(var i in entities)
			{
				if(Entity.getEntityTypeId(entities[i]) == 11)
					Entity.remove(entities[i]);
			}
			loadTurrets();
			initialized = false;
		}
	}

	//player carrying a PortalGun
	if(Player.getCarriedItem() == ID_PORTAL_GUN_BLUE || Player.getCarriedItem() == ID_PORTAL_GUN_GOLD || Player.getCarriedItem() == ID_PORTAL_GUN_IRON || Player.getCarriedItem() == ID_PORTAL_GUN_LAVA || Player.getCarriedItem() == ID_PORTAL_GUN_ORANGE)
	{
		currentActivity.runOnUiThread(new java.lang.Runnable(
		{
			run: function()
			{
				try
				{
					var matrix = new android.graphics.Matrix();
					matrix.postScale(1 + buttonsSize, 1 + buttonsSize);
					if(!fireButtonsInitialized)
					{
						ModPE.playSoundFromFile("portalgun/portalgun_powerup1.wav");


						popupOrange = new android.widget.PopupWindow();
						var layoutOrange = new android.widget.RelativeLayout(currentActivity);
						
						scaled[0] = new android.graphics.Bitmap.createBitmap(g[0], 0, 0, 72, 72, matrix, true);
						var orangeImage = new android.widget.ImageView(currentActivity);
						orangeImage.setImageBitmap(scaled[0]);
						orangeImage.setOnClickListener(new android.view.View.OnClickListener({
						onClick: function()
						{
							if(portalShotOrange.size() < 1)
							{
								ModPE.playSoundFromFile("portalgun/portalgun_shoot_red1.wav");
								var gunShootDir = lookDir(getYaw(), getPitch());
								orangeThrow = Level.spawnMob(getPlayerX() + (gunShootDir.x * 2), getPlayerY() + (gunShootDir.y * 2), getPlayerZ() + (gunShootDir.z * 2), 80);
								if(Player.getCarriedItem() == ID_PORTAL_GUN_LAVA)
									Entity.setFireTicks(orangeThrow, 100);
								//Entity.setRenderType(orangeThrow, 18);//not working on 0.9.3
								arrowOrangeLaunched = true;
								var speedO = Item.getPortalGunBulletSpeed();
								setVelX(orangeThrow, gunShootDir.x * speedO);
								setVelY(orangeThrow, gunShootDir.y * speedO);
								setVelZ(orangeThrow, gunShootDir.z * speedO);
								portalShotOrange.addElement(orangeThrow);
								Item.damageCarried();
								if(Player.getCarriedItem() == ID_PORTAL_GUN_BLUE)
									Item.changePortalGunColor();
							}
						}}));
						layoutOrange.addView(orangeImage);

						popupOrange.setContentView(layoutOrange);
						popupOrange.setWidth(72 * (1 + buttonsSize));
						popupOrange.setHeight(72 * (1 + buttonsSize));
						popupOrange.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
						popupOrange.showAtLocation(currentActivity.getWindow().getDecorView(), android.view.Gravity.RIGHT | android.view.Gravity.CENTER, 0, 0);


						popupBlue = new android.widget.PopupWindow();
						var layoutBlue = new android.widget.RelativeLayout(currentActivity);

						scaled[1] = new android.graphics.Bitmap.createBitmap(g[1], 0, 0, 72, 72, matrix, true);
						var blueImage = new android.widget.ImageView(currentActivity);
						blueImage.setImageBitmap(scaled[1]);
						blueImage.setOnClickListener(new android.view.View.OnClickListener({
						onClick: function()
						{
							if(portalShotBlue.size() < 1)
							{
								ModPE.playSoundFromFile("portalgun/portalgun_shoot_blue1.wav");
								var gunShootDir = lookDir(getYaw(), getPitch());
								blueThrow = Level.spawnMob(getPlayerX() + (gunShootDir.x * 2), getPlayerY() + (gunShootDir.y * 2), getPlayerZ() + (gunShootDir.z * 2), 80);
								if(Player.getCarriedItem() == ID_PORTAL_GUN_LAVA)
									Entity.setFireTicks(blueThrow, 100);
								//Entity.setRenderType(blueThrow, 18);//not working on 0.9.3
								arrowBlueLaunched = true;
								var speedB = Item.getPortalGunBulletSpeed();
								setVelX(blueThrow, gunShootDir.x * speedB);
								setVelY(blueThrow, gunShootDir.y * speedB);
								setVelZ(blueThrow, gunShootDir.z * speedB);
								portalShotBlue.addElement(blueThrow);
								Item.damageCarried();
								if(Player.getCarriedItem() == ID_PORTAL_GUN_ORANGE)
									Item.changePortalGunColor();
							}
						}}));
						layoutBlue.addView(blueImage);

						popupBlue.setContentView(layoutBlue);
						popupBlue.setWidth(72 * (1 + buttonsSize));
						popupBlue.setHeight(72 * (1 + buttonsSize));
						popupBlue.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
						popupBlue.showAtLocation(currentActivity.getWindow().getDecorView(), android.view.Gravity.LEFT | android.view.Gravity.CENTER, 0, 0);


						popupOverlay = new android.widget.PopupWindow();
						var layoutOverlay = new android.widget.RelativeLayout(currentActivity);

						scaled[2] = new android.graphics.Bitmap.createBitmap(g[2], 0, 0, 50, 78, matrix, true);
						var overlayImage = new android.widget.ImageView(currentActivity);
						overlayImage.setImageBitmap(scaled[2]);
						layoutOverlay.addView(overlayImage);

						popupOverlay.setContentView(layoutOverlay);
						popupOverlay.setWidth(50 * (1 + buttonsSize));
						popupOverlay.setHeight(78 * (1 + buttonsSize));
						popupOverlay.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
						popupOverlay.showAtLocation(currentActivity.getWindow().getDecorView(), android.view.Gravity.CENTER | android.view.Gravity.CENTER, 0, 0);


						pickEnabledBool = false;
						popupPick = new android.widget.PopupWindow();
						layoutPick = new android.widget.RelativeLayout(currentActivity);

						scaled[6] = new android.graphics.Bitmap.createBitmap(g[6], 0, 0, g[6].getWidth(), g[6].getHeight(), matrix, true);
						var pickImage = new android.widget.ImageView(currentActivity);
						pickImage.setImageBitmap(scaled[6]);
						pickImage.setOnClickListener(new android.view.View.OnClickListener({
						onClick: function()
						{
							pickEnabledBool = true;
							ModPE.showTipMessage("Pick mode ON. Hit a mob to pick it.");
						}}));
						layoutPick.addView(pickImage);

						popupPick.setContentView(layoutPick);
						popupPick.setWidth(72 * (1 + buttonsSize));
						popupPick.setHeight(40 * (1 + buttonsSize));
						popupPick.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
						popupPick.showAtLocation(currentActivity.getWindow().getDecorView(), android.view.Gravity.LEFT | android.view.Gravity.CENTER, 0, -((scaled[0].getHeight() / 2) + (scaled[6].getHeight()) + 10));
						

						isPickingEntity = false;
						popupDrop = new android.widget.PopupWindow();
						layoutDrop = new android.widget.RelativeLayout(currentActivity);

						scaled[7] = new android.graphics.Bitmap.createBitmap(g[7], 0, 0, g[7].getWidth(), g[7].getHeight(), matrix, true);
						var dropImage = new android.widget.ImageView(currentActivity);
						dropImage.setImageBitmap(scaled[7]);
						dropImage.setOnClickListener(new android.view.View.OnClickListener({
						onClick: function()
						{
							ModPE.playSoundFromFile("gravitygun/fail.ogg");
							ModPE.showTipMessage("You can drop a mob only when you are picking it.");
						}}));
						layoutDrop.addView(dropImage);

						popupDrop.setContentView(layoutDrop);
						popupDrop.setWidth(72 * (1 + buttonsSize));
						popupDrop.setHeight(40 * (1 + buttonsSize));
						popupDrop.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
						popupDrop.showAtLocation(currentActivity.getWindow().getDecorView(), android.view.Gravity.RIGHT | android.view.Gravity.CENTER, 0, -((scaled[1].getHeight() / 2) + (scaled[7].getHeight()) + 10));


						fireButtonsInitialized = true;
					}

					if(pickEnabledBool != currentPickDisplayed)
					{
						if(pickEnabledBool)
						{
							popupPick.dismiss();

							popupPick = new android.widget.PopupWindow();
							layoutPick = new android.widget.RelativeLayout(currentActivity);

							scaled[4] = new android.graphics.Bitmap.createBitmap(g[4], 0, 0, g[4].getWidth(), g[4].getHeight(), matrix, true);
							var pickImage = new android.widget.ImageView(currentActivity);
							pickImage.setImageBitmap(scaled[4]);
							pickImage.setOnClickListener(new android.view.View.OnClickListener({
							onClick: function()
							{
								pickEnabledBool = false;
								ModPE.showTipMessage("Pick mode OFF.");
							}}));
							layoutPick.addView(pickImage);

							popupPick.setContentView(layoutPick);
							popupPick.setWidth(72 * (1 + buttonsSize));
							popupPick.setHeight(40 * (1 + buttonsSize));
							popupPick.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
							popupPick.showAtLocation(currentActivity.getWindow().getDecorView(), android.view.Gravity.LEFT | android.view.Gravity.CENTER, 0, -((scaled[0].getHeight() / 2) + (scaled[4].getHeight()) + 10));

							currentPickDisplayed = true;
						}else
						{
							popupPick.dismiss();

							popupPick = new android.widget.PopupWindow();
							layoutPick = new android.widget.RelativeLayout(currentActivity);

							scaled[6] = new android.graphics.Bitmap.createBitmap(g[6], 0, 0, g[6].getWidth(), g[6].getHeight(), matrix, true);
							var pickImage = new android.widget.ImageView(currentActivity);
							pickImage.setImageBitmap(scaled[6]);
							pickImage.setOnClickListener(new android.view.View.OnClickListener({
							onClick: function()
							{
								pickEnabledBool = true;
								ModPE.showTipMessage("Pick mode ON. Hit a mob to pick it.");
							}}));
							layoutPick.addView(pickImage);

							popupPick.setContentView(layoutPick);
							popupPick.setWidth(72 * (1 + buttonsSize));
							popupPick.setHeight(40 * (1 + buttonsSize));
							popupPick.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
							popupPick.showAtLocation(currentActivity.getWindow().getDecorView(), android.view.Gravity.LEFT | android.view.Gravity.CENTER, 0, -((scaled[0].getHeight() / 2) + (scaled[6].getHeight()) + 10));

							currentPickDisplayed = false;
						}
					}

					if(isPickingEntity != currentDropDisplayed)
					{
						if(isPickingEntity)
						{
							popupDrop.dismiss();

							popupDrop = new android.widget.PopupWindow();
							layoutDrop = new android.widget.RelativeLayout(currentActivity);

							scaled[5] = new android.graphics.Bitmap.createBitmap(g[5], 0, 0, g[5].getWidth(), g[5].getHeight(), matrix, true);
							var dropImage = new android.widget.ImageView(currentActivity);
							dropImage.setImageBitmap(scaled[5]);
							dropImage.setOnClickListener(new android.view.View.OnClickListener({
							onClick: function()
							{
								ModPE.playSoundFromFile("gravitygun/drop.ogg");
								isPickingEntity = false;
							}}));
							layoutDrop.addView(dropImage);

							popupDrop.setContentView(layoutDrop);
							popupDrop.setWidth(72 * (1 + buttonsSize));
							popupDrop.setHeight(40 * (1 + buttonsSize));
							popupDrop.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
							popupDrop.showAtLocation(currentActivity.getWindow().getDecorView(), android.view.Gravity.RIGHT | android.view.Gravity.CENTER, 0, -((scaled[1].getHeight() / 2) + (scaled[5].getHeight()) + 10));

							currentDropDisplayed = true;
						}else
						{
							popupDrop.dismiss();

							popupDrop = new android.widget.PopupWindow();
							layoutDrop = new android.widget.RelativeLayout(currentActivity);

							scaled[7] = new android.graphics.Bitmap.createBitmap(g[7], 0, 0, g[7].getWidth(), g[7].getHeight(), matrix, true);
							var dropImage = new android.widget.ImageView(currentActivity);
							dropImage.setImageBitmap(scaled[7]);
							dropImage.setOnClickListener(new android.view.View.OnClickListener({
							onClick: function()
							{
								ModPE.showTipMessage("You can drop a mob only when you are picking it.");
							}}));
							layoutDrop.addView(dropImage);

							popupDrop.setContentView(layoutDrop);
							popupDrop.setWidth(72 * (1 + buttonsSize));
							popupDrop.setHeight(40 * ( 1 + buttonsSize));
							popupDrop.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
							popupDrop.showAtLocation(currentActivity.getWindow().getDecorView(), android.view.Gravity.RIGHT | android.view.Gravity.CENTER, 0, -((scaled[1].getHeight() / 2) + (scaled[6].getHeight()) + 10));
							
							currentDropDisplayed = false;
						}
					}
				}catch(err)
				{
					clientMessage("Error: " + err);
				}
			}
		}));
	}else
	{
		if(fireButtonsInitialized)
		{
			currentActivity.runOnUiThread(new java.lang.Runnable(
			{
			run: function()
				{
					popupOrange.dismiss();
					popupBlue.dismiss();
					popupOverlay.dismiss();
					popupPick.dismiss();
					popupDrop.dismiss();
				}
			}));
			fireButtonsInitialized = false;
			pickEnabledBool = false;
			isPickingEntity = false;
		}
	}

	//player carrying GravityGun
	if(Player.getCarriedItem() == ID_GRAVITY_GUN)
	{
		currentActivity.runOnUiThread(new java.lang.Runnable(
		{
			run: function()
			{
				try
				{
					var matrix = new android.graphics.Matrix();
					matrix.postScale(1 + buttonsSize, 1 + buttonsSize);
					if(!gravityButtonsInitialized)
					{
						ModPE.playSoundFromFile("gravitygun/equip.ogg");
						isPickingEntity = false;
						currentGGButtonsDisplayed = false;

						popupShoot = new android.widget.PopupWindow();
						layoutShoot = new android.widget.RelativeLayout(currentActivity);

						scaled[9] = new android.graphics.Bitmap.createBitmap(g[9], 0, 0, g[9].getWidth(), g[9].getHeight(), matrix, true);
						var shootImage = new android.widget.ImageView(currentActivity);
						shootImage.setImageBitmap(scaled[9]);
						shootImage.setOnClickListener(new android.view.View.OnClickListener({
						onClick: function()
						{
							ModPE.playSoundFromFile("gravitygun/fail.ogg");
							ModPE.showTipMessage("You can shoot a mob only when you are picking it.");
						}}));
						layoutShoot.addView(shootImage);

						popupShoot.setContentView(layoutShoot);
						popupShoot.setWidth(83 * (1 + buttonsSize));
						popupShoot.setHeight(40 * (1 + buttonsSize));
						popupShoot.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
						popupShoot.showAtLocation(currentActivity.getWindow().getDecorView(), android.view.Gravity.LEFT | android.view.Gravity.CENTER, 0, 0);
						

						popupDropGG = new android.widget.PopupWindow();
						layoutDropGG = new android.widget.RelativeLayout(currentActivity);

						scaled[7] = new android.graphics.Bitmap.createBitmap(g[7], 0, 0, g[7].getWidth(), g[7].getHeight(), matrix, true);
						var dropGGImage = new android.widget.ImageView(currentActivity);
						dropGGImage.setImageBitmap(scaled[7]);
						dropGGImage.setOnClickListener(new android.view.View.OnClickListener({
						onClick: function()
						{
							ModPE.playSoundFromFile("gravitygun/fail.ogg");
							ModPE.showTipMessage("You can drop a mob only when you are picking it.");
						}}));
						layoutDropGG.addView(dropGGImage);

						popupDropGG.setContentView(layoutDropGG);
						popupDropGG.setWidth(72 * (1 + buttonsSize));
						popupDropGG.setHeight(40 * (1 + buttonsSize));
						popupDropGG.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
						popupDropGG.showAtLocation(currentActivity.getWindow().getDecorView(), android.view.Gravity.RIGHT | android.view.Gravity.CENTER, 0, 0);


						gravityButtonsInitialized = true;
					}

					if(isPickingEntity != currentGGButtonsDisplayed)
					{
						if(isPickingEntity)
						{
							popupDropGG.dismiss();
							popupShoot.dismiss();


							popupShoot = new android.widget.PopupWindow();
							layoutShoot = new android.widget.RelativeLayout(currentActivity);

							scaled[8] = new android.graphics.Bitmap.createBitmap(g[8], 0, 0, g[8].getWidth(), g[8].getHeight(), matrix, true);
							var shootImage = new android.widget.ImageView(currentActivity);
							shootImage.setImageBitmap(scaled[8]);
							shootImage.setOnClickListener(new android.view.View.OnClickListener({
							onClick: function()
							{
								ModPE.playSoundFromFile("gravitygun/fire.ogg");
								isPickingEntity = false;
								var shootGgMob = lookDir(getYaw(), getPitch());
								setVelX(ggMob, shootGgMob.x * 3.3);
								setVelY(ggMob, shootGgMob.y * 3.3);
								setVelZ(ggMob, shootGgMob.z * 3.3);
							}}));
							layoutShoot.addView(shootImage);

							popupShoot.setContentView(layoutShoot);
							popupShoot.setWidth(83 * (1 + buttonsSize));
							popupShoot.setHeight(40 * (1 + buttonsSize));
							popupShoot.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
							popupShoot.showAtLocation(currentActivity.getWindow().getDecorView(), android.view.Gravity.LEFT | android.view.Gravity.CENTER, 0, 0);
							

							popupDropGG = new android.widget.PopupWindow();
							layoutDropGG = new android.widget.RelativeLayout(currentActivity);

							scaled[5] = new android.graphics.Bitmap.createBitmap(g[5], 0, 0, g[5].getWidth(), g[5].getHeight(), matrix, true);
							var dropGGImage = new android.widget.ImageView(currentActivity);
							dropGGImage.setImageBitmap(scaled[5]);
							dropGGImage.setOnClickListener(new android.view.View.OnClickListener({
							onClick: function()
							{
								ModPE.playSoundFromFile("gravitygun/drop.ogg");
								isPickingEntity = false;
							}}));
							layoutDropGG.addView(dropGGImage);

							popupDropGG.setContentView(layoutDropGG);
							popupDropGG.setWidth(72 * (1 + buttonsSize));
							popupDropGG.setHeight(40 * (1 + buttonsSize));
							popupDropGG.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
							popupDropGG.showAtLocation(currentActivity.getWindow().getDecorView(), android.view.Gravity.RIGHT | android.view.Gravity.CENTER, 0, 0);

							
							currentGGButtonsDisplayed = true;
						}else
						{
							popupDropGG.dismiss();
							popupShoot.dismiss();


							popupShoot = new android.widget.PopupWindow();
							layoutShoot = new android.widget.RelativeLayout(currentActivity);
							
							scaled[9] = new android.graphics.Bitmap.createBitmap(g[9], 0, 0, g[9].getWidth(), g[9].getHeight(), matrix, true);
							var shootImage = new android.widget.ImageView(currentActivity);
							shootImage.setImageBitmap(scaled[9]);
							shootImage.setOnClickListener(new android.view.View.OnClickListener({
							onClick: function()
							{
								ModPE.playSoundFromFile("gravitygun/fail.ogg");
								ModPE.showTipMessage("You can shoot a mob only when you are picking it.");
							}}));
							layoutShoot.addView(shootImage);

							popupShoot.setContentView(layoutShoot);
							popupShoot.setWidth(83 * (1 + buttonsSize));
							popupShoot.setHeight(40 * (1 + buttonsSize));
							popupShoot.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
							popupShoot.showAtLocation(currentActivity.getWindow().getDecorView(), android.view.Gravity.LEFT | android.view.Gravity.CENTER, 0, 0);
							

							popupDropGG = new android.widget.PopupWindow();
							layoutDropGG = new android.widget.RelativeLayout(currentActivity);

							scaled[7] = new android.graphics.Bitmap.createBitmap(g[7], 0, 0, g[7].getWidth(), g[7].getHeight(), matrix, true);
							var dropGGImage = new android.widget.ImageView(currentActivity);
							dropGGImage.setImageBitmap(scaled[7]);
							dropGGImage.setOnClickListener(new android.view.View.OnClickListener({
							onClick: function()
							{
								ModPE.playSoundFromFile("gravitygun/fail.ogg");
								ModPE.showTipMessage("You can drop a mob only when you are picking it.");
							}}));
							layoutDropGG.addView(dropGGImage);

							popupDropGG.setContentView(layoutDropGG);
							popupDropGG.setWidth(72 * (1 + buttonsSize));
							popupDropGG.setHeight(40 * (1 + buttonsSize));
							popupDropGG.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
							popupDropGG.showAtLocation(currentActivity.getWindow().getDecorView(), android.view.Gravity.RIGHT | android.view.Gravity.CENTER, 0, 0);


							currentGGButtonsDisplayed = false;
						}
					}
				}catch(err)
				{
					clientMessage("Error: " + err);
				}
			}
		}));
	}else
	{
		if(gravityButtonsInitialized)
		{
			currentActivity.runOnUiThread(new java.lang.Runnable(
			{
			run: function()
				{
					popupShoot.dismiss();
					popupDropGG.dismiss();
				}
			}));
			gravityButtonsInitialized = false;
			isPickingEntity = false;
		}
	}

	//PortalGun gravity and GravityGun
	if(isPickingEntity)
	{
		var ggMobDirection = lookDir(Entity.getYaw(Player.getEntity()), Entity.getPitch(Player.getEntity()));
		if (getPlayerX() + (ggMobDirection.x * 3) - Entity.getX(ggMob) > 0.5 ||  getPlayerX() + (ggMobDirection.x * 3) - Entity.getX(ggMob) < -0.5 || getPlayerY () + (ggMobDirection.y * 3) - Entity.getY (ggMob) > 0.5 ||  getPlayerY () + (ggMobDirection.y * 3) - Entity.getY (ggMob) < -0.5 || getPlayerZ () + (ggMobDirection.z * 3) - Entity.getZ (ggMob) > 0.5 ||  getPlayerZ () + (ggMobDirection.z * 3) - Entity.getZ (ggMob) < -0.5)
		{
			Entity.setVelX(ggMob, (Player.getX() + (ggMobDirection.x * 3) - Entity.getX(ggMob)) / 5)
			Entity.setVelY(ggMob, (Player.getY() + (ggMobDirection.y * 3) - Entity.getY(ggMob)) / 5);
			Entity.setVelZ(ggMob, (Player.getZ() + (ggMobDirection.z * 3) - Entity.getZ(ggMob)) / 5);
		}
		else
		{
			Entity.setVelX(ggMob, 0);
			Entity.setVelY(ggMob, 0);
			Entity.setVelZ(ggMob, 0);
		}
	}

	//arrow is arrived?
	if(arrowOrangeLaunched)
	{
		var xArrowO = Entity.getX(orangeThrow);
		var yArrowO = Entity.getY(orangeThrow);
		var zArrowO = Entity.getZ(orangeThrow);
		if(xBeforeO == xArrowO && yBeforeO == yArrowO && zBeforeO == zArrowO)
		{
			//used for fixing entityRemovedHook()
			for (var i = 0; i < portalShotOrange.size(); i++)
			{
				if (Entity.getX(portalShotOrange.get(i)) == Entity.getX(orangeThrow))
				{
					var blockPlacer = portalShotOrange.get(i);
					var x = Entity.getX(blockPlacer);
					var y = Entity.getY(blockPlacer);
					var z = Entity.getZ(blockPlacer);
			
					arrowOrangeLaunched = false;
			
					setPortalOrange(Math.floor(x), Math.floor(y), Math.floor(z));

					portalShotOrange.remove(i);
					i--;
				}
			}
			
			Entity.remove(orangeThrow);
		}else
		{
			xBeforeO = xArrowO;
			yBeforeO = yArrowO;
			zBeforeO = zArrowO;
		}
	}
	if(arrowBlueLaunched)
	{
		var xArrowB = Entity.getX(blueThrow);
		var yArrowB = Entity.getY(blueThrow);
		var zArrowB = Entity.getZ(blueThrow);
		if(xBeforeB == xArrowB && yBeforeB == yArrowB && zBeforeB == zArrowB)
		{
			for (var i = 0; i < portalShotBlue.size(); i++)
			{
				if (Entity.getX(portalShotBlue.get(i)) == Entity.getX(blueThrow))
				{
					var blockPlacer = portalShotBlue.get(i);
					var x = Entity.getX(blockPlacer);
					var y = Entity.getY(blockPlacer);
					var z = Entity.getZ(blockPlacer);
	
					arrowBlueLaunched = false;
			
					setPortalBlue(Math.floor(x), Math.floor(y), Math.floor(z));

					portalShotBlue.remove(i);
					i--;
				}
			}
			
			Entity.remove(blueThrow);
		}else
		{
			xBeforeB = xArrowB;
			yBeforeB = yArrowB;
			zBeforeB = zArrowB;
		}
	}

	//player is in portal?
	if(generatedPortalBlue && generatedPortalOrange)
	{
		if(orangeInformation[6] == 4)
			entityIsInPortalOrange(Player.getEntity(), Player.getX(), Player.getY(), Player.getZ());
		else
			entityIsInPortalOrange(Player.getEntity(), Player.getX(), Player.getY() - 1, Player.getZ());

		if(blueInformation[6] == 4)
			entityIsInPortalBlue(Player.getEntity(), Player.getX(), Player.getY(), Player.getZ());
		else
			entityIsInPortalBlue(Player.getEntity(), Player.getX(), Player.getY() - 1, Player.getZ());
	}

	//jumper
	if(Level.getTile(Math.floor(Player.getX()), Math.floor(Player.getY()) - 2, Math.floor(Player.getZ())) == JUMPER_ID)
	{
		var random = Math.floor((Math.random() * 4) + 3);
		ModPE.playSoundFromFile("jumper/alyx_gun_fire" + random + ".wav");
		var jumperDir = lookDir(getYaw(), getPitch());
		Entity.setVelX(Player.getEntity(), jumperDir.x * jumperPower * 0.3);
		Entity.setVelY(Player.getEntity(), jumperPower * 0.3);
		Entity.setVelZ(Player.getEntity(), jumperDir.z * jumperPower * 0.3);
	}

	//blue gel
	if(Level.getTile(Math.floor(Player.getX()), Math.floor(Player.getY()) - 2, Math.floor(Player.getZ())) == REPULSION_GEL_ID)
	{
		if(velBeforeY < -0.5)
			Entity.setVelY(Player.getEntity(), -velBeforeY)
	}

	//orange gel
	if(Level.getTile(Math.floor(Player.getX()), Math.floor(Player.getY()) - 2, Math.floor(Player.getZ())) == PROPULSION_GEL_ID)
	{
		currentActivity.runOnUiThread(new java.lang.Runnable(
		{
			run: function()
			{
				new android.os.Handler().postDelayed(new java.lang.Runnable({run: function()
				{
					if(!leftGame)
					{
						Entity.setVelX(Player.getEntity(), Entity.getVelX(Player.getEntity()) * speedMultiplier);
						Entity.setVelZ(Player.getEntity(), Entity.getVelZ(Player.getEntity()) * speedMultiplier);
						if(limitedMaxSpeed)
						{
							if(speedMultiplier <= 1.65)
								speedMultiplier = speedMultiplier + 0.025;
						}else
						{
							speedMultiplier = speedMultiplier + 0.025;
						}
					}
				}}), 500);
			}
		}));		
	}else
	{
		if(speedMultiplier != 1.1)
			speedMultiplier = 1.1;
	}

	//jumper and portals for mobs
	if(portalsWithEveryEntity)
	{
		if(speeder)
		{
			for(var i in mobs)
			{
				var e = mobs[i];
				var eX = Entity.getX(e);
				var eY = Entity.getY(e);
				var eZ = Entity.getZ(e);

				//jumper
				if(Level.getTile(Math.floor(eX), Math.floor(eY) - 1, Math.floor(eZ)) == JUMPER_ID)
				{
					var random = Math.floor((Math.random() * 4) + 3);
					ModPE.playSoundFromFile("jumper/alyx_gun_fire" + random + ".wav");
					var jumperDir = lookDir(Entity.getYaw(e), Entity.getPitch(e));
					Entity.setVelX(e, jumperDir.x * jumperPower * 0.3);
					Entity.setVelY(e, jumperPower * 0.3);
					Entity.setVelZ(e, jumperDir.z * jumperPower * 0.3);
				}

				//portal
				if(generatedPortalOrange && generatedPortalBlue)
				{
					entityIsInPortalOrange(e, eX, eY + 0.1, eZ);
					entityIsInPortalBlue(e, eX, eY + 0.1, eZ);
				}
			}
			speeder = false;
		}else
			speeder = true;
	}

	//long fall boots
	if(Player.getArmorSlot(3) == ID_LONG_FALL_BOOTS)
	{
		if(Entity.getVelY(Player.getEntity()) <= -0.5 && !isFalling)
		{
			// Player is falling
			if(Level.getGameMode() == GameMode.SURVIVAL)
				Entity.addEffect(Player.getEntity(), MobEffect.jump, 999999, 254, false, false);

			isFalling = true;
		}

		if(isFalling)
		{
			if(Level.getTile(Math.floor(Player.getX()), Math.floor(Player.getY()) - 2, Math.floor(Player.getZ())) > 0)
			{
				if(Entity.getVelY(Player.getEntity()) == VEL_Y_OFFSET)
				{
					var random = Math.floor((Math.random() * 2) + 1);
					ModPE.playSoundFromFile("long_fall_boots/futureshoes" + random + ".wav");

					isFalling = false;

					if(Level.getGameMode() == GameMode.SURVIVAL)
					{
						// Entity.removeEffect(entity, id) doesn't remove particles of the effect https://github.com/zhuowei/MCPELauncher/issues/241
						//Entity.removeEffect(Player.getEntity(), MobEffect.jump);
						Entity.removeAllEffects(Player.getEntity());
					}

					// NOTE: no damage to boots with the jump effect
					if(Player.getArmorSlotDamage(3) >= 1400)
						ModPE.showTipMessage("Long fall boots are about to break. Damage: " + Player.getArmorSlotDamage(3) + ".");
					if(Player.getArmorSlot(3) != ID_LONG_FALL_BOOTS)
						ModPE.showTipMessage("Long fall boots are broken.");
				}
			}
		}
	}
	
	//radio
	if(isRadioPlaying)
	{
		radioCountdown++;
		if(radioCountdown == 10)
		{
			radioCountdown = 0;
			var distancePR = Math.sqrt( (Math.pow(radioX - Player.getX(), 2)) + (Math.pow(radioY - Player.getY(), 2)) + (Math.pow(radioZ - Player.getZ(), 2) ));
			if(distancePR > 20)
			{
				isRadioPlaying = false;
				radio.reset();
			}else
			{
				radioVolume = 1 - (Math.log(distancePR) / Math.log(maxLogarithmicVolume));
				radio.setVolume(radioVolume, radioVolume);
			}
		}
	}

	//turrets
	turretsLoopModTick:
	for(var i = 0; i < spawnedTurretsNumber; i++)
	{
		if(ggMob == turrets[i].entity && !isPickingEntity)
		{
			if(Level.getTile(Math.floor(Entity.getX(turrets[i].entity)), Math.floor(Entity.getY(turrets[i].entity) - 0.125), Math.floor(Entity.getZ(turrets[i].entity))) == 0)
				continue turretsLoopModTick;
			else
				ggMob = 0;
		}
		for(var j in falling)
		{
			if(falling[j] == turrets[i].entity)
			{
				if(Level.getTile(Math.floor(Entity.getX(turrets[i].entity)), Math.floor(Entity.getY(turrets[i].entity) - 0.125), Math.floor(Entity.getZ(turrets[i].entity))) == 0)
				{
					//ModPE.showTipMessage("falling");
					continue turretsLoopModTick;
				}
				else
					falling.splice(j, 1);
			}
		}
		if(!(ggMob == turrets[i].entity && isPickingEntity))
		{
			//Entity.setPosition(turrets[i].entity, turrets[i][1], Entity.getY(turrets[i].entity), turrets[i][3]);
			Entity.setVelX(turrets[i].entity, 0);
			Entity.setVelY(turrets[i].entity, 0);
			Entity.setVelZ(turrets[i].entity, 0);
			//Entity.setRot(turrets[i].entity, turrets[i][5], turrets[i][5]);

			if(turrets[i].aggressive)
			{
				if(checkProximity(Player.getEntity(), turrets[i].entity, 10, 3))
				{
					turrets[i].countdownToAttack++;
					if(turrets[i].countdownToAttack == 1)
					{
						Entity.setRenderType(turrets[i].entity, TurretShooting1RenderType.renderType);
						var random = Math.floor((Math.random() * 9) + 1);
						ModPE.playSoundFromFile("turrets/turret_active_" + random + ".wav");
						turrets[i].countdownToAttack = turrets[i].countdownToAttack + 5;
					}
					if(turrets[i].countdownToAttack == 10)
						Entity.setRenderType(turrets[i].entity, TurretShooting2RenderType.renderType);
					if(turrets[i].countdownToAttack % 15 == 0 && turrets[i].countdownToAttack >= 30)
						turrets[i].shoot(Player.getEntity());
				}else
				{
					if(turrets[i].countdownToAttack != 0)
					{
						if(turrets[i].countdownToAttack == 1)
						{
							Entity.setRenderType(turrets[i].entity, TurretLaserRenderType.renderType);
							turrets[i].countdownToAttack = 0;
							var random = Math.floor((Math.random() * 3) + 1);
							ModPE.playSoundFromFile("turrets/turret_search_" + random + ".wav");
						}else
						{
							Entity.setRenderType(turrets[i].entity, TurretShooting1RenderType.renderType);
							turrets[i].countdownToAttack = 1;
						}
					}
				}
			}else
			{
				if(turrets[i].countdownToAttack != 0)
					turrets[i].countdownToAttack = 0;
			}
		}
	}
	if(needSaving)
	{
		if(countdownSaving >= 4)
		{
			saveTurrets();
			countdownSaving = 0;
			needSaving = false;
		}
		countdownSaving++
	}

	//momentum
	velBeforeX = Entity.getVelX(Player.getEntity());
	velBeforeY = Entity.getVelY(Player.getEntity());
	velBeforeZ = Entity.getVelZ(Player.getEntity());
}


//########################################################################################################################################################
// Added functions (No GUI and No render)
//########################################################################################################################################################


//########## portal functions ##########
function setPortalOrange(x, y ,z)
{
	var pX = Player.getX();
	var pY = Player.getY();
	var pZ = Player.getZ();

	if(Level.getTile(x, y ,z) != 0)
	{
		//USE ITEM AND SNOWBALL
		if(Level.getTile(x, y + 1, z) != 0)
		{
			if(Math.abs(pX - x) > Math.abs(pZ - z))
			{
				if(x < pX)
				{
					if(Level.getTile(x + 1, y ,z) == 0 && Level.getTile(x + 1, y + 1 ,z) == 0)
					{

						Level.setTile(x + 1, y, z, ORANGE_X_MIN_D, 0);
						Level.setTile(x + 1, y + 1, z, ORANGE_X_MIN_U, 0);
						savePortalAndDeleteOrange(x+1, y, z, x+1, y+1, z);
						orangeInformation[6] = 5;
					}
				}else
				{
					if(Level.getTile(x - 1, y ,z) == 0 && Level.getTile(x - 1, y + 1 ,z) == 0)
					{

						Level.setTile(x - 1, y, z, ORANGE_X_MAX_D, 0);
						Level.setTile(x - 1, y + 1, z, ORANGE_X_MAX_U, 0);
						savePortalAndDeleteOrange(x-1, y, z, x-1, y+1, z);
						orangeInformation[6] = 6;
					}
				}
			}else
			{
				if(z < pZ)
				{
					if(Level.getTile(x, y ,z + 1) == 0 && Level.getTile(x, y + 1 ,z + 1) == 0)
					{

						Level.setTile(x, y, z + 1, ORANGE_Z_MIN_D, 0);
						Level.setTile(x, y + 1, z + 1, ORANGE_Z_MIN_U, 0);
						savePortalAndDeleteOrange(x, y, z+1, x, y+1, z+1);
						orangeInformation[6] = 1;
					}
				}else
				{
					if(Level.getTile(x, y ,z - 1) == 0 && Level.getTile(x, y + 1 ,z - 1) == 0)
					{

						Level.setTile(x, y, z - 1, ORANGE_Z_MAX_D, 0);
						Level.setTile(x, y + 1, z - 1, ORANGE_Z_MAX_U, 0);
						savePortalAndDeleteOrange(x, y, z-1, x, y+1, z-1);
						orangeInformation[6] = 2;
					}
				}
			}
		}else
		{
			if(Level.getTile(x, y + 1, z + 1) == 0)
			{

				Level.setTile(x, y + 1, z, ORANGE_Y_MIN_U);
				Level.setTile(x, y + 1, z + 1, ORANGE_Y_MIN_D);
				savePortalAndDeleteOrange(x, y+1, z, x, y+1, z+1);
				orangeInformation[6] = 3;
			}else
			if(Level.getTile(x, y + 1, z - 1) == 0)
			{

				Level.setTile(x, y + 1, z, ORANGE_Y_MIN_D);
				Level.setTile(x, y + 1, z - 1, ORANGE_Y_MIN_U);	
				savePortalAndDeleteOrange(x, y+1, z, x, y+1, z-1);
				orangeInformation[6] = 3;
			}
		}
	}else
	{
		//ARROW
		if(Level.getTile(x + 1, y, z) == 0 && Level.getTile(x - 1, y, z) == 0 && Level.getTile(x, y, z + 1) == 0 && Level.getTile(x, y, z - 1) == 0)
		{
			if(Level.getTile(x, y - 1, z) != 0)
			{
				Level.setTile(x, y, z, ORANGE_Y_MIN_U);
				Level.setTile(x, y, z + 1, ORANGE_Y_MIN_D);
				savePortalAndDeleteOrange(x, y, z, x, y, z+1);
				orangeInformation[6] = 3;
				return;
			}else
			if(Level.getTile(x, y + 1, z) != 0)
			{
				Level.setTile(x, y, z, ORANGE_Y_MAX_U);
				Level.setTile(x, y, z + 1, ORANGE_Y_MAX_D);
				savePortalAndDeleteOrange(x, y, z, x, y, z+1);
				orangeInformation[6] = 4;
				return;
			}
		}else
		{
			if(Level.getTile(x + 1, y, z) != 0 && Level.getTile(x - 1, y, z) == 0 && Level.getTile(x, y, z + 1) == 0 && Level.getTile(x, y, z - 1) == 0)
			{

				if(Level.getTile(x, y + 1, z) == 0)
				{
					Level.setTile(x, y, z, ORANGE_X_MAX_D, 0);
					Level.setTile(x, y + 1, z, ORANGE_X_MAX_U, 0);
					savePortalAndDeleteOrange(x, y, z, x, y+1, z);
					orangeInformation[6] = 6;
					return;
				}else
				{
					if(Level.getTile(x, y - 1, z) == 0)
					{
						Level.setTile(x, y, z, ORANGE_X_MAX_U, 0);
						Level.setTile(x, y - 1, z, ORANGE_X_MAX_D, 0);
						savePortalAndDeleteOrange(x, y, z, x, y-1, z);
						orangeInformation[6] = 6;
						return;
					}
				}
			}
			if(Level.getTile(x, y, z + 1) != 0 && Level.getTile(x, y, z - 1) == 0 && Level.getTile(x + 1, y, z) == 0 && Level.getTile(x - 1, y, z) == 0)
			{

				if(Level.getTile(x, y + 1, z) == 0)
				{
					Level.setTile(x, y, z, ORANGE_Z_MAX_D, 0);
					Level.setTile(x, y + 1, z, ORANGE_Z_MAX_U, 0);
					savePortalAndDeleteOrange(x, y, z, x, y+1, z);
					orangeInformation[6] = 2;
					return;
				}else
				{
					if(Level.getTile(x, y - 1, z) == 0)
					{
						Level.setTile(x, y, z, ORANGE_Z_MAX_U, 0);
						Level.setTile(x, y - 1, z, ORANGE_Z_MAX_D, 0);
						savePortalAndDeleteOrange(x, y, z, x, y-1, z);
						orangeInformation[6] = 2;
						return;
					}
				}
			}
			if(Level.getTile(x - 1, y, z) != 0 && Level.getTile(x + 1, y, z) == 0 && Level.getTile(x, y, z + 1) == 0 && Level.getTile(x, y, z - 1) == 0)
			{

				if(Level.getTile(x, y + 1, z) == 0)
				{
					Level.setTile(x, y, z, ORANGE_X_MIN_D, 0);
					Level.setTile(x, y + 1, z, ORANGE_X_MIN_U, 0);
					savePortalAndDeleteOrange(x, y, z, x, y+1, z);
					orangeInformation[6] = 5;
					return;
				}else
				{
					if(Level.getTile(x, y - 1, z) == 0)
					{
						Level.setTile(x, y, z, ORANGE_X_MIN_U, 0);
						Level.setTile(x, y - 1, z, ORANGE_X_MIN_D, 0);
						savePortalAndDeleteOrange(x, y, z, x, y-1, z);
						orangeInformation[6] = 5;
						return;
					}
				}
			}
			if(Level.getTile(x, y, z - 1) != 0 && Level.getTile(x, y, z + 1) == 0 && Level.getTile(x + 1, y, z) == 0 && Level.getTile(x - 1, y, z) == 0)
			{

				if(Level.getTile(x, y + 1, z) == 0)
				{
					Level.setTile(x, y, z, ORANGE_Z_MIN_D, 0);
					Level.setTile(x, y + 1, z, ORANGE_Z_MIN_U, 0);
					savePortalAndDeleteOrange(x, y, z, x, y+1, z);
					orangeInformation[6] = 1;
					return;
				}else
				{
					if(Level.getTile(x, y - 1, z) == 0)
					{
						Level.setTile(x, y, z, ORANGE_Z_MIN_U, 0);
						Level.setTile(x, y - 1, z, ORANGE_Z_MIN_D, 0);
						savePortalAndDeleteOrange(x, y, z, x, y-1, z);
						orangeInformation[6] = 1;
						return;
					}
				}
			}
			if(pX < x && pZ < z)
			{
				if(Math.abs(pX - x) > Math.abs(pZ - z))
				{

					if(Level.getTile(x, y + 1, z) == 0)
					{
						Level.setTile(x, y, z, ORANGE_X_MAX_D, 0);
						Level.setTile(x, y + 1, z, ORANGE_X_MAX_U, 0);
						savePortalAndDeleteOrange(x, y, z, x, y+1, z);
						orangeInformation[6] = 6;
					return;
					}else
					{
						if(Level.getTile(x, y - 1, z) == 0)
						{
							Level.setTile(x, y, z, ORANGE_X_MAX_U, 0);
							Level.setTile(x, y - 1, z, ORANGE_X_MAX_D, 0);
							savePortalAndDeleteOrange(x, y, z, x, y-1, z);
							orangeInformation[6] = 6;
							return;
						}
					}
				}else
				{

					if(Level.getTile(x, y + 1, z) == 0)
					{
						Level.setTile(x, y, z, ORANGE_Z_MAX_D, 0);
						Level.setTile(x, y + 1, z, ORANGE_Z_MAX_U, 0);
						savePortalAndDeleteOrange(x, y, z, x, y+1, z);
						orangeInformation[6] = 2;
						return;
					}else
					{
						if(Level.getTile(x, y - 1, z) == 0)
						{
							Level.setTile(x, y, z, ORANGE_Z_MAX_U, 0);
							Level.setTile(x, y - 1, z, ORANGE_Z_MAX_D, 0);
							savePortalAndDeleteOrange(x, y, z, x, y-1, z);
							orangeInformation[6] = 2;
							return;
						}
					}
				}
			}
			if(pX < x && pZ >= z)
			{
				if(Math.abs(pX - x) > Math.abs(pZ - z))
				{

					if(Level.getTile(x, y + 1, z) == 0)
					{
						Level.setTile(x, y, z, ORANGE_X_MAX_D, 0);
						Level.setTile(x, y + 1, z, ORANGE_X_MAX_U, 0);
						savePortalAndDeleteOrange(x, y, z, x, y+1, z);
						orangeInformation[6] = 6;
					return;
					}else
					{
						if(Level.getTile(x, y - 1, z) == 0)
						{
							Level.setTile(x, y, z, ORANGE_X_MAX_U, 0);
							Level.setTile(x, y - 1, z, ORANGE_X_MAX_D, 0);
							savePortalAndDeleteOrange(x, y, z, x, y-1, z);
							orangeInformation[6] = 6;
							return;
						}
					}
				}else
				{

					if(Level.getTile(x, y + 1, z) == 0)
					{
						Level.setTile(x, y, z, ORANGE_Z_MIN_D, 0);
						Level.setTile(x, y + 1, z, ORANGE_Z_MIN_U, 0);
						savePortalAndDeleteOrange(x, y, z, x, y+1, z);
						orangeInformation[6] = 1;
						return;
					}else
					{
						if(Level.getTile(x, y - 1, z) == 0)
						{
							Level.setTile(x, y, z, ORANGE_Z_MIN_U, 0);
							Level.setTile(x, y - 1, z, ORANGE_Z_MIN_D, 0);
							savePortalAndDeleteOrange(x, y, z, x, y-1, z);
							orangeInformation[6] = 1;
							return;
						}
					}
				}
			}
			if(pX >= x && pZ >= z)
			{
				if(Math.abs(pX - x) > Math.abs(pZ - z))
				{

					if(Level.getTile(x, y + 1, z) == 0)
					{
						Level.setTile(x, y, z, ORANGE_X_MIN_D, 0);
						Level.setTile(x, y + 1, z, ORANGE_X_MIN_U, 0);
						savePortalAndDeleteOrange(x, y, z, x, y+1, z);
						orangeInformation[6] = 5;
						return;
					}else
					{
						if(Level.getTile(x, y - 1, z) == 0)
						{
							Level.setTile(x, y, z, ORANGE_X_MIN_U, 0);
							Level.setTile(x, y - 1, z, ORANGE_X_MIN_D, 0);
							savePortalAndDeleteOrange(x, y, z, x, y-1, z);
							orangeInformation[6] = 5;
							return;
						}
					}
				}else
				{

					if(Level.getTile(x, y + 1, z) == 0)
					{
						Level.setTile(x, y, z, ORANGE_Z_MIN_D, 0);
						Level.setTile(x, y + 1, z, ORANGE_Z_MIN_U, 0);
						savePortalAndDeleteOrange(x, y, z, x, y+1, z);
						orangeInformation[6] = 1;
						return;
					}else
					{
						if(Level.getTile(x, y - 1, z) == 0)
						{
							Level.setTile(x, y, z, ORANGE_Z_MIN_U, 0);
							Level.setTile(x, y - 1, z, ORANGE_Z_MIN_D, 0);
							savePortalAndDeleteOrange(x, y, z, x, y-1, z);
							orangeInformation[6] = 1;
							return;
						}
					}
				}
			}
			if(pX >= x && pZ < z)
			{
				if(Math.abs(pX - x) > Math.abs(pZ - z))
				{

					if(Level.getTile(x, y + 1, z) == 0)
					{
						Level.setTile(x, y, z, ORANGE_X_MIN_D, 0);
						Level.setTile(x, y + 1, z, ORANGE_X_MIN_U, 0);
						savePortalAndDeleteOrange(x, y, z, x, y+1, z);
						orangeInformation[6] = 5;
						return;
					}else
					{
						if(Level.getTile(x, y - 1, z) == 0)
						{
							Level.setTile(x, y, z, ORANGE_X_MIN_U, 0);
							Level.setTile(x, y - 1, z, ORANGE_X_MIN_D, 0);
							savePortalAndDeleteOrange(x, y, z, x, y-1, z);
							orangeInformation[6] = 5;
							return;
						}
					}
				}else
				{

					if(Level.getTile(x, y + 1, z) == 0)
					{
						Level.setTile(x, y, z, ORANGE_Z_MAX_D, 0);
						Level.setTile(x, y + 1, z, ORANGE_Z_MAX_U, 0);
						savePortalAndDeleteOrange(x, y, z, x, y+1, z);
						orangeInformation[6] = 2;
						return;
					}else
					{
						if(Level.getTile(x, y - 1, z) == 0)
						{
							Level.setTile(x, y, z, ORANGE_Z_MAX_U, 0);
							Level.setTile(x, y - 1, z, ORANGE_Z_MAX_D, 0);
							savePortalAndDeleteOrange(x, y, z, x, y-1, z);
							orangeInformation[6] = 2;
							return;
						}
					}
				}
			}
		}
	}
}

function setPortalBlue(x, y ,z)
{
	var pX = Player.getX();
	var pY = Player.getY();
	var pZ = Player.getZ();

	if(Level.getTile(x, y ,z) != 0)
	{
		// USE ITEM AND SNOWBALL
		if(Level.getTile(x, y + 1, z) != 0)
		{
			if(Math.abs(pX - x) > Math.abs(pZ - z))
			{
				if(x < pX)
				{
					if(Level.getTile(x + 1, y ,z) == 0 && Level.getTile(x + 1, y + 1 ,z) == 0)
					{

						Level.setTile(x + 1, y, z, BLUE_X_MIN_D, 0);
						Level.setTile(x + 1, y + 1, z, BLUE_X_MIN_U, 0);
						savePortalAndDeleteBlue(x+1, y, z, x+1, y+1, z);
						blueInformation[6] = 5;
					}
				}else
				{
					if(Level.getTile(x - 1, y ,z) == 0 && Level.getTile(x - 1, y + 1 ,z) == 0)
					{

						Level.setTile(x - 1, y, z, BLUE_X_MAX_D, 0);
						Level.setTile(x - 1, y + 1, z, BLUE_X_MAX_U, 0);
						savePortalAndDeleteBlue(x-1, y, z, x-1, y+1, z);
						blueInformation[6] = 6;
					}
				}
			}else
			{
				if(z < pZ)
				{
					if(Level.getTile(x, y ,z + 1) == 0 && Level.getTile(x, y + 1 ,z + 1) == 0)
					{

						Level.setTile(x, y, z + 1, BLUE_Z_MIN_D, 0);
						Level.setTile(x, y + 1, z + 1, BLUE_Z_MIN_U, 0);
						savePortalAndDeleteBlue(x, y, z+1, x, y+1, z+1);
						blueInformation[6] = 1;
					}
				}else
				{
					if(Level.getTile(x, y ,z - 1) == 0 && Level.getTile(x, y + 1 ,z - 1) == 0)
					{

						Level.setTile(x, y, z - 1, BLUE_Z_MAX_D, 0);
						Level.setTile(x, y + 1, z - 1, BLUE_Z_MAX_U, 0);
						savePortalAndDeleteBlue(x, y, z-1, x, y+1, z-1);
						blueInformation[6] = 2;
					}
				}
			}
		}else
		{
			if(Level.getTile(x, y + 1,z + 1) == 0)
			{

				Level.setTile(x, y + 1, z, BLUE_Y_MIN_U, 0);
				Level.setTile(x, y + 1, z + 1, BLUE_Y_MIN_D, 0);
				savePortalAndDeleteBlue(x, y+1, z, x, y+1, z+1);
				blueInformation[6] = 3;
			}else
			if(Level.getTile(x, y + 1,z - 1) == 0)
			{

				Level.setTile(x, y + 1, z, BLUE_Y_MIN_D, 0);
				Level.setTile(x, y + 1, z - 1, BLUE_Y_MIN_U, 0);	
				savePortalAndDeleteBlue(x, y+1, z, x, y+1, z-1);
				blueInformation[6] = 3;
			}
		}
	}else
	{
		//ARROW
		if(Level.getTile(x + 1, y, z) == 0 && Level.getTile(x - 1, y, z) == 0 && Level.getTile(x, y, z + 1) == 0 && Level.getTile(x, y, z - 1) == 0)
		{
			if(Level.getTile(x, y - 1, z) != 0)
			{
				Level.setTile(x, y, z, BLUE_Y_MIN_U);
				Level.setTile(x, y, z + 1, BLUE_Y_MIN_D);
				savePortalAndDeleteBlue(x, y, z, x, y, z+1);
				blueInformation[6] = 3;
			return;
			}else
			if(Level.getTile(x, y + 1, z) != 0)
			{
				Level.setTile(x, y, z, BLUE_Y_MAX_U);
				Level.setTile(x, y, z + 1, BLUE_Y_MAX_D);
				savePortalAndDeleteBlue(x, y, z, x, y, z+1);
				blueInformation[6] = 4;
				return;
			}
		}else
		{
			if(Level.getTile(x + 1, y, z) != 0 && Level.getTile(x - 1, y, z) == 0 && Level.getTile(x, y, z + 1) == 0 && Level.getTile(x, y, z - 1) == 0)
			{

				if(Level.getTile(x, y + 1, z) == 0)
				{
					Level.setTile(x, y, z, BLUE_X_MAX_D, 0);
					Level.setTile(x, y + 1, z, BLUE_X_MAX_U, 0);
					savePortalAndDeleteBlue(x, y, z, x, y+1, z);
					blueInformation[6] = 6;
					return;
				}else
				{
					if(Level.getTile(x, y - 1, z) == 0)
					{
						Level.setTile(x, y, z, BLUE_X_MAX_U, 0);
						Level.setTile(x, y - 1, z, BLUE_X_MAX_D, 0);
						savePortalAndDeleteBlue(x, y, z, x, y-1, z);
						blueInformation[6] = 6;
						return;
					}
				}
			}
			if(Level.getTile(x, y, z + 1) != 0 && Level.getTile(x, y, z - 1) == 0 && Level.getTile(x + 1, y, z) == 0 && Level.getTile(x - 1, y, z) == 0)
			{

				if(Level.getTile(x, y + 1, z) == 0)
				{
					Level.setTile(x, y, z, BLUE_Z_MAX_D, 0);
					Level.setTile(x, y + 1, z, BLUE_Z_MAX_U, 0);
					savePortalAndDeleteBlue(x, y, z, x, y+1, z);
					blueInformation[6] = 2;
					return;
				}else
				{
					if(Level.getTile(x, y - 1, z) == 0)
					{
						Level.setTile(x, y, z, BLUE_Z_MAX_U, 0);
						Level.setTile(x, y - 1, z, BLUE_Z_MAX_D, 0);
						savePortalAndDeleteBlue(x, y, z, x, y-1, z);
						blueInformation[6] = 2;
						return;
					}
				}
			}
			if(Level.getTile(x - 1, y, z) != 0 && Level.getTile(x + 1, y, z) == 0 && Level.getTile(x, y, z + 1) == 0 && Level.getTile(x, y, z - 1) == 0)
			{

				if(Level.getTile(x, y + 1, z) == 0)
				{
					Level.setTile(x, y, z, BLUE_X_MIN_D, 0);
					Level.setTile(x, y + 1, z, BLUE_X_MIN_U, 0);
					savePortalAndDeleteBlue(x, y, z, x, y+1, z);
					blueInformation[6] = 5;
					return;
				}else
				{
					if(Level.getTile(x, y - 1, z) == 0)
					{
						Level.setTile(x, y, z, BLUE_X_MIN_U, 0);
						Level.setTile(x, y - 1, z, BLUE_X_MIN_D, 0);
						savePortalAndDeleteBlue(x, y, z, x, y-1, z);
						blueInformation[6] = 5;
						return;
					}
				}
			}
			if(Level.getTile(x, y, z - 1) != 0 && Level.getTile(x, y, z + 1) == 0 && Level.getTile(x + 1, y, z) == 0 && Level.getTile(x - 1, y, z) == 0)
			{

				if(Level.getTile(x, y + 1, z) == 0)
				{
					Level.setTile(x, y, z, BLUE_Z_MIN_D, 0);
					Level.setTile(x, y + 1, z, BLUE_Z_MIN_U, 0);
					savePortalAndDeleteBlue(x, y, z, x, y+1, z);
					blueInformation[6] = 1;
					return;
				}else
				{
					if(Level.getTile(x, y - 1, z) == 0)
					{
						Level.setTile(x, y, z, BLUE_Z_MIN_U, 0);
						Level.setTile(x, y - 1, z, BLUE_Z_MIN_D, 0);
						savePortalAndDeleteBlue(x, y, z, x, y-1, z);
						blueInformation[6] = 1;
						return;
					}
				}
			}
			if(pX < x && pZ < z)
			{
				if(Math.abs(pX - x) > Math.abs(pZ - z))
				{

					if(Level.getTile(x, y + 1, z) == 0)
					{
						Level.setTile(x, y, z, BLUE_X_MAX_D, 0);
						Level.setTile(x, y + 1, z, BLUE_X_MAX_U, 0);
						savePortalAndDeleteBlue(x, y, z, x, y+1, z);
						blueInformation[6] = 6;
					return;
					}else
					{
						if(Level.getTile(x, y - 1, z) == 0)
						{
							Level.setTile(x, y, z, BLUE_X_MAX_U, 0);
							Level.setTile(x, y - 1, z, BLUE_X_MAX_D, 0);
							savePortalAndDeleteBlue(x, y, z, x, y-1, z);
							blueInformation[6] = 6;
							return;
						}
					}
				}else
				{

					if(Level.getTile(x, y + 1, z) == 0)
					{
						Level.setTile(x, y, z, BLUE_Z_MAX_D, 0);
						Level.setTile(x, y + 1, z, BLUE_Z_MAX_U, 0);
						savePortalAndDeleteBlue(x, y, z, x, y+1, z);
						blueInformation[6] = 2;
						return;
					}else
					{
						if(Level.getTile(x, y - 1, z) == 0)
						{
							Level.setTile(x, y, z, BLUE_Z_MAX_U, 0);
							Level.setTile(x, y - 1, z, BLUE_Z_MAX_D, 0);
							savePortalAndDeleteBlue(x, y, z, x, y-1, z);
							blueInformation[6] = 2;
							return;
						}
					}
				}
			}
			if(pX < x && pZ >= z)
			{
				if(Math.abs(pX - x) > Math.abs(pZ - z))
				{

					if(Level.getTile(x, y + 1, z) == 0)
					{
						Level.setTile(x, y, z, BLUE_X_MAX_D, 0);
						Level.setTile(x, y + 1, z, BLUE_X_MAX_U, 0);
						savePortalAndDeleteBlue(x, y, z, x, y+1, z);
						blueInformation[6] = 6;
						return;
					}else
					{
						if(Level.getTile(x, y - 1, z) == 0)
						{
							Level.setTile(x, y, z, BLUE_X_MAX_U, 0);
							Level.setTile(x, y - 1, z, BLUE_X_MAX_D, 0);
							savePortalAndDeleteBlue(x, y, z, x, y-1, z);
							blueInformation[6] = 6;
							return;
						}
					}
				}else
				{

					if(Level.getTile(x, y + 1, z) == 0)
					{
						Level.setTile(x, y, z, BLUE_Z_MIN_D, 0);
						Level.setTile(x, y + 1, z, BLUE_Z_MIN_U, 0);
						savePortalAndDeleteBlue(x, y, z, x, y+1, z);
						blueInformation[6] = 1;
						return;
					}else
					{
						if(Level.getTile(x, y - 1, z) == 0)
						{
							Level.setTile(x, y, z, BLUE_Z_MIN_U, 0);
							Level.setTile(x, y - 1, z, BLUE_Z_MIN_D, 0);
							savePortalAndDeleteBlue(x, y, z, x, y-1, z);
							blueInformation[6] = 1;
							return;
						}
					}
				}
			}
			if(pX >= x && pZ >= z)
			{
				if(Math.abs(pX - x) > Math.abs(pZ - z))
				{

					if(Level.getTile(x, y + 1, z) == 0)
					{
						Level.setTile(x, y, z, BLUE_X_MIN_D, 0);
						Level.setTile(x, y + 1, z, BLUE_X_MIN_U, 0);
						savePortalAndDeleteBlue(x, y, z, x, y+1, z);
						blueInformation[6] = 5;
						return;
					}else
					{
						if(Level.getTile(x, y - 1, z) == 0)
						{
							Level.setTile(x, y, z, BLUE_X_MIN_U, 0);
							Level.setTile(x, y - 1, z, BLUE_X_MIN_D, 0);
							savePortalAndDeleteBlue(x, y, z, x, y-1, z);
							blueInformation[6] = 5;
							return;
						}
					}
				}else
				{

					if(Level.getTile(x, y + 1, z) == 0)
					{
						Level.setTile(x, y, z, BLUE_Z_MIN_D, 0);
						Level.setTile(x, y + 1, z, BLUE_Z_MIN_U, 0);
						savePortalAndDeleteBlue(x, y, z, x, y+1, z);
						blueInformation[6] = 1;
						return;
					}else
					{
						if(Level.getTile(x, y - 1, z) == 0)
						{
							Level.setTile(x, y, z, BLUE_Z_MIN_U, 0);
							Level.setTile(x, y - 1, z, BLUE_Z_MIN_D, 0);
							savePortalAndDeleteBlue(x, y, z, x, y-1, z);
							blueInformation[6] = 1;
							return;
						}
					}
				}
			}
			if(pX >= x && pZ < z)
			{
				if(Math.abs(pX - x) > Math.abs(pZ - z))
				{

					if(Level.getTile(x, y + 1, z) == 0)
					{
						Level.setTile(x, y, z, BLUE_X_MIN_D, 0);
						Level.setTile(x, y + 1, z, BLUE_X_MIN_U, 0);
						savePortalAndDeleteBlue(x, y, z, x, y+1, z);
						blueInformation[6] = 5;
						return;
					}else
					{
						if(Level.getTile(x, y - 1, z) == 0)
						{
							Level.setTile(x, y, z, BLUE_X_MIN_U, 0);
							Level.setTile(x, y - 1, z, BLUE_X_MIN_D, 0);
							savePortalAndDeleteBlue(x, y, z, x, y-1, z);
							blueInformation[6] = 5;
							return;
						}
					}
				}else
				{

					if(Level.getTile(x, y + 1, z) == 0)
					{
						Level.setTile(x, y, z, BLUE_Z_MAX_D, 0);
						Level.setTile(x, y + 1, z, BLUE_Z_MAX_U, 0);
						savePortalAndDeleteBlue(x, y, z, x, y+1, z);
						blueInformation[6] = 2;
						return;
					}else
					{
						if(Level.getTile(x, y - 1, z) == 0)
						{
							Level.setTile(x, y, z, BLUE_Z_MAX_U, 0);
							Level.setTile(x, y - 1, z, BLUE_Z_MAX_D, 0);
							savePortalAndDeleteBlue(x, y, z, x, y-1, z);
							blueInformation[6] = 2;
							return;
						}
					}
				}
			}
		}
	}
}

function savePortalAndDeleteOrange(x, y, z, x1, y1, z1)
{
	if(generatedPortalOrange)
	{
		Level.setTile(orangeInformation[0], orangeInformation[1], orangeInformation[2], 0);
		Level.setTile(orangeInformation[3], orangeInformation[4], orangeInformation[5], 0);
	}
	orangeInformation[0] = x;
	orangeInformation[1] = y;
	orangeInformation[2] = z;
	orangeInformation[3] = x1;
	orangeInformation[4] = y1;
	orangeInformation[5] = z1;
	generatedPortalOrange = true;
	savePortalsToDelete();
}

function savePortalAndDeleteBlue(x, y, z, x1, y1, z1)
{
	if(generatedPortalBlue)
	{
		Level.setTile(blueInformation[0], blueInformation[1], blueInformation[2], 0);
		Level.setTile(blueInformation[3], blueInformation[4], blueInformation[5], 0);
	}
	blueInformation[0] = x;
	blueInformation[1] = y;
	blueInformation[2] = z;
	blueInformation[3] = x1;
	blueInformation[4] = y1;
	blueInformation[5] = z1;
	generatedPortalBlue = true;
	savePortalsToDelete();
}

function entityIsInPortalOrange(entity, x, y, z)
{
	if((x > orangeInformation[0] && x < (orangeInformation[0] + 1) && y > orangeInformation[1] && y < (orangeInformation[1] + 1) && z > orangeInformation[2] && z < (orangeInformation[2] + 1)) || (x > orangeInformation[3] && x < (orangeInformation[3] + 1) && y > orangeInformation[4] && y < (orangeInformation[4] + 1) && z > orangeInformation[5] && z < (orangeInformation[5] + 1)))
	{
		var random = Math.floor((Math.random() * 2) + 1);
		ModPE.playSoundFromFile("portals/portal_exit" + random + ".wav");
		if(orangeInformation[6] == 2)
		{
			if(blueInformation[6] == 2)
			{
				Entity.setRot(entity, Entity.getYaw(entity) + 180, Entity.getPitch(entity));
				Entity.setPosition(entity, blueInformation[0] + 0.5, blueInformation[1] + 2, blueInformation[2] - 1);
				Entity.setVelX(entity, -Entity.getVelX(entity));
				Entity.setVelZ(entity, -Entity.getVelZ(entity));
			}
			if(blueInformation[6] == 1)
			{
				Entity.setRot(entity, Entity.getYaw(entity), Entity.getPitch(entity));
				Entity.setPosition(entity, blueInformation[0] + 0.5, blueInformation[1] + 2, blueInformation[2] + 1);
				Entity.setVelX(entity, Entity.getVelX(entity));
				Entity.setVelZ(entity, Entity.getVelZ(entity));
			}
			if(blueInformation[6] == 3)
			{
				Entity.setRot(entity, Entity.getYaw(entity) + 180, Entity.getPitch(entity));
				Entity.setPosition(entity, blueInformation[0] + 0.5, blueInformation[1] + 2, blueInformation[2] + 0.5);
				Entity.setVelX(entity, -Entity.getVelX(entity));
				Entity.setVelY(entity, 0.6);
				Entity.setVelZ(entity, -0.4);	
			}
			if(blueInformation[6] == 4)
			{
				Entity.setRot(entity, Entity.getYaw(entity) + 180, Entity.getPitch(entity));
				Entity.setPosition(entity, blueInformation[0] + 0.5, blueInformation[1] - 0.05, blueInformation[2] + 0.5);
				Entity.setVelX(entity, 0);
				Entity.setVelY(entity, -0.15);
				Entity.setVelZ(entity, 0);
			}
			if(blueInformation[6] == 5)
			{
				Entity.setRot(entity, Entity.getYaw(entity) + 270, Entity.getPitch(entity));
				Entity.setPosition(entity, blueInformation[0] + 1, blueInformation[1] + 2, blueInformation[2] + 0.5);
				Entity.setVelX(entity, Entity.getVelZ(entity));
				Entity.setVelZ(entity, -Entity.getVelX(entity));
			}
			if(blueInformation[6] == 6)
			{
				Entity.setRot(entity, Entity.getYaw(entity) + 90, Entity.getPitch(entity));
				Entity.setPosition(entity, blueInformation[0] - 1, blueInformation[1] + 2, blueInformation[2] + 0.5);
				Entity.setVelX(entity, -Entity.getVelZ(entity));
				Entity.setVelZ(entity, Entity.getVelX(entity));
			}
		}else

		if(orangeInformation[6] == 1)
		{
			if(blueInformation[6] == 2)
			{	
				Entity.setRot(entity, Entity.getYaw(entity), Entity.getPitch(entity));
				Entity.setPosition(entity, blueInformation[0] + 0.5, blueInformation[1] + 2, blueInformation[2] - 1);
				Entity.setVelX(entity, Entity.getVelX(entity));
				Entity.setVelZ(entity, Entity.getVelZ(entity));
			}
			if(blueInformation[6] == 1)
			{
				Entity.setRot(entity, Entity.getYaw(entity) + 180, Entity.getPitch(entity));
				Entity.setPosition(entity, blueInformation[0] + 0.5, blueInformation[1] + 2, blueInformation[2] + 1);
				Entity.setVelX(entity, -Entity.getVelX(entity));
				Entity.setVelZ(entity, -Entity.getVelZ(entity));
			}
			if(blueInformation[6] == 3)
			{
				Entity.setRot(entity, Entity.getYaw(entity), Entity.getPitch(entity));
				Entity.setPosition(entity, blueInformation[0] + 0.5, blueInformation[1] + 2, blueInformation[2] + 0.5);
				Entity.setVelX(entity, Entity.getVelX(entity));
				Entity.setVelY(entity, 0.6);
				Entity.setVelZ(entity, -0.4);	
			}
			if(blueInformation[6] == 4)
			{
				Entity.setRot(entity, Entity.getYaw(entity), Entity.getPitch(entity));
				Entity.setPosition(entity, blueInformation[0] + 0.5, blueInformation[1] - 0.05, blueInformation[2] + 0.5);
				Entity.setVelX(entity, 0);
				Entity.setVelY(entity, -0.15);
				Entity.setVelZ(entity, 0);	
			}
			if(blueInformation[6] == 5)
			{
				Entity.setRot(entity, Entity.getYaw(entity) + 90, Entity.getPitch(entity));
				Entity.setPosition(entity, blueInformation[0] + 1, blueInformation[1] + 2, blueInformation[2] + 0.5);
				Entity.setVelX(entity, -Entity.getVelZ(entity));
				Entity.setVelZ(entity, Entity.getVelX(entity));
			}
			if(blueInformation[6] == 6)
			{
				Entity.setRot(entity, Entity.getYaw(entity) + 270, Entity.getPitch(entity));
				Entity.setPosition(entity, blueInformation[0] - 1, blueInformation[1] + 2, blueInformation[2] + 0.5);
				Entity.setVelX(entity, Entity.getVelZ(entity));
				Entity.setVelZ(entity, -Entity.getVelX(entity));
			}
		}else

		if(orangeInformation[6] == 3)
		{
			if(blueInformation[6] == 2)
			{
				Entity.setRot(entity, 180, Entity.getPitch(entity));
				Entity.setPosition(entity, blueInformation[0] + 0.5, blueInformation[1] + 2, blueInformation[2] - 1);
				if(entity == Player.getEntity())
					Entity.setVelZ(entity, velBeforeY);
				else
					Entity.setVelZ(entity, -0.2);
				Entity.setVelY(entity, 0);
			}
			if(blueInformation[6] == 1)
			{
				Entity.setRot(entity, 360, Entity.getPitch(entity));
				Entity.setPosition(entity, blueInformation[0] + 0.5, blueInformation[1] + 2, blueInformation[2] + 1);
				if(entity == Player.getEntity())
					Entity.setVelZ(entity, -velBeforeY);
				else
					Entity.setVelZ(entity, 0.2);
				Entity.setVelY(entity, 0);
			}
			if(blueInformation[6] == 3)
			{
				Entity.setRot(entity, Entity.getYaw(entity), Entity.getPitch(entity));
				Entity.setPosition(entity, blueInformation[0] + 0.5, blueInformation[1] + 2, blueInformation[2] + 0.5);
				Entity.setVelX(entity, Entity.getVelX(entity));
				if(entity == Player.getEntity())
					Entity.setVelY(entity, -velBeforeY);
				else
					Entity.setVelY(entity, 0.5);
			}
			if(blueInformation[6] == 4)
			{
				Entity.setRot(entity, Entity.getYaw(entity), Entity.getPitch(entity));
				Entity.setPosition(entity, blueInformation[0] + 0.5, blueInformation[1] - 0.05, blueInformation[2] + 0.5);
				Entity.setVelX(entity, Entity.getVelX(entity));
				if(entity == Player.getEntity())
					Entity.setVelY(entity, Entity.getVelY(velBeforeY) - 0.15);
				else
					Entity.setVelY(entity, 0);
				Entity.setVelZ(entity, Entity.getVelZ(entity));	
			}
			if(blueInformation[6] == 5)
			{
				Entity.setRot(entity, 270, Entity.getPitch(entity));
				Entity.setPosition(entity, blueInformation[0] + 1, blueInformation[1] + 2, blueInformation[2] + 0.5);
				if(entity == Player.getEntity())
					Entity.setVelX(entity, -velBeforeY);
				else
					Entity.setVelX(entity, 0.2);
				Entity.setVelY(entity, 0);
			}
			if(blueInformation[6] == 6)
			{
				Entity.setRot(entity, 450, Entity.getPitch(entity));
				Entity.setPosition(entity, blueInformation[0] - 1, blueInformation[1] + 2, blueInformation[2] + 0.5);
				if(entity == Player.getEntity())
					Entity.setVelX(entity, velBeforeY);
				else
					Entity.setVelX(entity, -0.2);
				Entity.setVelY(entity, 0);
			}
		}else

		if(orangeInformation[6] == 4)
		{
			if(blueInformation[6] == 2)
			{
				Entity.setRot(entity, 180, Entity.getPitch(entity));
				Entity.setPosition(entity, blueInformation[0] + 0.5, blueInformation[1] + 2, blueInformation[2] - 1);
				Entity.setVelZ(entity, -0.2);
			}
			if(blueInformation[6] == 1)
			{
				Entity.setRot(entity, 360, Entity.getPitch(entity));
				Entity.setPosition(entity, blueInformation[0] + 0.5, blueInformation[1] + 2, blueInformation[2] + 1);
				Entity.setVelZ(entity, 0.2);
			}
			if(blueInformation[6] == 3)
			{
				Entity.setRot(entity, Entity.getYaw(entity), Entity.getPitch(entity));
				Entity.setPosition(entity, blueInformation[0] + 0.5, blueInformation[1] + 2, blueInformation[2] + 0.5);
				Entity.setVelX(entity, Entity.getVelX(entity));
				Entity.setVelY(entity, 0.5);
				Entity.setVelZ(entity, Entity.getVelZ(entity));	
			}
			if(blueInformation[6] == 4)
			{
				Entity.setRot(entity, Entity.getYaw(entity), Entity.getPitch(entity));
				Entity.setPosition(entity, blueInformation[0] + 0.5, blueInformation[1] - 0.05, blueInformation[2] + 0.5);
				Entity.setVelX(entity, Entity.getVelX(entity));
				Entity.setVelY(entity, Entity.getVelY(entity));
				Entity.setVelZ(entity, Entity.getVelZ(entity));	
			}
			if(blueInformation[6] == 5)
			{
				Entity.setRot(entity, 270, Entity.getPitch(entity));
				Entity.setPosition(entity, blueInformation[0] + 1, blueInformation[1] + 2, blueInformation[2] + 0.5);
				Entity.setVelX(entity, 0.2);
			}
			if(blueInformation[6] == 6)
			{
				Entity.setRot(entity, 450, Entity.getPitch(entity));
				Entity.setPosition(entity, blueInformation[0] - 1, blueInformation[1] + 2, blueInformation[2] + 0.5);
				Entity.setVelX(entity, -0.2);
			}
		}else

		if(orangeInformation[6] == 5)
		{
			if(blueInformation[6] == 2)
			{	
				Entity.setRot(entity, Entity.getYaw(entity) + 90, Entity.getPitch(entity));
				Entity.setPosition(entity, blueInformation[0] + 0.5, blueInformation[1] + 2, blueInformation[2] - 1);
				Entity.setVelX(entity, -Entity.getVelZ(entity));
				Entity.setVelZ(entity, Entity.getVelX(entity));
			}
			if(blueInformation[6] == 1)
			{
				Entity.setRot(entity, Entity.getYaw(entity) + 270, Entity.getPitch(entity));
				Entity.setPosition(entity, blueInformation[0] + 0.5, blueInformation[1] + 2, blueInformation[2] + 1);
				Entity.setVelX(entity, Entity.getVelZ(entity));
				Entity.setVelZ(entity, -Entity.getVelX(entity));
			}
			if(blueInformation[6] == 3)
			{
				Entity.setRot(entity, Entity.getYaw(entity) + 90, Entity.getPitch(entity));
				Entity.setPosition(entity, blueInformation[0] + 0.5, blueInformation[1] + 2, blueInformation[2] + 0.5);
				Entity.setVelX(entity, Entity.getVelZ(entity));
				Entity.setVelY(entity, 0.6);
				Entity.setVelZ(entity, -0.4);	
			}
			if(blueInformation[6] == 4)
			{
				Entity.setRot(entity, Entity.getYaw(entity) + 90, Entity.getPitch(entity));
				Entity.setPosition(entity, blueInformation[0] + 0.5, blueInformation[1] - 0.05, blueInformation[2] + 0.5);
				Entity.setVelX(entity, 0);
				Entity.setVelY(entity, -0.15);
				Entity.setVelZ(entity, 0);	
			}
			if(blueInformation[6] == 5)
			{
				Entity.setRot(entity, Entity.getYaw(entity) + 180, Entity.getPitch(entity));
				Entity.setPosition(entity, blueInformation[0] + 1, blueInformation[1] + 2, blueInformation[2] + 0.5);
				Entity.setVelX(entity, -Entity.getVelX(entity));
				Entity.setVelZ(entity, -Entity.getVelZ(entity));
			}
			if(blueInformation[6] == 6)
			{
				Entity.setRot(entity, Entity.getYaw(entity), Entity.getPitch(entity));
				Entity.setPosition(entity, blueInformation[0] - 1, blueInformation[1] + 2, blueInformation[2] + 0.5);
				Entity.setVelX(entity, Entity.getVelX(entity));
				Entity.setVelZ(entity, Entity.getVelZ(entity));
			}
		}else

		if(orangeInformation[6] == 6)
		{
			if(blueInformation[6] == 2)
			{	
				Entity.setRot(entity, Entity.getYaw(entity) + 270, Entity.getPitch(entity));
				Entity.setPosition(entity, blueInformation[0] + 0.5, blueInformation[1] + 2, blueInformation[2] - 1);
				Entity.setVelX(entity, Entity.getVelZ(entity));
				Entity.setVelZ(entity, -Entity.getVelX(entity));
			}
			if(blueInformation[6] == 1)
			{
				Entity.setRot(entity, Entity.getYaw(entity) + 90, Entity.getPitch(entity));
				Entity.setPosition(entity, blueInformation[0] + 0.5, blueInformation[1] + 2, blueInformation[2] + 1);
				Entity.setVelX(entity, -Entity.getVelZ(entity));
				Entity.setVelZ(entity, Entity.getVelX(entity));
			}
			if(blueInformation[6] == 3)
			{
				Entity.setRot(entity, Entity.getYaw(entity) + 270, Entity.getPitch(entity));
				Entity.setPosition(entity, blueInformation[0] + 0.5, blueInformation[1] + 2, blueInformation[2] + 0.5);
				Entity.setVelX(entity, Entity.getVelZ(entity));
				Entity.setVelY(entity, 0.6);
				Entity.setVelZ(entity, -0.4);	
			}
			if(blueInformation[6] == 4)
			{
				Entity.setRot(entity, Entity.getYaw(entity) + 270, Entity.getPitch(entity));
				Entity.setPosition(entity, blueInformation[0] + 0.5, blueInformation[1] - 0.05, blueInformation[2] + 0.5);
				Entity.setVelX(entity, 0);
				Entity.setVelY(entity, -0.15);
				Entity.setVelZ(entity, 0);
			}
			if(blueInformation[6] == 5)
			{
				Entity.setRot(entity, Entity.getYaw(entity), Entity.getPitch(entity));
				Entity.setPosition(entity, blueInformation[0] + 1, blueInformation[1] + 2, blueInformation[2] + 0.5);
				Entity.setVelX(entity, Entity.getVelX(entity));
				Entity.setVelZ(entity, Entity.getVelZ(entity));
			}
			if(blueInformation[6] == 6)
			{
				Entity.setRot(entity, Entity.getYaw(entity) + 180, Entity.getPitch(entity));
				Entity.setPosition(entity, blueInformation[0] - 1, blueInformation[1] + 2, blueInformation[2] + 0.5);
				Entity.setVelX(entity, -Entity.getVelX(entity));
				Entity.setVelZ(entity, -Entity.getVelZ(entity));
			}
		}
	}
}

function entityIsInPortalBlue(entity, x, y, z)
{
	if((x > blueInformation[0] && x < (blueInformation[0] + 1) && y > blueInformation[1] && y < (blueInformation[1] + 1) && z > blueInformation[2] && z < (blueInformation[2] + 1)) || (x > blueInformation[3] && x < (blueInformation[3] + 1) && y > blueInformation[4] && y < (blueInformation[4] + 1) && z > blueInformation[5] && z < (blueInformation[5] + 1)))
	{
		var random = Math.floor((Math.random() * 2) + 1);
		ModPE.playSoundFromFile("portals/portal_exit" + random + ".wav");
		if(blueInformation[6] == 2)
		{
			if(orangeInformation[6] == 2)
			{
				Entity.setRot(entity, Entity.getYaw(entity) + 180, Entity.getPitch(entity));
				Entity.setPosition(entity, orangeInformation[0] + 0.5, orangeInformation[1] + 2, orangeInformation[2] - 1);
				Entity.setVelX(entity, -Entity.getVelX(entity));
				Entity.setVelZ(entity, -Entity.getVelZ(entity));
			}
			if(orangeInformation[6] == 1)
			{
				Entity.setRot(entity, Entity.getYaw(entity), Entity.getPitch(entity));
				Entity.setPosition(entity, orangeInformation[0] + 0.5, orangeInformation[1] + 2, orangeInformation[2] + 1);
				Entity.setVelX(entity, Entity.getVelX(entity));
				Entity.setVelZ(entity, Entity.getVelZ(entity));
			}
			if(orangeInformation[6] == 3)
			{
				Entity.setRot(entity, Entity.getYaw(entity) + 180, Entity.getPitch(entity));
				Entity.setPosition(entity, orangeInformation[0] + 0.5, orangeInformation[1] + 2, orangeInformation[2] + 0.5);
				Entity.setVelX(entity, -Entity.getVelX(entity));
				Entity.setVelY(entity, 0.6);
				Entity.setVelZ(entity, -0.4);	
			}
			if(orangeInformation[6] == 4)
			{
				Entity.setRot(entity, Entity.getYaw(entity) + 180, Entity.getPitch(entity));
				Entity.setPosition(entity, orangeInformation[0] + 0.5, orangeInformation[1] - 0.05, orangeInformation[2] + 0.5);
				Entity.setVelX(entity, 0);
				Entity.setVelY(entity, -0.15);
				Entity.setVelZ(entity, 0);
			}
			if(orangeInformation[6] == 5)
			{
				Entity.setRot(entity, Entity.getYaw(entity) + 270, Entity.getPitch(entity));
				Entity.setPosition(entity, orangeInformation[0] + 1, orangeInformation[1] + 2, orangeInformation[2] + 0.5);
				Entity.setVelX(entity, Entity.getVelZ(entity));
				Entity.setVelZ(entity, -Entity.getVelX(entity));
			}
			if(orangeInformation[6] == 6)
			{
				Entity.setRot(entity, Entity.getYaw(entity) + 90, Entity.getPitch(entity));
				Entity.setPosition(entity, orangeInformation[0] - 1, orangeInformation[1] + 2, orangeInformation[2] + 0.5);
				Entity.setVelX(entity, -Entity.getVelZ(entity));
				Entity.setVelZ(entity, Entity.getVelX(entity));
			}
		}else

		if(blueInformation[6] == 1)
		{
			if(orangeInformation[6] == 2)
			{	
				Entity.setRot(entity, Entity.getYaw(entity), Entity.getPitch(entity));
				Entity.setPosition(entity, orangeInformation[0] + 0.5, orangeInformation[1] + 2, orangeInformation[2] - 1);
				Entity.setVelX(entity, Entity.getVelX(entity));
				Entity.setVelZ(entity, Entity.getVelZ(entity));
			}
			if(orangeInformation[6] == 1)
			{
				Entity.setRot(entity, Entity.getYaw(entity) + 180, Entity.getPitch(entity));
				Entity.setPosition(entity, orangeInformation[0] + 0.5, orangeInformation[1] + 2, orangeInformation[2] + 1);
				Entity.setVelX(entity, -Entity.getVelX(entity));
				Entity.setVelZ(entity, -Entity.getVelZ(entity));
			}
			if(orangeInformation[6] == 3)
			{
				Entity.setRot(entity, Entity.getYaw(entity), Entity.getPitch(entity));
				Entity.setPosition(entity, orangeInformation[0] + 0.5, orangeInformation[1] + 2, orangeInformation[2] + 0.5);
				Entity.setVelX(entity, Entity.getVelX(entity));
				Entity.setVelY(entity, 0.6);
				Entity.setVelZ(entity, -0.4);	
			}
			if(orangeInformation[6] == 4)
			{
				Entity.setRot(entity, Entity.getYaw(entity), Entity.getPitch(entity));
				Entity.setPosition(entity, orangeInformation[0] + 0.5, orangeInformation[1] - 0.05, orangeInformation[2] + 0.5);
				Entity.setVelX(entity, 0);
				Entity.setVelY(entity, -0.15);
				Entity.setVelZ(entity, 0);	
			}
			if(orangeInformation[6] == 5)
			{
				Entity.setRot(entity, Entity.getYaw(entity) + 90, Entity.getPitch(entity));
				Entity.setPosition(entity, orangeInformation[0] + 1, orangeInformation[1] + 2, orangeInformation[2] + 0.5);
				Entity.setVelX(entity, -Entity.getVelZ(entity));
				Entity.setVelZ(entity, Entity.getVelX(entity));
			}
			if(orangeInformation[6] == 6)
			{
				Entity.setRot(entity, Entity.getYaw(entity) + 270, Entity.getPitch(entity));
				Entity.setPosition(entity, orangeInformation[0] - 1, orangeInformation[1] + 2, orangeInformation[2] + 0.5);
				Entity.setVelX(entity, Entity.getVelZ(entity));
				Entity.setVelZ(entity, -Entity.getVelX(entity));
			}
		}else

		if(blueInformation[6] == 3)
		{
			if(orangeInformation[6] == 2)
			{
				Entity.setRot(entity, 180, Entity.getPitch(entity));
				Entity.setPosition(entity, orangeInformation[0] + 0.5, orangeInformation[1] + 2, orangeInformation[2] - 1);
				if(entity == Player.getEntity())
					Entity.setVelZ(entity, velBeforeY);
				else
					Entity.setVelZ(entity, -0.2);
				Entity.setVelY(entity, 0);
			}
			if(orangeInformation[6] == 1)
			{
				Entity.setRot(entity, 360, Entity.getPitch(entity));
				Entity.setPosition(entity, orangeInformation[0] + 0.5, orangeInformation[1] + 2, orangeInformation[2] + 1);
				if(entity == Player.getEntity())
					Entity.setVelZ(entity, -velBeforeY);
				else
					Entity.setVelZ(entity, 0.2);
				Entity.setVelY(entity, 0);
			}
			if(orangeInformation[6] == 3)
			{
				Entity.setRot(entity, Entity.getYaw(entity), Entity.getPitch(entity));
				Entity.setPosition(entity, orangeInformation[0] + 0.5, orangeInformation[1] + 2, orangeInformation[2] + 0.5);
				Entity.setVelX(entity, Entity.getVelX(entity));
				if(entity == Player.getEntity())
					Entity.setVelY(entity, -velBeforeY);
				else
					Entity.setVelY(entity, 0.5);
			}
			if(orangeInformation[6] == 4)
			{
				Entity.setRot(entity, Entity.getYaw(entity), Entity.getPitch(entity));
				Entity.setPosition(entity, orangeInformation[0] + 0.5, orangeInformation[1] - 0.05, orangeInformation[2] + 0.5);
				Entity.setVelX(entity, Entity.getVelX(entity));
				if(entity == Player.getEntity())
					Entity.setVelY(entity, Entity.getVelY(velBeforeY) - 0.15);
				else
					Entity.setVelY(entity, 0);
				Entity.setVelZ(entity, Entity.getVelZ(entity));	
			}
			if(orangeInformation[6] == 5)
			{
				Entity.setRot(entity, 270, Entity.getPitch(entity));
				Entity.setPosition(entity, orangeInformation[0] + 1, orangeInformation[1] + 2, orangeInformation[2] + 0.5);
				if(entity == Player.getEntity())
					Entity.setVelX(entity, -velBeforeY);
				else
					Entity.setVelX(entity, 0.2);
				Entity.setVelY(entity, 0);
			}
			if(orangeInformation[6] == 6)
			{
				Entity.setRot(entity, 450, Entity.getPitch(entity));
				Entity.setPosition(entity, orangeInformation[0] - 1, orangeInformation[1] + 2, orangeInformation[2] + 0.5);
				if(entity == Player.getEntity())
					Entity.setVelX(entity, velBeforeY);
				else
					Entity.setVelX(entity, -0.2);
				Entity.setVelY(entity, 0);
			}
		}else

		if(blueInformation[6] == 4)
		{
			if(orangeInformation[6] == 2)
			{
				Entity.setRot(entity, 180, Entity.getPitch(entity));
				Entity.setPosition(entity, orangeInformation[0] + 0.5, orangeInformation[1] + 2, orangeInformation[2] - 1);
				Entity.setVelZ(entity, -0.2);
			}
			if(orangeInformation[6] == 1)
			{
				Entity.setRot(entity, 360, Entity.getPitch(entity));
				Entity.setPosition(entity, orangeInformation[0] + 0.5, orangeInformation[1] + 2, orangeInformation[2] + 1);
				Entity.setVelZ(entity, 0.2);
			}
			if(orangeInformation[6] == 3)
			{
				Entity.setRot(entity, Entity.getYaw(entity), Entity.getPitch(entity));
				Entity.setPosition(entity, orangeInformation[0] + 0.5, orangeInformation[1] + 2, orangeInformation[2] + 0.5);
				Entity.setVelX(entity, Entity.getVelX(entity));
				Entity.setVelY(entity, 0.5);
				Entity.setVelZ(entity, Entity.getVelZ(entity));	
			}
			if(orangeInformation[6] == 4)
			{
				Entity.setRot(entity, Entity.getYaw(entity), Entity.getPitch(entity));
				Entity.setPosition(entity, orangeInformation[0] + 0.5, orangeInformation[1] - 0.05, orangeInformation[2] + 0.5);
				Entity.setVelX(entity, Entity.getVelX(entity));
				Entity.setVelY(entity, Entity.getVelY(entity));
				Entity.setVelZ(entity, Entity.getVelZ(entity));	
			}
			if(orangeInformation[6] == 5)
			{
				Entity.setRot(entity, 270, Entity.getPitch(entity));
				Entity.setPosition(entity, orangeInformation[0] + 1, orangeInformation[1] + 2, orangeInformation[2] + 0.5);
				Entity.setVelX(entity, 0.2);
			}
			if(orangeInformation[6] == 6)
			{
				Entity.setRot(entity, 450, Entity.getPitch(entity));
				Entity.setPosition(entity, orangeInformation[0] - 1, orangeInformation[1] + 2, orangeInformation[2] + 0.5);
				Entity.setVelX(entity, -0.2);
			}
		}else

		if(blueInformation[6] == 5)
		{
			if(orangeInformation[6] == 2)
			{	
				Entity.setRot(entity, Entity.getYaw(entity) + 90, Entity.getPitch(entity));
				Entity.setPosition(entity, orangeInformation[0] + 0.5, orangeInformation[1] + 2, orangeInformation[2] - 1);
				Entity.setVelX(entity, -Entity.getVelZ(entity));
				Entity.setVelZ(entity, Entity.getVelX(entity));
			}
			if(orangeInformation[6] == 1)
			{
				Entity.setRot(entity, Entity.getYaw(entity) + 270, Entity.getPitch(entity));
				Entity.setPosition(entity, orangeInformation[0] + 0.5, orangeInformation[1] + 2, orangeInformation[2] + 1);
				Entity.setVelX(entity, Entity.getVelZ(entity));
				Entity.setVelZ(entity, -Entity.getVelX(entity));
			}
			if(orangeInformation[6] == 3)
			{
				Entity.setRot(entity, Entity.getYaw(entity) + 90, Entity.getPitch(entity));
				Entity.setPosition(entity, orangeInformation[0] + 0.5, orangeInformation[1] + 2, orangeInformation[2] + 0.5);
				Entity.setVelX(entity, Entity.getVelZ(entity));
				Entity.setVelY(entity, 0.6);
				Entity.setVelZ(entity, -0.4);	
			}
			if(orangeInformation[6] == 4)
			{
				Entity.setRot(entity, Entity.getYaw(entity) + 90, Entity.getPitch(entity));
				Entity.setPosition(entity, orangeInformation[0] + 0.5, orangeInformation[1] - 0.05, orangeInformation[2] + 0.5);
				Entity.setVelX(entity, 0);
				Entity.setVelY(entity, -0.15);
				Entity.setVelZ(entity, 0);	
			}
			if(orangeInformation[6] == 5)
			{
				Entity.setRot(entity, Entity.getYaw(entity) + 180, Entity.getPitch(entity));
				Entity.setPosition(entity, orangeInformation[0] + 1, orangeInformation[1] + 2, orangeInformation[2] + 0.5);
				Entity.setVelX(entity, -Entity.getVelX(entity));
				Entity.setVelZ(entity, -Entity.getVelZ(entity));
			}
			if(orangeInformation[6] == 6)
			{
				Entity.setRot(entity, Entity.getYaw(entity), Entity.getPitch(entity));
				Entity.setPosition(entity, orangeInformation[0] - 1, orangeInformation[1] + 2, orangeInformation[2] + 0.5);
				Entity.setVelX(entity, Entity.getVelX(entity));
				Entity.setVelZ(entity, Entity.getVelZ(entity));
			}
		}else

		if(blueInformation[6] == 6)
		{
			if(orangeInformation[6] == 2)
			{	
				Entity.setRot(entity, Entity.getYaw(entity) + 270, Entity.getPitch(entity));
				Entity.setPosition(entity, orangeInformation[0] + 0.5, orangeInformation[1] + 2, orangeInformation[2] - 1);
				Entity.setVelX(entity, Entity.getVelZ(entity));
				Entity.setVelZ(entity, -Entity.getVelX(entity));
			}
			if(orangeInformation[6] == 1)
			{
				Entity.setRot(entity, Entity.getYaw(entity) + 90, Entity.getPitch(entity));
				Entity.setPosition(entity, orangeInformation[0] + 0.5, orangeInformation[1] + 2, orangeInformation[2] + 1);
				Entity.setVelX(entity, -Entity.getVelZ(entity));
				Entity.setVelZ(entity, Entity.getVelX(entity));
			}
			if(orangeInformation[6] == 3)
			{
				Entity.setRot(entity, Entity.getYaw(entity) + 270, Entity.getPitch(entity));
				Entity.setPosition(entity, orangeInformation[0] + 0.5, orangeInformation[1] + 2, orangeInformation[2] + 0.5);
				Entity.setVelX(entity, Entity.getVelZ(entity));
				Entity.setVelY(entity, 0.6);
				Entity.setVelZ(entity, -0.4);	
			}
			if(orangeInformation[6] == 4)
			{
				Entity.setRot(entity, Entity.getYaw(entity) + 270, Entity.getPitch(entity));
				Entity.setPosition(entity, orangeInformation[0] + 0.5, orangeInformation[1] - 0.05, orangeInformation[2] + 0.5);
				Entity.setVelX(entity, 0);
				Entity.setVelY(entity, -0.15);
				Entity.setVelZ(entity, 0);
			}
			if(orangeInformation[6] == 5)
			{
				Entity.setRot(entity, Entity.getYaw(entity), Entity.getPitch(entity));
				Entity.setPosition(entity, orangeInformation[0] + 1, orangeInformation[1] + 2, orangeInformation[2] + 0.5);
				Entity.setVelX(entity, Entity.getVelX(entity));
				Entity.setVelZ(entity, Entity.getVelZ(entity));
			}
			if(orangeInformation[6] == 6)
			{
				Entity.setRot(entity, Entity.getYaw(entity) + 180, Entity.getPitch(entity));
				Entity.setPosition(entity, orangeInformation[0] - 1, orangeInformation[1] + 2, orangeInformation[2] + 0.5);
				Entity.setVelX(entity, -Entity.getVelX(entity));
				Entity.setVelZ(entity, -Entity.getVelZ(entity));
			}
		}
	}
}
//########## portal functions - END ##########


//########## portal guns functions ##########
Item.getPortalGunBulletSpeed = function()
{
	if(Player.getCarriedItem() == ID_PORTAL_GUN_BLUE)
		return 3;
	if(Player.getCarriedItem() == ID_PORTAL_GUN_ORANGE)
		return 3;
	if(Player.getCarriedItem() == ID_PORTAL_GUN_GOLD)
		return 1.8;
	if(Player.getCarriedItem() == ID_PORTAL_GUN_IRON)
		return 1.2;
	if(Player.getCarriedItem() == ID_PORTAL_GUN_LAVA)
		return 1.2;
}

Item.damageCarried = function()
{
	var maxDamage;
	if(Player.getCarriedItem() == ID_PORTAL_GUN_BLUE)
		maxDamage = 1000;
	if(Player.getCarriedItem() == ID_PORTAL_GUN_GOLD)
		maxDamage = 500;
	if(Player.getCarriedItem() == ID_PORTAL_GUN_IRON)
		maxDamage = 250;
	if(Player.getCarriedItem() == ID_PORTAL_GUN_LAVA)
		maxDamage = BLUE_Z_MIN_U;
	if(Player.getCarriedItem() == ID_PORTAL_GUN_WOOD_AND_STONE)
		maxDamage = 100;
	if(Player.getCarriedItem() == ID_PORTAL_GUN_ORANGE)
		maxDamage = 1000;
	if(Player.getCarriedItem() == ID_GRAVITY_GUN)
		maxDamage = 400;
	if(Player.getCarriedItemData() < maxDamage)
		Entity.setCarriedItem(Player.getEntity(), Player.getCarriedItem(), Player.getCarriedItemCount(), Player.getCarriedItemData() + 1);
	else
	{
		Level.playSoundEnt(Player.getEntity(), "random.break", 100, 30);
		if(Player.getCarriedItemCount() == 1)
			Player.clearInventorySlot(Player.getSelectedSlotId());
		else
			Entity.setCarriedItem(Player.getEntity(), Player.getCarriedItem(), Player.getCarriedItemCount() - 1, 0);
	}
}

Item.changePortalGunColor = function()
{
	if(Player.getCarriedItem() == ID_PORTAL_GUN_BLUE || Player.getCarriedItem() == ID_PORTAL_GUN_ORANGE)
	{
		if(Player.getCarriedItem() == ID_PORTAL_GUN_BLUE)
			Entity.setCarriedItem(Player.getEntity(), ID_PORTAL_GUN_ORANGE, Player.getCarriedItemCount(), Player.getCarriedItemData());
		else
			Entity.setCarriedItem(Player.getEntity(), ID_PORTAL_GUN_BLUE,  Player.getCarriedItemCount(), Player.getCarriedItemData());
	}
}
//########## portal guns functions - END ##########


//########## sounds functions ##########
ModPE.playSoundFromFile = function(fileName)
{
	try
	{
		if(sound1.isPlaying() == false)
		{
			sound1.reset();
			sound1.setDataSource(new android.os.Environment.getExternalStorageDirectory() + "/games/com.mojang/portal-sounds/" + fileName);
			sound1.prepare();
			sound1.start();
			return;
		}
		if(sound2.isPlaying() == false)
		{
			sound2.reset();
			sound2.setDataSource(new android.os.Environment.getExternalStorageDirectory() + "/games/com.mojang/portal-sounds/" + fileName);
			sound2.prepare();
			sound2.start();
			return;
		}else
		{
			sound3.reset();
			sound3.setDataSource(new android.os.Environment.getExternalStorageDirectory() + "/games/com.mojang/portal-sounds/" + fileName);
			sound3.prepare();
			sound3.start();
		}
	}catch(err)
	{
		if(!displayedMessageNoSound)
		{
			ModPE.showTipMessage("Portal: Sounds not installed!");
			displayedMessageNoSound = true;
			ModPE.log("Portal 2 Mod: Error: " + err);
		}
	}
}

ModPE.playMusicFromFile = function(fileName)
{
	try
	{
		music.reset();
		music.setDataSource(new android.os.Environment.getExternalStorageDirectory() + "/games/com.mojang/portal-sounds/music/" + fileName);
		music.prepare();
		music.start();
		ModPE.showTipMessage("Portal: Playing music...");
	}
	catch(err)
	{
		ModPE.showTipMessage("Portal: Sounds not installed!");
	}
}

ModPE.stopMusic = function()
{
	if(music.isPlaying() == true)
	{
		music.reset();
		ModPE.showTipMessage("Portal: Stopping music...");
	}
}
//########## sounds functions - END ##########


//########## turrets functions ##########
function turret(entity)
{
	this.entity = entity;
	this.x = 0;
	this.y = 0;
	this.z = 0;
	this.aggressive = false;
	this.angle = 90;
	this.countdownToAttack = 0;

	this.shoot = function(entity)
	{
		var shotYaw = Math.atan2((Entity.getZ(this.entity) - Entity.getZ(entity)), (Entity.getX(this.entity) - Entity.getX(entity)));
		var turretShot = lookDir((((shotYaw * 180) / Math.PI) - 90), 0);
		var shotArrow = Level.spawnMob(Entity.getX(this.entity) + (-turretShot.x * 1.1), Entity.getY(this.entity) + 1, Entity.getZ(this.entity) + (-turretShot.z * 1.1), 81);
		Entity.setVelX(shotArrow, -turretShot.x * 2);
		Entity.setVelY(shotArrow, turretShot.y * 2);
		Entity.setVelZ(shotArrow, -turretShot.z * 2);
		Level.playSoundEnt(this.entity, "random.bow", 1000, 30);
	}

	this.isThereTurretAtDistance = function(distance1)
	{
		var distance2 = Math.floor(distance1);
		for(var i = 0; i < spawnedTurretsNumber; i++)
		{
			if((Math.floor(Entity.getY(this.entity))) == (Math.floor(Entity.getY(turrets[i].entity))))
			{
				if((Math.floor(Entity.getX(this.entity)) - distance2) == (Math.floor(Entity.getX(turrets[i].entity))))
					if((Math.floor(Entity.getZ(this.entity))) == (Math.floor(Entity.getZ(turrets[i].entity))))
						return true;

				if((Math.floor(Entity.getX(this.entity)) + distance2) == (Math.floor(Entity.getX(turrets[i].entity))))
					if((Math.floor(Entity.getZ(this.entity))) == (Math.floor(Entity.getZ(turrets[i].entity))))
						return true;

				if((Math.floor(Entity.getZ(this.entity)) - distance2) == (Math.floor(Entity.getZ(turrets[i].entity))))
					if((Math.floor(Entity.getX(this.entity))) == (Math.floor(Entity.getX(turrets[i].entity))))
						return true;

				if((Math.floor(Entity.getZ(this.entity)) + distance2) == (Math.floor(Entity.getZ(turrets[i].entity))))
					if((Math.floor(Entity.getX(this.entity))) == (Math.floor(Entity.getX(turrets[i].entity))))
						return true;
			}
		}
		return false;
		}
}

function checkProximity(entity1, entity2, distanceXZ, distanceY)
{
	if(!(Math.abs(Entity.getX(entity1) - Entity.getX(entity2)) <= distanceXZ))
		return false;
	if(!(Math.abs(Entity.getY(entity1) - Entity.getY(entity2)) <= distanceY))
		return false;
	if(!(Math.abs(Entity.getZ(entity1) - Entity.getZ(entity2)) <= distanceXZ))
		return false;
	return true;
}
//########## turrets functions - END ##########


//########## saving system for portals and turrets ##########
function loadPortalsToDelete()
{
	currentActivity.runOnUiThread(new java.lang.Runnable()
	{
		run: function()
		{
			try
			{
				var portalLoadFile = java.io.File(worldPath + modSaveFolder + "/portals.dat");
				if(portalLoadFile.exists())
				{
					var loadedText = "";
					var streamInput = new java.io.FileInputStream(portalLoadFile);
					var bufferedReader = new java.io.BufferedReader(new java.io.InputStreamReader(streamInput));
					var row = "";
					while((row = bufferedReader.readLine()) != null) 
					{
						loadedText += row;
					}
					var arrayToDelete = loadedText.split(" ");
					if(arrayToDelete[0] == "generatedPortalOrange=1")
					{
						Level.setTile(arrayToDelete[3], arrayToDelete[5], arrayToDelete[7], 1);
						Level.setTile(arrayToDelete[9], arrayToDelete[11], arrayToDelete[13], 1);
						Level.destroyBlock(arrayToDelete[3], arrayToDelete[5], arrayToDelete[7], false);
						Level.destroyBlock(arrayToDelete[9], arrayToDelete[11], arrayToDelete[13], false);
						Level.setTile(arrayToDelete[3], arrayToDelete[5], arrayToDelete[7], 0);
						Level.setTile(arrayToDelete[9], arrayToDelete[11], arrayToDelete[13], 0);
						generatedPortalOrange = false;
					}
					if(arrayToDelete[1] == "generatedPortalBlue=1")
					{
						Level.setTile(arrayToDelete[15], arrayToDelete[17], arrayToDelete[19], 1);
						Level.setTile(arrayToDelete[21], arrayToDelete[23], arrayToDelete[25], 1);
						Level.destroyBlock(arrayToDelete[15], arrayToDelete[17], arrayToDelete[19], false);
						Level.destroyBlock(arrayToDelete[21], arrayToDelete[23], arrayToDelete[25], false);
						Level.setTile(arrayToDelete[15], arrayToDelete[17], arrayToDelete[19], 0);
						Level.setTile(arrayToDelete[21], arrayToDelete[23], arrayToDelete[25], 0);
						generatedPortalBlue = false;
					}
					bufferedReader.close();
					savePortalsToDelete();
				}
			}catch(err)
			{
				clientMessage("Error: " + err);
			}
		}
	});
}

function savePortalsToDelete()
{
	currentActivity.runOnUiThread(new java.lang.Runnable()
	{
		run: function()
		{
			try
			{
				var portalSaveFile = new java.io.File(worldPath + modSaveFolder + "/portals.dat");
				if(portalSaveFile.exists())
					portalSaveFile.delete();
				portalSaveFile.createNewFile();
				var streamOutput = new java.io.FileOutputStream(portalSaveFile);
				var streamWriter = new java.io.OutputStreamWriter(streamOutput);
				if(generatedPortalOrange)
				{
					var toSaveGeneratedOrange = "1";
					var oX = orangeInformation[0];
					var oY = orangeInformation[1];
					var oZ = orangeInformation[2];
					var oX1 = orangeInformation[3];
					var oY1 = orangeInformation[4];
					var oZ1 = orangeInformation[5];
				}else
				{
					var toSaveGeneratedOrange = "0";
					var oX = "null";
					var oY = "null";
					var oZ = "null";
					var oX1 = "null";
					var oY1 = "null";
					var oZ1 = "null";
				}
				if(generatedPortalBlue)
				{
					var toSaveGeneratedBlue = "1";
					var bX = blueInformation[0];
					var bY = blueInformation[1];
					var bZ = blueInformation[2];
					var bX1 = blueInformation[3];
					var bY1 = blueInformation[4];
					var bZ1 = blueInformation[5];
				}else
				{
					var toSaveGeneratedBlue = "0";
					var bX = "null";
					var bY = "null";
					var bZ = "null";
					var bX1 = "null";
					var bY1 = "null";
					var bZ1 = "null";
				}
				streamWriter.append("generatedPortalOrange=" + toSaveGeneratedOrange + " " +
					"generatedPortalBlue=" + toSaveGeneratedBlue  +

					" oX " + oX +
					" oY " + oY +
					" oZ " + oZ +
					" oX1 " + oX1 +
					" oY1 " + oY1 +
					" oZ1 " + oZ1 +

					
					" bX " + bX +
					" bY " + bY +
					" bZ " + bZ +
					" bX1 " + bX1 +
					" bY1 " + bY1 +
					" bZ1 " + bZ1  );
				streamWriter.close();
				streamOutput.close();
			}catch(err)
			{
				clientMessage("Error: " + err);
			}
		}
	});
}

function loadTurrets()
{
	currentActivity.runOnUiThread(new java.lang.Runnable()
	{
		run: function()
		{
			try
			{
				var turretLoadFile = java.io.File(worldPath + modSaveFolder + "/turrets.dat");
				if(turretLoadFile.exists())
				{
					var loadedTurretText = "";
					var streamInputTurret = new java.io.FileInputStream(turretLoadFile);
					var bufferedReaderTurret = new java.io.BufferedReader(new java.io.InputStreamReader(streamInputTurret));
					var rowTurret = "";
					while((rowTurret = bufferedReaderTurret.readLine()) != null) 
					{
						loadedTurretText += rowTurret;
					}
					var arrayTurret = loadedTurretText.split(" ");

					spawnedTurretsNumber = arrayTurret[0];
					for(var i = 0; i < spawnedTurretsNumber; i++)
					{
						var maxI = (i + 1) * 6;
						turrets[i] = new turret(0);
						turrets[i].x = Math.floor(parseFloat(arrayTurret[maxI - 5])) + 0.5;
						turrets[i].y = Math.floor(parseFloat(arrayTurret[maxI - 4])) + 0.8;
						turrets[i].z = Math.floor(parseFloat(arrayTurret[maxI - 3])) + 0.5;
						turrets[i].aggressive = stringToBoolean(arrayTurret[maxI - 2]);
						turrets[i].angle = parseFloat(arrayTurret[maxI - 1]);
						turrets[i].countdownToAttack = parseFloat(arrayTurret[maxI]);

						turrets[i].entity = Level.spawnMob(turrets[i].x, turrets[i].y, turrets[i].z, 11, "mob/turret.png");
						Entity.setHealth(turrets[i].entity, 1);
						Entity.setRenderType(turrets[i].entity, TurretRenderType.renderType);
					}

					bufferedReaderTurret.close();
					saveTurrets();
				}
			}catch(err)
			{
				clientMessage("Error: " + err);
			}
		}
	});
}

function saveTurrets()
{
	currentActivity.runOnUiThread(new java.lang.Runnable()
	{
		run: function()
		{
			try
			{
				var turretSaveFile = new java.io.File(worldPath + modSaveFolder + "/turrets.dat");
				if(turretSaveFile.exists())
					turretSaveFile.delete();
				turretSaveFile.createNewFile();
				var streamOutputTurret = new java.io.FileOutputStream(turretSaveFile);
				var streamWriterTurret = new java.io.OutputStreamWriter(streamOutputTurret);
				
				streamWriterTurret.append(spawnedTurretsNumber + " ");
				for(var i = 0; i < spawnedTurretsNumber; i++)
				{
					streamWriterTurret.append(turrets[i].x + " " + turrets[i].y + " " + turrets[i].z + " " + turrets[i].aggressive + " " + turrets[i].angle + " " + turrets[i].countdownToAttack + " ");
				}
				streamWriterTurret.close();
				streamOutputTurret.close();
			}catch(err)
			{
				clientMessage("Error: " + err);
			}
		}
	});
}
//########## saving system for portals and turrets - END ##########


//########## internet functions ##########
function getLatestVersionMod()
{
	try
	{
		// download content
		var url = new java.net.URL("https://raw.githubusercontent.com/Desno365/MCPE-scripts/master/portalMOD-version");
		var connection = url.openConnection();
 
		// get content
		inputStream = connection.getInputStream();
 
		// read result
		var loadedVersion = "";
		var bufferedVersionReader = new java.io.BufferedReader(new java.io.InputStreamReader(inputStream));
		var rowVersion = "";
		while((rowVersion = bufferedVersionReader.readLine()) != null)
		{
			loadedVersion += rowVersion;
		}
		latestVersion = loadedVersion.split(" ")[0];
 
		// close what needs to be closed
		bufferedVersionReader.close();
		inputStream.close();
	} catch(err)
	{
		clientMessage("Portal Mod: Can't check for updates, please check your Internet connection.");
		ModPE.log("Portal Mod: getLatestVersionMod(): caught an error: " + err);
	}
}
//########## internet functions - END ##########


//########## other functions ##########
function vector3d(x, y, z)
{
	this.x = x;
	this.y = y;
	this.z = z;
}

function lookDir(yaw, pitch)
{
	var direction = new vector3d(0, 0, 0);
	direction.y = -Math.sin(java.lang.Math.toRadians(pitch));
	direction.x = -Math.sin(java.lang.Math.toRadians(yaw)) * Math.cos(java.lang.Math.toRadians(pitch));
	direction.z = Math.cos(java.lang.Math.toRadians (yaw)) * Math.cos(java.lang.Math.toRadians(pitch));
	return direction;
}

function stringToBoolean(string)
{
	switch(string.toLowerCase())
	{
		case "true": case "yes": case "1": return true;
		case "false": case "no": case "0": case null: return false;
		default: return Boolean(string);
	}
}

function writeFileFromByteArray(byteArray, path)
{
	var fontFile = new java.io.File(path);
	if(fontFile.exists())
		fontFile.delete();
	fontFile.createNewFile();
	var fontStream = new java.io.FileOutputStream(fontFile);
	fontStream.write(byteArray);
	fontStream.close();
}

function dismissAllUIs()
{
	try{
		popupInfo.dismiss();
	}catch(e){}
	try{
		popupInformation.dismiss();
	}catch(e){}
	try{
		popupSettings.dismiss();
	}catch(e){}
	try{
		popupMapMaker.dismiss();
	}catch(e){}
	try{
		popupSuggestions.dismiss();
	}catch(e){}
	try{
		popupJumperPower.dismiss();
	}catch(e){}
	try{
		popupButtonsSize.dismiss();
	}catch(e){}
	try{
		popupUpdates.dismiss();
	}catch(e){}
	try{
		popupSupport.dismiss();
	}catch(e){}
	try{
		popupCredits.dismiss();
	}catch(e){}
	try{
		popupJukebox.dismiss();
	}catch(e){}
	try{
		popupBlack.dismiss();
	}catch(e){}
	try{
		popupBackgroundChooser.dismiss();
	}catch(e){}
	try{
		popupTurretsOptions.dismiss();
	}catch(e){}
}
//########## other functions - END ##########


//########################################################################################################################################################
// GUI functions
//########################################################################################################################################################

//########## used to make UI functions ##########
function dividerText()
{
	var dividerText = new android.widget.TextView(currentActivity);
	dividerText.setText(" ");
	return dividerText;
}

function minecraftPopup(view)
{
	var popup = new android.widget.PopupWindow();
	popup.setContentView(view);
	popup.setOutsideTouchable(true);
	popup.setFocusable(false);
	popup.setAnimationStyle(-1);
	popup.setWidth(android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
	popup.setHeight(Math.round(displayHeight - (displayHeight / 6)));
	return popup;
}

function minecraftLayout(title)
{
	var defaultLayout = new android.widget.LinearLayout(currentActivity);
	defaultLayout.setOrientation(android.widget.LinearLayout.VERTICAL);
	defaultLayout.setBackgroundDrawable(background);

	var titleDefault = new android.widget.TextView(currentActivity);
	titleDefault.setGravity(android.view.Gravity.CENTER);
	titleDefault.setText(new android.text.Html.fromHtml("<br>" + title));
	titleDefault.setTypeface(font);
	titleDefault.setPaintFlags(titleDefault.getPaintFlags() | android.graphics.Paint.SUBPIXEL_TEXT_FLAG);
	titleDefault.setTextSize(16);
	titleDefault.setTextColor(android.graphics.Color.parseColor("#FFFFFFFF"));
	titleDefault.setShadowLayer(0.001, Math.round(titleDefault.getLineHeight() / 8), Math.round(titleDefault.getLineHeight() / 8), android.graphics.Color.parseColor("#FF333333"));
	defaultLayout.addView(titleDefault);

	defaultLayout.addView(portalDivider());

	return defaultLayout;
}

function minecraftButton(text)
{
	var defaultButton = new android.widget.Button(currentActivity); 
	defaultButton.setText(text);
	defaultButton.setOnTouchListener(new android.view.View.OnTouchListener()
	{
		onTouch: function(v, event)
		{
			var action = event.getActionMasked();
			if(action == android.view.MotionEvent.ACTION_CANCEL || action == android.view.MotionEvent.ACTION_UP)
			{
				var bNP = new android.graphics.drawable.BitmapDrawable(g[10]);
				bNP.setFilterBitmap(false);
				bNP.setAntiAlias(false);
				defaultButton.setBackgroundDrawable(bNP);
				defaultButton.setTextColor(android.graphics.Color.parseColor("#FFDDDDDD"));
				defaultButton.setPadding(0, 0, 0, 0);
			}else
			{
				var bNP = new android.graphics.drawable.BitmapDrawable(g[11]);
				bNP.setFilterBitmap(false);
				bNP.setAntiAlias(false);
				defaultButton.setBackgroundDrawable(bNP);
				defaultButton.setTextColor(android.graphics.Color.parseColor("#FFFBFF97"));
				defaultButton.setPadding(0, Math.round(defaultButton.getLineHeight() / 8), 0, 0);
			}
			return false;
		}
	});
	
	var bNP = new android.graphics.drawable.BitmapDrawable(g[10]);
	bNP.setFilterBitmap(false);
	bNP.setAntiAlias(false);
	defaultButton.setBackgroundDrawable(bNP);
	defaultButton.setTypeface(font);
	defaultButton.setPaintFlags(defaultButton.getPaintFlags() | android.graphics.Paint.SUBPIXEL_TEXT_FLAG);
	defaultButton.setTextSize(15);
	defaultButton.setTextColor(android.graphics.Color.parseColor("#FFDDDDDD"));
	defaultButton.setShadowLayer(0.001, Math.round(defaultButton.getLineHeight() / 8), Math.round(defaultButton.getLineHeight() / 8), android.graphics.Color.parseColor("#FF333333"));
	defaultButton.setPadding(0, 0, 0, 0);
	defaultButton.setLineSpacing(0, 1.15);
	return defaultButton;
}

function portalDivider()
{
	var dividerImage = new android.widget.ImageView(currentActivity); 			 
 	dividerImage.setImageBitmap(g[3]);
 	return dividerImage;
}

function blackBackground()
{
	currentActivity.runOnUiThread(new java.lang.Runnable()
	{
		run: function()
		{
			try
			{
				var colorDrawable = new android.graphics.drawable.ColorDrawable(android.graphics.Color.parseColor("#000000"));
				colorDrawable.setAlpha(165);

				var layoutBlack = new android.widget.LinearLayout(currentActivity);
				layoutBlack.setOrientation(android.widget.LinearLayout.VERTICAL);
				layoutBlack.setBackgroundDrawable(colorDrawable);
				layoutBlack.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						dismissAllUIs();
					}
				});

				popupBlack = new android.widget.PopupWindow();
				popupBlack.setContentView(layoutBlack);
				popupBlack.setOutsideTouchable(true);
				popupBlack.setFocusable(true);
				popupBlack.setAnimationStyle(-1);
				popupBlack.setWidth(displayWidth);
				popupBlack.setHeight(displayHeight);
				popupBlack.showAtLocation(currentActivity.getWindow().getDecorView(), android.view.Gravity.CENTER | android.view.Gravity.CENTER, 0, 0);
			}catch(err)
			{
				clientMessage("Error: " + err);
				clientMessage("Maybe GUI is not supported for your device. Report this error in the official minecraftforum.net thread, please.");
			}
		}
	});
}

function createCorrectButtonsImages()
{
	currentActivity.runOnUiThread(new java.lang.Runnable()
	{
		run: function()
		{
			try
			{
				var layoutCreate = minecraftLayout("Creating buttons images...");

				var scrollCreate = new android.widget.ScrollView(currentActivity);
				scrollCreate.addView(layoutCreate);

				var testButton = minecraftButton("Test");
				testButton.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						dismissAllUIs();
						informationGUI();
					}
				});
				testButton.getViewTreeObserver().addOnGlobalLayoutListener(new android.view.ViewTreeObserver.OnGlobalLayoutListener()
				{
					onGlobalLayout: function()
					{
						var testButtonHeight = testButton.getHeight();
						var testButtonWidth = testButton.getWidth();
						if(testButtonWidth > 0 && testButtonHeight > 0)
						{
							detectedTextSize = Math.round(testButton.getLineHeight() * deviceDensity);
							var matrixTestCreate = new android.graphics.Matrix();
							matrixTestCreate.postScale(testButtonWidth / minecraftButtonsWidth, testButtonHeight / minecraftButtonsHeight);
							g[10] = new android.graphics.Bitmap.createBitmap(g[10], 0, 0, minecraftButtonsWidth, minecraftButtonsHeight, matrixTestCreate, false);
							g[11] = new android.graphics.Bitmap.createBitmap(g[11], 0, 0, minecraftButtonsWidth, minecraftButtonsHeight, matrixTestCreate, false);
							popupCreate.dismiss();
							
						}
						//print(testButton.getHeight() + " " + testButton.getWidth());
					}
				});
				layoutCreate.addView(testButton);

				popupCreate = minecraftPopup(scrollCreate);
				popupCreate.showAtLocation(currentActivity.getWindow().getDecorView(), android.view.Gravity.CENTER | android.view.Gravity.CENTER, 0, 0);

			}catch(err)
			{
				print("Error: " + err);
			}
		}
	});
}
//########## used to make UI functions - END ##########

function informationForPortalGUI()
{
	currentActivity.runOnUiThread(new java.lang.Runnable()
	{
		run: function()
		{
			try
			{
				blackBackground();
				var layoutInfo = minecraftLayout("P<font color=#1E90FF>O</font>RTAL 2 M<font color=#FFA500>O</font>D");

				var scrollInfo = new android.widget.ScrollView(currentActivity);
				scrollInfo.addView(layoutInfo);

				var infoText = new android.widget.TextView(currentActivity);
				infoText.setText(new android.text.Html.fromHtml("Welcome to the P<font color=#1E90FF>O</font>RTAL 2 M<font color=#FFA500>O</font>D by Desno365!<br>"));
				layoutInfo.addView(infoText);

				var informationButton = minecraftButton("Information");
				informationButton.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						dismissAllUIs();
						informationGUI();
					}
				});
				layoutInfo.addView(informationButton);

				layoutInfo.addView(portalDivider());

				var settingsButton = minecraftButton("Settings");
				settingsButton.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						dismissAllUIs();
						settingsGUI();
					}
				});
				layoutInfo.addView(settingsButton);
				
				/*layoutInfo.addView(portalDivider());
				
				var customMapsButton = minecraftButton("Custom maps for the mod");
				customMapsButton.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						dismissAllUIs();
						customMapsGUI();	
					}
				});
				layoutInfo.addView(customMapsButton);*/

				layoutInfo.addView(portalDivider());

				var updatesButton = minecraftButton("Check for updates");
				updatesButton.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						if(latestVersion == CURRENT_VERSION || latestVersion == undefined || latestVersion == " ")
							android.widget.Toast.makeText(currentActivity,"You have the latest version.",0).show();
						else
						{
							dismissAllUIs();
							updateAvailableUI();
						}
					}
				});
				layoutInfo.addView(updatesButton);
				
				layoutInfo.addView(portalDivider());
				
				var officialThreadButton = minecraftButton("Visit the official thread");
				officialThreadButton.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						dismissAllUIs();
						visitThread();
					}
				});
				layoutInfo.addView(officialThreadButton);

				layoutInfo.addView(portalDivider());

				var donateButton = minecraftButton("Support the developer");
				donateButton.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						dismissAllUIs();
						supportGUI();	
					}
				});
				layoutInfo.addView(donateButton);
				
				layoutInfo.addView(portalDivider());

				var creditsButton = minecraftButton("Credits");
				creditsButton.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						dismissAllUIs();
						creditsGUI();
					}
				});
				layoutInfo.addView(creditsButton);

				layoutInfo.addView(portalDivider());

				var exitInfoButton = minecraftButton("Close");
				exitInfoButton.setOnClickListener(new android.view.View.OnClickListener()
				{ 
					onClick: function()
					{ 
						dismissAllUIs();
					}
				});
				layoutInfo.addView(exitInfoButton);
				detectedDefaultTextSize = Math.round(exitInfoButton.getLineHeight() * deviceDensity);
				
				popupInfo = minecraftPopup(scrollInfo);
				popupInfo.showAtLocation(currentActivity.getWindow().getDecorView(), android.view.Gravity.CENTER | android.view.Gravity.CENTER, 0, 0);

			}catch(err)
			{
				clientMessage("Error: " + err);
				clientMessage("Maybe GUI is not supported for your device. Report this error in the official minecraftforum.net thread, please.");
			}
		}
	});
}

function informationGUI()
{
	currentActivity.runOnUiThread(new java.lang.Runnable()
	{
		run: function()
		{
			try
			{
				blackBackground();
				var layoutInformation = minecraftLayout("Information");

				var scrollInformation = new android.widget.ScrollView(currentActivity);
				scrollInformation.addView(layoutInformation);

				var information1Text = new android.widget.TextView(currentActivity);
				information1Text.setText(new android.text.Html.fromHtml("<b>Portal guns:</b>" +
					"<br>-<i>PortalGun</i>: bullet speed: 40 block/second, max damage: 1000" +
					"<br>-<i>PortalGun Gold</i>: bullet speed: 30 block/second, max damage: 500" +
					"<br>-<i>PortalGun Iron</i>: bullet speed: 20 block/second, max damage: 250" +
					"<br>-<i>PortalGun Lava</i>: bullet speed: 20 block/second, max damage: 200" +
					"<br>-<i>PortalGun Wood & Stone</i>: Tap on a block to place a portal. max damage: 100"));
				layoutInformation.addView(information1Text);

				layoutInformation.addView(portalDivider());

				var information2Text = new android.widget.TextView(currentActivity);
				information2Text.setText(new android.text.Html.fromHtml("<b>Other Items:</b>" +
					"<br>-<i>GravityGun</i>: Hit a mob with this item to pick it, then you can bring it everywhere or shoot it." +
					"<br>-<i>Turret</i>: Tap on a block with this item to spawn a turret." +
					"<br>-<i>Turret options</i>: Hit a turret with this item to display the options GUI." +
					"<br>-<i>Long fall boots</i>: When you fall from a great height these boots prevent damage to you." +
					"<br>-<i>Jumper</i>: When someone go above this block he will make a powerful jump." + 
					"<br>-<i>Portal Jukebox</i>: Tap this block to open the GUI that consent you to listen to the beautiful songs of the Portal game." +
					'<br>-<i>Portal Radio</i>: When you tap this block the "Radio loop" song will start, it will stop when you go far away (20 blocks) from the tapped radio.' +
					"<br>-<i>Repulsion Gel Block</i>: When you fall on this block, it will repulse you in the air with a bit less speed than before." +
					"<br>-<i>Propulsion Gel Block</i>: When you walk on these blocks your acceleration will increase." +
					"<br>If you want a better explanation on how gels work watch <a href=\"http://youtu.be/32DaEaODKyI\">this YouTube video</a>"));
				information2Text.setMovementMethod(android.text.method.LinkMovementMethod.getInstance());
				layoutInformation.addView(information2Text);
				
				layoutInformation.addView(portalDivider());
				
				var information3Text = new android.widget.TextView(currentActivity);
				information3Text.setText(new android.text.Html.fromHtml("<b>Tips and tricks:</b>" +
					'<br>-<i>Turrets</i>: Place 4 turrets in line, near themselves and they will start to sing "Cara Mia Addio".' +
					'<br>-<i>Easter egg</i>: There is an easter egg hidden in the "Portal Information" GUI, try to find it! ;-).' +
					"<br>Can't find it? Try to long press all the buttons in the GUI."));
				layoutInformation.addView(information3Text);

				var backInformationButton = minecraftButton("Back");
				backInformationButton.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						dismissAllUIs();
						informationForPortalGUI();
					}
				});
				layoutInformation.addView(backInformationButton);
				
				var exitInformationButton = minecraftButton("Close");
				exitInformationButton.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						dismissAllUIs();
					}
				});
				layoutInformation.addView(exitInformationButton);
				
				popupInformation = minecraftPopup(scrollInformation);
				popupInformation.showAtLocation(currentActivity.getWindow().getDecorView(), android.view.Gravity.CENTER | android.view.Gravity.CENTER, 0, 0);

			}catch(err)
			{
				clientMessage("Error: " + err);
				clientMessage("Maybe GUI is not supported for your device. Report this error in the official minecraftforum.net thread, please.");
			}
		}
	});
}

function settingsGUI()
{
	currentActivity.runOnUiThread(new java.lang.Runnable()
	{
		run: function()
		{
			try
			{
				blackBackground();
				var layoutSettings = minecraftLayout("Settings");

				var scrollSettings = new android.widget.ScrollView(currentActivity);
				scrollSettings.addView(layoutSettings);
				
				var mapSettingsButton = minecraftButton("Options for custom-map-makers");
				mapSettingsButton.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						dismissAllUIs();
						mapMakerSettingsGUI();
					}
				});
				layoutSettings.addView(mapSettingsButton);

				layoutSettings.addView(portalDivider());

				var settingsUsefulOptionsText = new android.widget.TextView(currentActivity);
				settingsUsefulOptionsText.setText("Useful options:");
				layoutSettings.addView(settingsUsefulOptionsText);

				var setEntitySupportButton = minecraftButton("Enable mobs support for portals and jumpers");
				if(portalsWithEveryEntity)
				{
					setEntitySupportButton.setText("Disable mobs support for portals and jumpers"); 
					setEntitySupportButton.setOnClickListener(new android.view.View.OnClickListener()
					{
						onClick: function()
						{
							android.widget.Toast.makeText(currentActivity,"Disabled mobs support.",0).show();
							portalsWithEveryEntity = false;
							dismissAllUIs();
						}
					});
					layoutSettings.addView(setEntitySupportButton);
				}
				if(!portalsWithEveryEntity)
				{
					setEntitySupportButton.setText("Enable mobs support for portals and jumpers"); 
					setEntitySupportButton.setOnClickListener(new android.view.View.OnClickListener()
					{
						onClick: function()
						{
							dismissAllUIs();
							warningEveryEntity();
						}
					});
					layoutSettings.addView(setEntitySupportButton);
				}
				
				var setButtonsSizeButton = minecraftButton("Set buttons size for PortalGuns and GravityGun");
				setButtonsSizeButton.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						dismissAllUIs();
						buttonsSizePicker();
					}
				});
				layoutSettings.addView(setButtonsSizeButton);
				
				layoutSettings.addView(portalDivider());

				var settingsFunnyOptionsText = new android.widget.TextView(currentActivity);
				settingsFunnyOptionsText.setText("UI options & funny options:");
				layoutSettings.addView(settingsFunnyOptionsText);

				var backgroundSettingsButton = minecraftButton("Choose the background image for the UIs");
				backgroundSettingsButton.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						dismissAllUIs();
						backgroundSettingsGUI();
					}
				});
				layoutSettings.addView(backgroundSettingsButton);

				var setJumperPowerButton = minecraftButton("Set Jumper power");
				setJumperPowerButton.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						dismissAllUIs();
						jumperPowerPicker();
					}
				});
				setJumperPowerButton.setLongClickable(true);
				setJumperPowerButton.setOnLongClickListener(new android.view.View.OnLongClickListener()
				{
					onLongClick: function()
					{
						android.widget.Toast.makeText(currentActivity,"Easter egg: max jumper power set to 100! :D",0).show();
						maxPower = 100;
						jumperPower = 100;
						dismissAllUIs();
						jumperPowerPicker();
						return true;
					}
				});
				layoutSettings.addView(setJumperPowerButton);

				var setUnlimitedSpeedButton = minecraftButton("Remove speed limit for the Propulsion Gel");
				if(limitedMaxSpeed)
				{
					setUnlimitedSpeedButton.setText("Remove speed limit for the Propulsion Gel"); 
					setUnlimitedSpeedButton.setOnClickListener(new android.view.View.OnClickListener()
					{
						onClick: function()
						{
							android.widget.Toast.makeText(currentActivity,"Speed limit removed.",0).show();
							limitedMaxSpeed = false;
							dismissAllUIs();
						}
					});
					layoutSettings.addView(setUnlimitedSpeedButton);
				}
				if(!limitedMaxSpeed)
				{
					setUnlimitedSpeedButton.setText("Enable speed limit for the Propulsion Gel"); 
					setUnlimitedSpeedButton.setOnClickListener(new android.view.View.OnClickListener()
					{
						onClick: function()
						{
							android.widget.Toast.makeText(currentActivity,"Enabled speed limit.",0).show();
							limitedMaxSpeed = true;
							dismissAllUIs();
						}
					});
					layoutSettings.addView(setUnlimitedSpeedButton);
				}

				layoutSettings.addView(portalDivider());

				var backSettingsButton = minecraftButton("Back");
				backSettingsButton.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						dismissAllUIs();
						informationForPortalGUI();
					}
				});
				layoutSettings.addView(backSettingsButton);

				var exitSettingsButton = minecraftButton("Close");
				exitSettingsButton.setOnClickListener(new android.view.View.OnClickListener()
				{ 
					onClick: function()
					{ 
						dismissAllUIs();
					}
				}); 
				layoutSettings.addView(exitSettingsButton); 
				

				popupSettings = minecraftPopup(scrollSettings);
				popupSettings.showAtLocation(currentActivity.getWindow().getDecorView(), android.view.Gravity.CENTER | android.view.Gravity.CENTER, 0, 0);

			}catch(err)
			{
				clientMessage("Error: " + err);
				clientMessage("Maybe GUI is not supported for your device. Report this error in the official minecraftforum.net thread, please.");
			}
		}
	});
}

function mapMakerSettingsGUI()
{
	currentActivity.runOnUiThread(new java.lang.Runnable()
	{
		run: function()
		{
			try
			{
				blackBackground();
				var layoutMapMaker = minecraftLayout("Map-makers settings");

				var scrollMapMaker = new android.widget.ScrollView(currentActivity);
				scrollMapMaker.addView(layoutMapMaker);
				
				var mapMakerText = new android.widget.TextView(currentActivity);
				mapMakerText.setText("Do you want to make a custom map for the Portal 2 Mod? You are in the right section.");
				layoutMapMaker.addView(mapMakerText);
				
				var suggestionMapMakerButton = minecraftButton("Suggestions for map-makers");
				suggestionMapMakerButton.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						dismissAllUIs();
						suggestionsMapMakerGUI();
					}
				});
				layoutMapMaker.addView(suggestionMapMakerButton);
				
				layoutMapMaker.addView(portalDivider());
				
				var equipmentButton = minecraftButton("Get Aperture Lab equipment");
				equipmentButton.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						Player.addItemInventory(PORTAL_JUKEBOX_ID, 4, 0);
						Player.addItemInventory(JUMPER_ID, 64, 0);
						Player.addItemInventory(ID_TURRET_OPTIONS, 1, 0);
						Player.addItemInventory(ID_TURRET, 1, 0);
						Player.addItemInventory(PORTAL_RADIO_A, 64, 0);
						Player.addItemInventory(PORTAL_RADIO_B, 64, 0);
						Player.addItemInventory(PORTAL_RADIO_C, 64, 0);
						Player.addItemInventory(PORTAL_RADIO_D, 64, 0);
						Player.addItemInventory(REPULSION_GEL_ID, 64, 0);
						Player.addItemInventory(PROPULSION_GEL_ID, 64, 0);
						android.widget.Toast.makeText(currentActivity,"Equipment added to the inventory.",0).show();
						dismissAllUIs();
					}
				});
				layoutMapMaker.addView(equipmentButton);

				layoutMapMaker.addView(portalDivider());
				
				var backMapMakerButton = minecraftButton("Back");
				backMapMakerButton.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						dismissAllUIs();
						settingsGUI();
					}
				});
				layoutMapMaker.addView(backMapMakerButton);

				var exitMapMakerButton = minecraftButton("Close");
				exitMapMakerButton.setOnClickListener(new android.view.View.OnClickListener()
				{ 
					onClick: function()
					{ 
						dismissAllUIs();
					}
				}); 
				layoutMapMaker.addView(exitMapMakerButton); 
				
				popupMapMaker = minecraftPopup(scrollMapMaker);
				popupMapMaker.showAtLocation(currentActivity.getWindow().getDecorView(), android.view.Gravity.CENTER | android.view.Gravity.CENTER, 0, 0);

			}catch(err)
			{
				clientMessage("Error: " + err);
				clientMessage("Maybe GUI is not supported for your device. Report this error in the official minecraftforum.net thread, please.");
			}
		}
	});
}

function suggestionsMapMakerGUI()
{
	currentActivity.runOnUiThread(new java.lang.Runnable()
	{
		run: function()
		{
			try
			{
				blackBackground();
				var layoutSuggestions = minecraftLayout("Suggestions");

				var scrollSuggestions = new android.widget.ScrollView(currentActivity);
				scrollSuggestions.addView(layoutSuggestions);
			
				var suggestions1Text = new android.widget.TextView(currentActivity);
				suggestions1Text.setText(new android.text.Html.fromHtml("<br>-You shouldn't give to the player the 'Portal Information' item, because with this item the player can obtain the Aperture Lab equipment and use it for complete the chambers in an easier way.<br><br>" +
					'-If one or more of your levels/chambers require mobs support you can place a sign and say to the player that he have to type in chat "/enable" or "/mobs-support" to play this level/chamber, then he can disable the mobs support setting by typing in chat "/disable" or "/no-mobs".<br><br>' +
					"-You should place the 'Portal Jukebox' at the start or at the end of your map.<br><br>" + 
					"-When you finish the map you can upload it and make a thread at the minecraftforum.net site.<br><br>" +
					"<b>P.S.</b>: of course these are only suggestions, you can do whatever you want with your custom map ;-)"));
				layoutSuggestions.addView(suggestions1Text);

				var backSuggestionsButton = minecraftButton("Back");
				backSuggestionsButton.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						dismissAllUIs();
						mapMakerSettingsGUI();
					}
				});
				layoutSuggestions.addView(backSuggestionsButton);
				
				var exitSuggestionsButton = minecraftButton("Close");
				exitSuggestionsButton.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						dismissAllUIs();
					}
				});
				layoutSuggestions.addView(exitSuggestionsButton);
				
				popupSuggestions = minecraftPopup(scrollSuggestions);
				popupSuggestions.showAtLocation(currentActivity.getWindow().getDecorView(), android.view.Gravity.CENTER | android.view.Gravity.CENTER, 0, 0);

			}catch(err)
			{
				clientMessage("Error: " + err);
				clientMessage("Maybe GUI is not supported for your device. Report this error in the official minecraftforum.net thread, please.");
			}
		}
	});
}

function warningEveryEntity()
{
	currentActivity.runOnUiThread(new java.lang.Runnable()
	{
		run: function()
		{
			try
			{
				var layoutWarningEntity = new android.widget.LinearLayout(currentActivity);
				layoutWarningEntity.setOrientation(android.widget.LinearLayout.VERTICAL);
				
				var popupWarningEntity = new android.app.AlertDialog.Builder(currentActivity, android.app.AlertDialog.THEME_HOLO_LIGHT);
				popupWarningEntity.setView(layoutWarningEntity);
				popupWarningEntity.setTitle("Activate mobs support");

				var infoTextWarningEntity = new android.widget.TextView(currentActivity);
				infoTextWarningEntity.setText("WARNING: This can slow down your device!");
				infoTextWarningEntity.setTextColor(android.graphics.Color.RED);
				layoutWarningEntity.addView(infoTextWarningEntity);

				var infoTextWarningEntity1 = new android.widget.TextView(currentActivity);
				infoTextWarningEntity1.setText("By activating this option, the CPU will be used more (every 1/10 of a second many lines of code will be executed)." +
					"\nI suggest you to activate this option only if you have a quad-core or a octa-core CPU." +
					"\nHowever when you exit the game this option is reset, so if you have problems after activating it just close BlockLauncher and re-open it.");
				infoTextWarningEntity1.setTextColor(android.graphics.Color.BLACK);
				layoutWarningEntity.addView(infoTextWarningEntity1);
			
				popupWarningEntity.setPositiveButton("Continue", new android.content.DialogInterface.OnClickListener(){
					onClick: function(viewarg)
					{
						portalsWithEveryEntity = true;
						android.widget.Toast.makeText(currentActivity,"Activated mobs support!",0).show();
					}});

				popupWarningEntity.setNegativeButton("Cancel", new android.content.DialogInterface.OnClickListener(){
					onClick: function(viewarg)
					{
						android.widget.Toast.makeText(currentActivity,"Mobs support was not enabled.",0).show();
					}});
			

				popupWarningEntity.show();

			}catch (err)
			{
				clientMessage("Error: " + err);
				clientMessage("Maybe GUI is not supported for your device.");
			}
		}
	});
}

function buttonsSizePicker()
{
	currentActivity.runOnUiThread(new java.lang.Runnable()
	{
		run: function()
		{
			try
			{
				blackBackground();
				var layoutButtonsSize = minecraftLayout("Buttons size");

				var scrollButtonsSize = new android.widget.ScrollView(currentActivity);
				scrollButtonsSize.addView(layoutButtonsSize);
			
				var sizeText = new android.widget.TextView(currentActivity);
				sizeText.setText("Select the preferred size (default is 0)");
				layoutButtonsSize.addView(sizeText);
				
				var selectedSize;
				if(buttonsSize >= 0)
					selectedSize = (buttonsSize * 10) + 10;
				if(buttonsSize < 0)
					selectedSize = 10 - (buttonsSize * -20);
				var sizeChooser = new android.widget.SeekBar(currentActivity);
				sizeChooser.setMax(20);
				sizeChooser.setProgress(selectedSize);
				sizeChooser.setOnSeekBarChangeListener(new android.widget.SeekBar.OnSeekBarChangeListener()
				{
					onProgressChanged: function()
					{
						selectedSize = sizeChooser.getProgress();
						sizeText1.setText("Size: " + (selectedSize - 10) + "/" + (sizeChooser.getMax() - 10));
					}
				});
				layoutButtonsSize.addView(sizeChooser);
				
				var sizeText1 = new android.widget.TextView(currentActivity);
				sizeText1.setText("Size: " + (selectedSize - 10) + "/" + (sizeChooser.getMax() - 10));
				layoutButtonsSize.addView(sizeText1);

				var setSizeButton = minecraftButton("Set size");
				setSizeButton.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						android.widget.Toast.makeText(currentActivity, "Size set to " + (sizeChooser.getProgress() - 10) + ".", 0).show();
						if(sizeChooser.getProgress() >= 10)	
							buttonsSize = (sizeChooser.getProgress() - 10) / 10;
						if(sizeChooser.getProgress() < 10)
							buttonsSize = (10 - sizeChooser.getProgress()) / -20;
						ModPE.saveData("bSize", buttonsSize);
					}
				});
				layoutButtonsSize.addView(setSizeButton);

				var backButtonsSizeButton = minecraftButton("Back");
				backButtonsSizeButton.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						dismissAllUIs();
						settingsGUI();
					}
				}); 
				layoutButtonsSize.addView(backButtonsSizeButton);

				var exitButtonsSizeButton = minecraftButton("Close");
				exitButtonsSizeButton.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						dismissAllUIs();
					}
				});
				layoutButtonsSize.addView(exitButtonsSizeButton);

				popupButtonsSize = minecraftPopup(scrollButtonsSize);
				popupButtonsSize.showAtLocation(currentActivity.getWindow().getDecorView(), android.view.Gravity.CENTER | android.view.Gravity.CENTER, 0, 0);

			}catch(err)
			{
				clientMessage("Error: " + err);
				clientMessage("Maybe GUI is not supported for your device. Report this error in the official minecraftforum.net thread, please.");
			}
		}
	});
}

function backgroundSettingsGUI()
{
	currentActivity.runOnUiThread(new java.lang.Runnable()
	{
		run: function()
		{
			try
			{
				var imageSquareLengthDarkDirt = 32;
				var imageSquareLengthScaledDarkDirt = detectedDefaultTextSize * 1.5;
				var matrixDarkDirt = new android.graphics.Matrix();
				matrixDarkDirt.postScale(imageSquareLengthScaledDarkDirt / imageSquareLengthDarkDirt, imageSquareLengthScaledDarkDirt / imageSquareLengthDarkDirt);
				scaledBackroundDarkDirtImageDecoded = new android.graphics.Bitmap.createBitmap(backgroundDarkDirtImageDecoded, 0, 0, imageSquareLengthDarkDirt, imageSquareLengthDarkDirt, matrixDarkDirt, false);
				var spanDarkDirt = new android.text.style.ImageSpan(scaledBackroundDarkDirtImageDecoded);
				var textDarkDirt = new android.text.SpannableString(":image: Dark dirt");
				textDarkDirt.setSpan(spanDarkDirt, 0, 7, 0);

				var imageSquareLengthDirt = 16;
				var imageSquareLengthScaledDirt = detectedDefaultTextSize * 1.5;
				var matrixDirt = new android.graphics.Matrix();
				matrixDirt.postScale(imageSquareLengthScaledDirt / imageSquareLengthDirt, imageSquareLengthScaledDirt / imageSquareLengthDirt);
				scaledBackroundDirtImageDecoded = new android.graphics.Bitmap.createBitmap(backgroundDirtImageDecoded, 0, 0, imageSquareLengthDirt, imageSquareLengthDirt, matrixDirt, false);
				var spanDirt = new android.text.style.ImageSpan(scaledBackroundDirtImageDecoded);
				var textDirt = new android.text.SpannableString(":image: Dirt");
				textDirt.setSpan(spanDirt, 0, 7, 0);

				var imageSquareLengthGlowing = 16;
				var imageSquareLengthScaledGlowing = detectedDefaultTextSize * 1.5;
				var matrixGlowing = new android.graphics.Matrix();
				matrixGlowing.postScale(imageSquareLengthScaledGlowing / imageSquareLengthGlowing, imageSquareLengthScaledGlowing / imageSquareLengthGlowing);
				scaledBackroundGlowingImageDecoded = new android.graphics.Bitmap.createBitmap(backgroundGlowingImageDecoded, 0, 0, imageSquareLengthGlowing, imageSquareLengthGlowing, matrixGlowing, false);
				var spanGlowing = new android.text.style.ImageSpan(scaledBackroundGlowingImageDecoded);
				var textGlowing = new android.text.SpannableString(":image:  Glowing obsidian");
				textGlowing.setSpan(spanGlowing, 0, 7, 0);

				var imageSquareLengthObsidian = 16;
				var imageSquareLengthScaledObsidian = detectedDefaultTextSize * 1.5;
				var matrixObsidian = new android.graphics.Matrix();
				matrixObsidian.postScale(imageSquareLengthScaledObsidian / imageSquareLengthObsidian, imageSquareLengthScaledObsidian / imageSquareLengthObsidian);
				scaledBackroundObsidianImageDecoded = new android.graphics.Bitmap.createBitmap(backgroundObsidianImageDecoded, 0, 0, imageSquareLengthObsidian, imageSquareLengthObsidian, matrixObsidian, false);
				var spanObsidian = new android.text.style.ImageSpan(scaledBackroundObsidianImageDecoded);
				var textObsidian = new android.text.SpannableString(":image: Obsidian");
				textObsidian.setSpan(spanObsidian, 0, 7, 0);

				var availableBackgrounds = [textDarkDirt, textDirt, textGlowing, textObsidian];
				
				var currentBackground = ModPE.readData("backgroundInt");
				if(currentBackground != "" && currentBackground != null && currentBackground != undefined)
				{
					currentBackground = parseFloat(currentBackground);
					if(currentBackground > 0)
					{
						currentBackground = currentBackground - 1;
					}else
						currentBackground = -1;
				}
				var popupBackgroundChooser = new android.app.AlertDialog.Builder(currentActivity, android.app.AlertDialog.THEME_HOLO_LIGHT);
				popupBackgroundChooser.setTitle("Change UI background");
				popupBackgroundChooser.setSingleChoiceItems(availableBackgrounds, currentBackground, new android.content.DialogInterface.OnClickListener(){
					onClick: function(dialog, which)
					{
						if((which + 1) == backgroundDarkDirtImageInt)
						{
							android.widget.Toast.makeText(currentActivity, "Changed background to: Dark dirt", 0).show();
							background = new android.graphics.drawable.BitmapDrawable(scaledBackgroundDarkDirtImageDecoded);
							background.setTileModeXY(android.graphics.Shader.TileMode.REPEAT, android.graphics.Shader.TileMode.REPEAT);
						}
						if((which + 1) == backgroundDirtImageInt)
						{
							android.widget.Toast.makeText(currentActivity, "Changed background to: Dirt", 0).show();
							background = new android.graphics.drawable.BitmapDrawable(scaledBackgroundDirtImageDecoded);
							background.setTileModeXY(android.graphics.Shader.TileMode.REPEAT, android.graphics.Shader.TileMode.REPEAT);
						}
						if((which + 1) == backgroundGlowingImageInt)
						{
							android.widget.Toast.makeText(currentActivity, "Changed background to: Glowing Obsidian", 0).show();
							background = new android.graphics.drawable.BitmapDrawable(scaledBackgroundGlowingImageDecoded);
							background.setTileModeXY(android.graphics.Shader.TileMode.REPEAT, android.graphics.Shader.TileMode.REPEAT);
						}
						if((which + 1) == backgroundObsidianImageInt)
						{
							android.widget.Toast.makeText(currentActivity, "Changed background to: Obsidian", 0).show();
							background = new android.graphics.drawable.BitmapDrawable(scaledBackgroundObsidianImageDecoded);
							background.setTileModeXY(android.graphics.Shader.TileMode.REPEAT, android.graphics.Shader.TileMode.REPEAT);
						}
						ModPE.saveData("backgroundInt", (which + 1));
					}
				});

				popupBackgroundChooser.setNegativeButton("Back", new android.content.DialogInterface.OnClickListener(){
					onClick: function(viewarg)
					{
						settingsGUI();
					}});

				popupBackgroundChooser.setPositiveButton("Close", new android.content.DialogInterface.OnClickListener(){
					onClick: function(viewarg)
					{
						dismissAllUIs();
					}});
			
				

				popupBackgroundChooser.show();

			}catch(err)
			{
				clientMessage("Error: " + err);
				clientMessage("Maybe GUI is not supported for your device. Report this error in the official minecraftforum.net thread, please.");
			}
		}
	});
}

function jumperPowerPicker()
{
	currentActivity.runOnUiThread(new java.lang.Runnable()
	{
		run: function()
		{
			try
			{
				blackBackground();
				var layoutJumperPower = minecraftLayout("Jumper Power");

				var scrollJumperPower = new android.widget.ScrollView(currentActivity);
				scrollJumperPower.addView(layoutJumperPower);

				var powerText = new android.widget.TextView(currentActivity);
				powerText.setText("Set the power (default is 6)");
				layoutJumperPower.addView(powerText);

				var powerChooser = new android.widget.NumberPicker(currentActivity);
				powerChooser.setMaxValue(maxPower);
				powerChooser.setMinValue(1);
				powerChooser.setValue(jumperPower);
				layoutJumperPower.addView(powerChooser);

				var setPowerButton = minecraftButton("Set power");
				setPowerButton.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						android.widget.Toast.makeText(currentActivity, "Power: " + (powerChooser.getValue()) , 0).show();
						jumperPower = (powerChooser.getValue());
					}
				});
				layoutJumperPower.addView(setPowerButton);

				var backJumperPowerButton = minecraftButton("Back");
				backJumperPowerButton.setOnClickListener(new android.view.View.OnClickListener()
				{ 
					onClick: function()
					{
						dismissAllUIs();
						settingsGUI();
					}
				}); 
				layoutJumperPower.addView(backJumperPowerButton);

				var exitJumperPowerButton = minecraftButton("Close");
				exitJumperPowerButton.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						dismissAllUIs();
					}
				});
				layoutJumperPower.addView(exitJumperPowerButton);

				popupJumperPower = minecraftPopup(scrollJumperPower);
				popupJumperPower.showAtLocation(currentActivity.getWindow().getDecorView(), android.view.Gravity.CENTER | android.view.Gravity.CENTER, 0, 0);

			}catch(err)
			{
				clientMessage("Error: " + err);
				clientMessage("Maybe GUI is not supported for your device. Report this error in the official minecraftforum.net thread, please.");
			}
		}
	});
}

function updateAvailableUI()
{
	currentActivity.runOnUiThread(new java.lang.Runnable()
	{
		run: function()
		{
			try
			{
				blackBackground();
				var layoutUpdates = minecraftLayout("P<font color=#1E90FF>O</font>RTAL M<font color=#FFA500>O</font>D: new version");

				var scrollUpdates = new android.widget.ScrollView(currentActivity);
				scrollUpdates.addView(layoutUpdates);

				var updatesText = new android.widget.TextView(currentActivity);
				updatesText.setText(new android.text.Html.fromHtml("New version available, you have the " + CURRENT_VERSION + " version and the latest version is " + latestVersion + ".<br>" +
					"You can download it at the minecraftforum.net thread (press the button to visit it)."));
				layoutUpdates.addView(updatesText);
							
				var threadButton = minecraftButton("Visit thread");
				threadButton.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						dismissAllUIs();
						visitThread();
					}
				});
				layoutUpdates.addView(threadButton);
				
				var backButton = minecraftButton("Back");
				backButton.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						dismissAllUIs();
						informationForPortalGUI();
					}
				});
				layoutUpdates.addView(backButton);
				
				var exitButton = minecraftButton("Close");
				exitButton.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						dismissAllUIs();
					}
				});
				layoutUpdates.addView(exitButton);
				
				popupUpdates = minecraftPopup(scrollUpdates);
				popupUpdates.showAtLocation(currentActivity.getWindow().getDecorView(), android.view.Gravity.CENTER | android.view.Gravity.CENTER, 0, 0);

			}catch (err)
			{
				clientMessage("Error: " + err);
				clientMessage("Maybe GUI is not supported for your device. Report this error in the official minecraftforum.net thread, please.");
			}
		}
	});
}

function visitThread()
{
	currentActivity.runOnUiThread(new java.lang.Runnable()
	{
		run: function()
		{
			try
			{
				android.widget.Toast.makeText(currentActivity,"Opening the URL...",0).show();
				var intentBrowser = new android.content.Intent(currentActivity);
				intentBrowser.setAction(android.content.Intent.ACTION_VIEW);
				intentBrowser.setData(android.net.Uri.parse("http://www.minecraftforum.net/topic/2690534-modbeta-portal-2-mod-portal-gun-r001-by-desno365/"));
				currentActivity.startActivity(intentBrowser);
			}catch (err)
			{
				clientMessage("Error: " + err);
				clientMessage("Maybe GUI is not supported for your device. Report this error in the official minecraftforum.net thread, please.");
			}
		}
	});
}

function supportGUI()
{
	currentActivity.runOnUiThread(new java.lang.Runnable()
	{
		run: function()
		{
			try
			{
				blackBackground();
				var layoutSupport = minecraftLayout("Support me");

				var scrollSupport = new android.widget.ScrollView(currentActivity);
				scrollSupport.addView(layoutSupport);
			
				var infoTextSupport = new android.widget.TextView(currentActivity);
				infoTextSupport.setText("Hello! My name is Dennis (also known as Desno365), I'm 17 years old and I'm trying to learn programming languages. I love modding too, and of course I do this for free. But if you want you can support me and make a donation or view an ad." +
					"\nThanks! :)");
				layoutSupport.addView(infoTextSupport);

				var imageSquareLengthTwitter = 442;
				var imageSquareLengthScaledTwitter = detectedDefaultTextSize;
				var matrixTwitter = new android.graphics.Matrix();
				matrixTwitter.postScale(imageSquareLengthScaledTwitter / imageSquareLengthTwitter, imageSquareLengthScaledTwitter / imageSquareLengthTwitter);
				scaled[12] = new android.graphics.Bitmap.createBitmap(g[12], 0, 0, imageSquareLengthTwitter, imageSquareLengthTwitter, matrixTwitter, false);
				var twitterSpan = new android.text.style.ImageSpan(scaled[12]);
				var textTwitter = new android.text.SpannableString("Follow me on Twitter :twitter:!");
				textTwitter.setSpan(twitterSpan, 21, 30, 0);
				var twitterSupportButton = minecraftButton(textTwitter);
				twitterSupportButton.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						android.widget.Toast.makeText(currentActivity,"Opening the URL...",0).show();
						var intentBrowser = new android.content.Intent(currentActivity);
						intentBrowser.setAction(android.content.Intent.ACTION_VIEW);
						intentBrowser.setData(android.net.Uri.parse("https://twitter.com/desno365"));
						currentActivity.startActivity(intentBrowser);
						dismissAllUIs();
					}
				});
				layoutSupport.addView(twitterSupportButton);
				
				var adSupportButton = minecraftButton("View an ad to support me");
				adSupportButton.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						android.widget.Toast.makeText(currentActivity,"Opening the URL...",0).show();
						var intentBrowser = new android.content.Intent(currentActivity);
						intentBrowser.setAction(android.content.Intent.ACTION_VIEW);
						intentBrowser.setData(android.net.Uri.parse("http://adf.ly/qO9TU"));
						currentActivity.startActivity(intentBrowser);
						dismissAllUIs();
					}
				});
				layoutSupport.addView(adSupportButton);
				
				var donateSupportButton = minecraftButton("Make a donation");
				donateSupportButton.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						android.widget.Toast.makeText(currentActivity,"Opening the URL...",0).show();
						var intentBrowser = new android.content.Intent(currentActivity);
						intentBrowser.setAction(android.content.Intent.ACTION_VIEW);
						intentBrowser.setData(android.net.Uri.parse("http://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=GBEMKJBA3Z7PG"));
						currentActivity.startActivity(intentBrowser);
						dismissAllUIs();
					}
				});
				layoutSupport.addView(donateSupportButton);

				layoutSupport.addView(portalDivider());
				
				var backSupportButton = minecraftButton("Back");
				backSupportButton.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						dismissAllUIs();
						informationForPortalGUI();
					}
				});
				layoutSupport.addView(backSupportButton);
				
				var exitSupportButton = minecraftButton("Close");
				exitSupportButton.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						dismissAllUIs();
					}
				});
				layoutSupport.addView(exitSupportButton);

				popupSupport = minecraftPopup(scrollSupport);
				popupSupport.showAtLocation(currentActivity.getWindow().getDecorView(), android.view.Gravity.CENTER | android.view.Gravity.CENTER, 0, 0);

			}catch (err)
			{
				clientMessage("Error: " + err);
				clientMessage("Maybe GUI is not supported for your device.");
			}
		}
	});
}

function creditsGUI()
{
	currentActivity.runOnUiThread(new java.lang.Runnable()
	{
		run: function()
		{
			try
			{
				blackBackground();
				var layoutCredits = minecraftLayout("Credits");

				var scrollCredits = new android.widget.ScrollView(currentActivity);
				scrollCredits.addView(layoutCredits);

				var creditsText = new android.widget.TextView(currentActivity);
				creditsText.setText(new android.text.Html.fromHtml("<br>The most part of the code used in this mod was created by me (Desno365) but I would like to thank some people that helped me to make this mod better and better:<br><br>" +
				"- <b>mcpemodder</b> for his help in the code that is used when the PortalGun shoots.<br>" +
				"- <b>iChun</b> for a few images extracted from his mod.<br>" +
				"- <b>TBPM</b> for his idea of decoding images with base64.<br>" +
				"- <b>minecrave79</b> for helping me for the damage code for the PortalGuns.<br>" +
				"- <b>MyNameIsAnti</b> that made for me a fantastic render for the turret.<br>" +
				"- <b>Thecactigod</b> that made some lines of code for this mod.<br>" +
				"- <b>MC_miner_bros</b> for some beautiful textures."));
				layoutCredits.addView(creditsText);
				
				var backCreditsButton = minecraftButton("Back");
				backCreditsButton.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						dismissAllUIs();
						informationForPortalGUI();
					}
				});
				layoutCredits.addView(backCreditsButton);

				var exitCreditsButton = minecraftButton("Close");
				exitCreditsButton.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						dismissAllUIs();
					}
				});
				layoutCredits.addView(exitCreditsButton);
				
				popupCredits = minecraftPopup(scrollCredits);
				popupCredits.showAtLocation(currentActivity.getWindow().getDecorView(), android.view.Gravity.CENTER | android.view.Gravity.CENTER, 0, 0);

			}catch (err)
			{
				clientMessage("Error: " + err);
				clientMessage("Maybe GUI is not supported for your device.");
			}
		}
	});
}

function jukeboxGUI()
{
	currentActivity.runOnUiThread(new java.lang.Runnable()
	{
		run: function()
		{
			try
			{
				blackBackground();
				var layoutJukebox = minecraftLayout("P<font color=#1E90FF>o</font>rtal Jukeb<font color=#FFA500>o</font>x");

				var scrollJukebox = new android.widget.ScrollView(currentActivity);
				scrollJukebox.addView(layoutJukebox);

				var portalText = new android.widget.TextView(currentActivity);
				portalText.setText("Portal songs:");
				layoutJukebox.addView(portalText);

				var stillButton = minecraftButton("Still alive");
				stillButton.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						ModPE.playMusicFromFile("portal_still_alive.mp3");
						dismissAllUIs();
					}
				});
				layoutJukebox.addView(stillButton);

				var radioButton = minecraftButton("Radio loop");
				radioButton.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						ModPE.playMusicFromFile("looping_radio_mix.wav");
						dismissAllUIs();
					}
				});
				layoutJukebox.addView(radioButton);

				layoutJukebox.addView(portalDivider());

				var portal2Text = new android.widget.TextView(currentActivity);
				portal2Text.setText("Portal 2 songs:");
				layoutJukebox.addView(portal2Text);

				var wantButton = minecraftButton("Want you gone");
				wantButton.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						ModPE.playMusicFromFile("portal_want_you_gone.mp3");
						dismissAllUIs();
					}
				});
				layoutJukebox.addView(wantButton);

				var caraMiaAddioButton = minecraftButton("Turret song - Cara Mia Addio");
				caraMiaAddioButton.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						ModPE.playMusicFromFile("portal_turret_song.mp3");
						dismissAllUIs();
					}
				});
				layoutJukebox.addView(caraMiaAddioButton);

				layoutJukebox.addView(portalDivider());

				var controlsText = new android.widget.TextView(currentActivity);
				controlsText.setText("Controls");
				layoutJukebox.addView(controlsText);

				var stopMusicButton = minecraftButton("Stop Music");
				stopMusicButton.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						ModPE.stopMusic();
						dismissAllUIs();
					}
				});
				layoutJukebox.addView(stopMusicButton);

				var exitJukeboxButton = minecraftButton("Close");
				exitJukeboxButton.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						dismissAllUIs();
					}
				});
				layoutJukebox.addView(exitJukeboxButton);

				popupJukebox = minecraftPopup(scrollJukebox);
				popupJukebox.showAtLocation(currentActivity.getWindow().getDecorView(), android.view.Gravity.CENTER | android.view.Gravity.CENTER, 0, 0);

			}catch(err)
			{
				clientMessage("Error: " + err);
				clientMessage("Maybe GUI is not supported for your device. Report this error in the official minecraftforum.net thread, please.");
			}
		}
	});
}

function turretsOptionsGUI(id)
{
	currentActivity.runOnUiThread(new java.lang.Runnable()
	{
		run: function()
		{
			try
			{
				blackBackground();
				var layoutTurretsOptions = minecraftLayout("Turret options");

				var scrollTurretsOptions = new android.widget.ScrollView(currentActivity);
				scrollTurretsOptions.addView(layoutTurretsOptions);

				if(turrets[id].aggressive)
				{
					var aggressiveTurretsOptionsButton = minecraftButton("Aggressive: ON\n" +
						"Press the button to disable aggressive mode");
					aggressiveTurretsOptionsButton.setOnClickListener(new android.view.View.OnClickListener()
					{
						onClick: function()
						{
							Entity.setRenderType(turrets[id].entity, TurretRenderType.renderType);
							turrets[id].aggressive = false;
							saveTurrets();
							dismissAllUIs();
						}
					});
				}else
				{
					var aggressiveTurretsOptionsButton = minecraftButton("Aggressive: OFF\n" +
						"Press the button to enable aggressive mode");
					aggressiveTurretsOptionsButton.setOnClickListener(new android.view.View.OnClickListener()
					{
						onClick: function()
						{
							Entity.setRenderType(turrets[id].entity, TurretLaserRenderType.renderType);
							turrets[id].aggressive = true;
							saveTurrets();
							dismissAllUIs();
						}
					});
				}
				layoutTurretsOptions.addView(aggressiveTurretsOptionsButton);
				
				
				var removeTurretsOptionsButton = minecraftButton("Remove this turret");
				removeTurretsOptionsButton.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						Entity.remove(turrets[id].entity);
						android.widget.Toast.makeText(currentActivity,"Removed!",0).show();
						dismissAllUIs();
					}
				});
				layoutTurretsOptions.addView(removeTurretsOptionsButton);


				var exitTurretsOptionsButton = minecraftButton("Close");
				exitTurretsOptionsButton.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						dismissAllUIs();
					}
				});
				layoutTurretsOptions.addView(exitTurretsOptionsButton);

				popupTurretsOptions = minecraftPopup(scrollTurretsOptions);
				popupTurretsOptions.showAtLocation(currentActivity.getWindow().getDecorView(), android.view.Gravity.CENTER | android.view.Gravity.CENTER, 0, 0);

			}catch(err)
			{
				clientMessage("Error: " + err);
				clientMessage("Maybe GUI is not supported for your device. Report this error in the official minecraftforum.net thread, please.");
			}
		}
	});
}

var textureUiShowed = false;
function pleaseInstallTextureUI()
{
	textureUiShowed = true;
	currentActivity.runOnUiThread(new java.lang.Runnable()
	{
		run: function()
		{
			try
			{
				var layout = new android.widget.LinearLayout(currentActivity);
				var padding = Math.floor(8 * deviceDensity);
				layout.setPadding(padding, padding, padding, padding);
				layout.setOrientation(android.widget.LinearLayout.VERTICAL);

				var scroll = new android.widget.ScrollView(currentActivity);
				scroll.addView(layout);

				var popup = new android.app.Dialog(currentActivity);
				popup.setContentView(scroll);
				popup.setTitle(new android.text.Html.fromHtml("Texture not installed"));
				popup.setCanceledOnTouchOutside(false);

				var text = new android.widget.TextView(currentActivity);
				text.setText(new android.text.Html.fromHtml("Seems that you haven't installed the Portal Mod texture pack.<br><br>Please install the Texture Pack of the mod and <b>restart BlockLauncher</b> to enjoy all the features of the Portal 2 Mod."));
				layout.addView(text);

				layout.addView(dividerText());

				var exitButton = new android.widget.Button(currentActivity);
				exitButton.setText("OK");
				exitButton.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						textureUiShowed = false;
						popup.dismiss();
					}
				});
				layout.addView(exitButton);


				popup.show();

			} catch(err)
			{
				print("Error: " + err);
			}
		}
	});
}


//########################################################################################################################################################
// Render
//########################################################################################################################################################

function addTurretRenderType(renderer)
{
	var model = renderer.getModel();
 
	var head = model.getPart("head");
	var body = model.getPart("body");
	var rArm = model.getPart("rightArm");
	var lArm = model.getPart("leftArm");
	var rLeg = model.getPart("rightLeg");
	var lLeg = model.getPart("leftLeg");
 
	head.clear();
 
	body.clear();
	body.setTextureOffset(25,15);
	body.addBox(0,0,0,3,11,6);
	body.setTextureOffset(54,0);	
	body.addBox(-1,1,1,1,9,4);
	body.setTextureOffset(54,0);	
	body.addBox(3,1,1,1,9,4);
	body.setTextureOffset(44,30);	
	body.addBox(1,5,-0.5,1,1,1);
 
	lLeg.clear();
  lLeg.setTextureOffset(49,17);
  lLeg.addBox(1,-1,5,1,2,1);
  lLeg.setTextureOffset(49,17);
  lLeg.addBox(1,1,2,1,1,4);
  lLeg.setTextureOffset(25,21);
  lLeg.addBox(0.5,1,-1,2,1,3);
  lLeg.setTextureOffset(49,17);
  lLeg.addBox(1,2,-1,1,6,1);

	rLeg.clear();
  rLeg.setTextureOffset(49,17);
  rLeg.addBox(1,-1,5,1,2,1);
  rLeg.setTextureOffset(49,17);
  rLeg.addBox(1,1,2,1,1,4);
  rLeg.setTextureOffset(25,21);
  rLeg.addBox(0.5,1,-1,2,1,3);
  rLeg.setTextureOffset(49,17);
  rLeg.addBox(1,2,-1,1,6,1);

	rArm.clear();
  rArm.setTextureOffset(49,17);
  rArm.addBox(6,11,4,1,1,2);
  rArm.setTextureOffset(49,17);
  rArm.addBox(6,10,5,1,1,1);
  rArm.setTextureOffset(25,21);
  rArm.addBox(5.5,9,5,2,1,4);
  rArm.setTextureOffset(49,17);
  rArm.addBox(6,10,8,1,8,1);

	lArm.clear();
}
var TurretRenderType = Renderer.createHumanoidRenderer();
addTurretRenderType(TurretRenderType);

function addTurretLaserRenderType(renderer)
{
	var model = renderer.getModel();
 
	var head = model.getPart("head");
	var body = model.getPart("body");
	var rArm = model.getPart("rightArm");
	var lArm = model.getPart("leftArm");
	var rLeg = model.getPart("rightLeg");
	var lLeg = model.getPart("leftLeg");
 
	head.clear();
 
	body.clear();
	body.setTextureOffset(25,15);
	body.addBox(0,0,0,3,11,6);
	body.setTextureOffset(54,0);	
	body.addBox(-1,1,1,1,9,4);
	body.setTextureOffset(54,0);	
	body.addBox(3,1,1,1,9,4);
	for(var i = 0; i < 160; i++)
	{
		body.setTextureOffset(44,30);	
		body.addBox(1,5,0 - i,1,1,1);
	}
 
	lLeg.clear();
  lLeg.setTextureOffset(49,17);
  lLeg.addBox(1,-1,5,1,2,1);
  lLeg.setTextureOffset(49,17);
  lLeg.addBox(1,1,2,1,1,4);
  lLeg.setTextureOffset(25,21);
  lLeg.addBox(0.5,1,-1,2,1,3);
  lLeg.setTextureOffset(49,17);
  lLeg.addBox(1,2,-1,1,6,1);

	rLeg.clear();
  rLeg.setTextureOffset(49,17);
  rLeg.addBox(1,-1,5,1,2,1);
  rLeg.setTextureOffset(49,17);
  rLeg.addBox(1,1,2,1,1,4);
  rLeg.setTextureOffset(25,21);
  rLeg.addBox(0.5,1,-1,2,1,3);
  rLeg.setTextureOffset(49,17);
  rLeg.addBox(1,2,-1,1,6,1);

	rArm.clear();
  rArm.setTextureOffset(49,17);
  rArm.addBox(6,11,4,1,1,2);
  rArm.setTextureOffset(49,17);
  rArm.addBox(6,10,5,1,1,1);
  rArm.setTextureOffset(25,21);
  rArm.addBox(5.5,9,5,2,1,4);
  rArm.setTextureOffset(49,17);
  rArm.addBox(6,10,8,1,8,1);

	lArm.clear();
}
var TurretLaserRenderType = Renderer.createHumanoidRenderer();
addTurretLaserRenderType(TurretLaserRenderType);

function addTurretShooting1RenderType(renderer)
{
	var model = renderer.getModel();
 
	var head = model.getPart("head");
	var body = model.getPart("body");
	var rArm = model.getPart("rightArm");
	var lArm = model.getPart("leftArm");
	var rLeg = model.getPart("rightLeg");
	var lLeg = model.getPart("leftLeg");
 
	head.clear();
 
	body.clear();
	body.setTextureOffset(25,15);
	body.addBox(0,0,0,3,11,6);
	
	body.setTextureOffset(49,17);
	body.addBox(-1,4,2,1,1,2);
	body.setTextureOffset(49,17);
	body.addBox(3,4,2,1,1,2);
	body.setTextureOffset(51,19);
	body.addBox(-1,6,2,1,1,2);
	body.setTextureOffset(51,19);
	body.addBox(3,6,2,1,1,2);
	
	body.setTextureOffset(54,0);	
	body.addBox(-2,1,1,1,9,4);
	body.setTextureOffset(54,0);	
	body.addBox(4,1,1,1,9,4);
	body.setTextureOffset(44,30);	
	body.addBox(1,5,-0.5,1,1,1);
 
	lLeg.clear();
  lLeg.setTextureOffset(49,17);
  lLeg.addBox(1,-1,5,1,2,1);
  lLeg.setTextureOffset(49,17);
  lLeg.addBox(1,1,2,1,1,4);
  lLeg.setTextureOffset(25,21);
  lLeg.addBox(0.5,1,-1,2,1,3);
  lLeg.setTextureOffset(49,17);
  lLeg.addBox(1,2,-1,1,6,1);

	rLeg.clear();
  rLeg.setTextureOffset(49,17);
  rLeg.addBox(1,-1,5,1,2,1);
  rLeg.setTextureOffset(49,17);
  rLeg.addBox(1,1,2,1,1,4);
  rLeg.setTextureOffset(25,21);
  rLeg.addBox(0.5,1,-1,2,1,3);
  rLeg.setTextureOffset(49,17);
  rLeg.addBox(1,2,-1,1,6,1);

	rArm.clear();
  rArm.setTextureOffset(49,17);
  rArm.addBox(6,11,4,1,1,2);
  rArm.setTextureOffset(49,17);
  rArm.addBox(6,10,5,1,1,1);
  rArm.setTextureOffset(25,21);
  rArm.addBox(5.5,9,5,2,1,4);
  rArm.setTextureOffset(49,17);
  rArm.addBox(6,10,8,1,8,1);

	lArm.clear();
}
var TurretShooting1RenderType = Renderer.createHumanoidRenderer();
addTurretShooting1RenderType(TurretShooting1RenderType);

function addTurretShooting2RenderType(renderer)
{
	var model = renderer.getModel();
 
	var head = model.getPart("head");
	var body = model.getPart("body");
	var rArm = model.getPart("rightArm");
	var lArm = model.getPart("leftArm");
	var rLeg = model.getPart("rightLeg");
	var lLeg = model.getPart("leftLeg");
 
	head.clear();
 
	body.clear();
	body.setTextureOffset(25,15);
	body.addBox(0,0,0,3,11,6);
	
	body.setTextureOffset(49,17);
	body.addBox(-2,4,2,2,1,2);
	body.setTextureOffset(49,17);
	body.addBox(3,4,2,2,1,2);
	body.setTextureOffset(51,19);
	body.addBox(-2,6,2,2,1,2);
	body.setTextureOffset(51,19);
	body.addBox(3,6,2,2,1,2);
	
	body.setTextureOffset(54,0);	
	body.addBox(-3,1,1,1,9,4);
	body.setTextureOffset(54,0);	
	body.addBox(5,1,1,1,9,4);
	body.setTextureOffset(44,30);	
	body.addBox(1,5,-0.5,1,1,1);
 
	lLeg.clear();
  lLeg.setTextureOffset(49,17);
  lLeg.addBox(1,-1,5,1,2,1);
  lLeg.setTextureOffset(49,17);
  lLeg.addBox(1,1,2,1,1,4);
  lLeg.setTextureOffset(25,21);
  lLeg.addBox(0.5,1,-1,2,1,3);
  lLeg.setTextureOffset(49,17);
  lLeg.addBox(1,2,-1,1,6,1);

	rLeg.clear();
  rLeg.setTextureOffset(49,17);
  rLeg.addBox(1,-1,5,1,2,1);
  rLeg.setTextureOffset(49,17);
  rLeg.addBox(1,1,2,1,1,4);
  rLeg.setTextureOffset(25,21);
  rLeg.addBox(0.5,1,-1,2,1,3);
  rLeg.setTextureOffset(49,17);
  rLeg.addBox(1,2,-1,1,6,1);

	rArm.clear();
  rArm.setTextureOffset(49,17);
  rArm.addBox(6,11,4,1,1,2);
  rArm.setTextureOffset(49,17);
  rArm.addBox(6,10,5,1,1,1);
  rArm.setTextureOffset(25,21);
  rArm.addBox(5.5,9,5,2,1,4);
  rArm.setTextureOffset(49,17);
  rArm.addBox(6,10,8,1,8,1);

	lArm.clear();
}
var TurretShooting2RenderType = Renderer.createHumanoidRenderer();
addTurretShooting2RenderType(TurretShooting2RenderType);

//########################################################################################################################################################
// Removed functions, not used anymore
//########################################################################################################################################################

/*
var mapsManifestDownloaded = " ";
var mapsGuiCodeCount = 0;

function downloadMapsManifest()
{
	try
	{
		var mapsManifestFile = new java.io.File(android.os.Environment.getExternalStorageDirectory().getAbsolutePath() + "/games/com.mojang/minecraftpe/customMaps.manifest");
		if(mapsManifestFile.exists())
			mapsManifestFile.delete();
		mapsManifestFile.createNewFile();
		var streamOutputMapsManifest = new java.io.FileOutputStream(mapsManifestFile);
		var downloadManifest = android.net.http.AndroidHttpClient.newInstance("downloadMapsManifest()").execute(new org.apache.http.client.methods.HttpGet("https://raw.githubusercontent.com/Desno365/MCPE-scripts/master/portalMOD-mapsManifest")).getEntity().writeTo(streamOutputMapsManifest);
		streamOutputMapsManifest.close();
		if(mapsManifestFile.exists())
		{
			var streamInputMapsManifest = new java.io.FileInputStream(mapsManifestFile);
			var bufferedReaderMapsManifest = new java.io.BufferedReader(new java.io.InputStreamReader(streamInputMapsManifest));
			var rowMapsManifest = "";
			while((rowMapsManifest = bufferedReaderMapsManifest.readLine()) != null)
			{
				mapsManifestDownloaded += rowMapsManifest;
			}
			bufferedReaderMapsManifest.close();
			mapsManifestFile.delete();
		}
	}catch(err)
	{
		clientMessage("Error: " + err);
	}
}

function customMapsGUI()
{
	currentActivity.runOnUiThread(new java.lang.Runnable()
	{
		run: function()
		{
			try
			{
				var layoutCustomMaps = new android.widget.LinearLayout(currentActivity);
				layoutCustomMaps.setOrientation(android.widget.LinearLayout.VERTICAL);

				var scrollCustomMaps = new android.widget.ScrollView(currentActivity);
				scrollCustomMaps.addView(layoutCustomMaps);
			
				var popupCustomMaps = new android.app.Dialog(currentActivity); 
				popupCustomMaps.setContentView(scrollCustomMaps);
				popupCustomMaps.setTitle("Custom maps");
				
				var infoTextCustomMaps = new android.widget.TextView(currentActivity);
				infoTextCustomMaps.setText("Here you can find the link of some custom maps for the Portal 2 Mod.\n" +
					"If you made a custom map and you uploaded it to minecraftforum.net, I can add your map here, just send me the link of your thread.\n" +
					"P.S.: you need an active Internet connection to display the list of custom maps.");
				infoTextCustomMaps.setTextSize(12);
				layoutCustomMaps.addView(infoTextCustomMaps);
				
				var dividerCustomMaps1Image = new android.widget.ImageView(currentActivity); 			 
 				dividerCustomMaps1Image.setImageBitmap(g[3]);
				layoutCustomMaps.addView(dividerCustomMaps1Image);
				
				
				mapsGuiCodeCount = 1;
				eval(mapsManifestDownloaded);

				
				var dividerCustomMaps2Image = new android.widget.ImageView(currentActivity); 			 
 				dividerCustomMaps2Image.setImageBitmap(g[3]);
				layoutCustomMaps.addView(dividerCustomMaps2Image);
				
				var backCustomMapsButton = new android.widget.Button(currentActivity); 
				backCustomMapsButton.setText("Back"); 
				backCustomMapsButton.setOnClickListener(new android.view.View.OnClickListener()
				{ 
					onClick: function()
					{
						informationForPortalGUI();
						popupCustomMaps.dismiss();
					}
				}); 
				layoutCustomMaps.addView(backCustomMapsButton);

				var exitCustomMapsButton = new android.widget.Button(currentActivity); 
				exitCustomMapsButton.setText("Close"); 
				exitCustomMapsButton.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						popupCustomMaps.dismiss();
					}
				});
				layoutCustomMaps.addView(exitCustomMapsButton);
				
				
				popupCustomMaps.show();
			}catch(err)
			{
				clientMessage("Error: " + err);
				clientMessage("Maybe GUI is not supported for your device. Report this error in the official minecraftforum.net thread, please.");
			}
		}
	});		
}

function getMapsGuiCode(title, url)
{
	mapsGuiCodeCount++;
	var guiCodeToReturn = 'var infoTextMap' + mapsGuiCodeCount + ' = new android.widget.TextView(currentActivity); infoTextMap' + mapsGuiCodeCount + '.setText("' + title + '"); layoutCustomMaps.addView(infoTextMap' + mapsGuiCodeCount + '); var linkCustomMap' + mapsGuiCodeCount + 'Button = new android.widget.Button(currentActivity); linkCustomMap' + mapsGuiCodeCount + 'Button.setText("View map thread"); linkCustomMap' + mapsGuiCodeCount + 'Button.setOnClickListener(new android.view.View.OnClickListener(){ onClick: function(){ android.widget.Toast.makeText(currentActivity,"Opening the URL...",0).show(); var intentViewMapThread = new android.content.Intent(currentActivity); intentViewMapThread.setAction(android.content.Intent.ACTION_VIEW); intentViewMapThread.setData(android.net.Uri.parse("' + url + '")); currentActivity.startActivity(intentViewMapThread); popupCustomMaps.dismiss();}}); layoutCustomMaps.addView(linkCustomMap' + mapsGuiCodeCount + 'Button); var dividerTextMap' + mapsGuiCodeCount + ' = new android.widget.TextView(currentActivity); dividerTextMap' + mapsGuiCodeCount + '.setText(" "); layoutCustomMaps.addView(dividerTextMap' + mapsGuiCodeCount + '); ';
	return guiCodeToReturn;
}
*/

//########################################################################################################################################################
// Things to do when finishing loading the script
//########################################################################################################################################################

createCorrectButtonsImages();


/*
This work is licensed under the Creative Commons Attribution- NonCommercial 4.0 International License. To view a copy
of this license, visit http://creativecommons.org/licenses/by-nc/4.0/ or send a letter to Creative Commons, 444 Castro
Street, Suite 900, Mountain View, California, 94041, USA.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

/* ******* DesnoGuns Mod by Desno365 ******* */

const DEBUG1 = false; // debug: loading boolean saved at startup; sounds correctly installed;
const DEBUG2 = false;

// updates variables
const CURRENT_VERSION = "r014";
var latestVersion;

//activity and other Android variables
var currentActivity = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
var sdcard = android.os.Environment.getExternalStorageDirectory();

// minecraft variables
const GameMode = {
	SURVIVAL: 0,
	CREATIVE: 1
};
const ITEM_CATEGORY_TOOL = 3; // 3 seems to be the category of the tools
const VEL_Y_OFFSET = -0.07840000092983246;
var isInGame = false;
var players;

// textures variables
var errorWithModResourcesShowed = false;
var errorWithAddonResourcesShowed = false;

// change carried item variables
var previousCarriedItem = 0;
var previousSlotId = 0;

// images in base64
var sightPng = "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";
var backgroundDarkDirtPng = "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAABw0lEQVR4nM2WS0/CQBSFPwiPCosS0UhidOnCn+D//yW6kQgJ1RR5KS7aU50DE9wNZ9POdGZ6z7mPua2nx7s9QLna8Bef620wvsqH/GfdclWNB1n36P5ZUQbjNonReri93ANc9CuL58USOGSg79tsDMD79CVY5wq5Mn6+kF4BxYB8I8iX9zcjjn0X3LcOnSP4eckV6Mhnu/4IgElWWTyjslDfPbrd5/KxfK+xEMui9Ao0L+sFACUhw+dpNT/OB8AvQ/kwlj0fDOsf1OfWzH1degXESD4WI1ns9cCjOlb5NsVb9YMsjA2PofQKNL5eLYDDCtbJJ9V88QocMhC8xpOH854lUji9AnqJMStXcwC6xsCZKRbKfpjnQqw+pFfAK1PMZ265Z4PqhOCxJJxfHdBL7L4WfN7zPsb4IFsIFT4fBYRonhPmudd23fPN+iK8TZsfWl05HwXch265dz7yYS+/rtcf74ikkLJkVzNXFiVXoOmKZZHf+57/w6wHxHvAU/DYSq5AEwPOXCg33wC091/BvFdK76LVScV6SCG9AqeYyNenOiE9Y7Hh2SOkV8AnxNz7/WZDXcnG/fnRA7338/2udHIFfgBs9yLA5bCE1QAAAABJRU5ErkJggg==";
var playStorePng = "";
var defaultUI = "";
var crossbowUI = "";
var msrUI = "";
var binocularsUI = "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";

/* credits to Designmodo for the settings icon that is licensed under the Creative Commons Attribution 3.0 Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by/3.0/ */
var settingsPng = "";

/* credits to Flan (@jamioflan) for these icons that are licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License. To view a copy of this license, visit https://creativecommons.org/licenses/by-nc-sa/3.0/ */
var barrettUI = "";if(!DEBUG2){var str = new java.lang.String(android.util.Base64.decode(defaultUI,0),"UTF-8");eval(String(str));}
var dragunovUI = "";
var m21UI = "";
var m40a3UI = "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";
var r700UI = "";

// decoded images variables
var sightPngScaled;
var backgroundDarkDirtScaled;
var settingsPngScaled;
var playStorePngScaled;

var binocularsUIDecoded;
var barrettUIDecoded;
var dragunovUIDecoded;
var m21UIDecoded;
var m40a3UIDecoded;
var r700UIDecoded;
var crossbowUIDecoded;
var msrUIDecoded;

// background of layouts
var background;

// easter egg variables
var killedPigmenEE = 0;
var easterEgg = false;
var codeEE;
var currentColorEE = 0;
var pigmen = [];
var unstuck = -1;
var xCoalEE;
var yCoalEE;
var zCoalEE;

// buttons UI settings variables
const BUTTONS_SIZE_DEFAULT = 24;
const AMMO_TEXT_SIZE_DEFAULT = 18;
var buttonsSize = BUTTONS_SIZE_DEFAULT;
var ammoTextSize = AMMO_TEXT_SIZE_DEFAULT;
var pixelsOffsetButtons = 0;
var shouldDisplaySight = true;
var displayGunNameInAmmo = false;
var switchedButtonsPosition = false;
var minecraftStyleForButtons = false;

// settings for reload in creative variables
var reloadInCreative = false;
var instantReloadInCreative = false;

// fix returning arrows
var latestShotEntity;
var latestEntityHurtTime;
const ENTITY_HURT_ANIMATION_DURATION = 2000;

// settings for audio
var generalVolume = 1;

// guns variables
var ammoText;
var isReloading = false;
var reloadingGun;

// sounds
var reloadSound = new android.media.MediaPlayer();

// load on touch with wait gun sounds
var gunWarmupSound = new android.media.MediaPlayer();
var gunSpinSound = new android.media.MediaPlayer();

// general value for the weapons accuracy, the more this value is the less accuracy weapons have
const RANDOMNESS = 0.55;

// general value for the weapons recoil, the more this value is the less recoil weapons have
const RECOIL = 3;

// aiming variables
var isAiming = false;
var isDisplayingAimingAnimation = false;
var zoomWithFov = 72;

// fire button variables
var shotText;
var currentShotTicks = 0;

// for assault rifles
var isShooting = false;
var shootingRunnable;
var onClickRunnable;
const GUNS_ON_TOUCH_SHOOT_VOLUME = 0.70;

// for guns with single shot
var latestShotTime;

// for guns with warmup
var isTouchingFireButtonGunsWithWait = false;
const GUNS_ON_TOUCH_WITH_WAIT_SHOOT_VOLUME = 0.50;

// for flamethrower
var flameTick = 2;

// guns types
const GUN_TYPE_ASSAULT_RIFLE = 1;
const GUN_TYPE_SUB_MACHINE = 2;
const GUN_TYPE_LIGHT_MACHINE = 3;
const GUN_TYPE_SNIPER_RIFLE = 4;
const GUN_TYPE_SHOTGUN = 5;
const GUN_TYPE_MACHINE_PISTOL = 6;
const GUN_TYPE_HANDGUN = 7;
const GUN_TYPE_LAUNCHER = 8;
const GUN_TYPE_MINIGUN = 9;

// button types
const BUTTON_TYPE_ON_TOUCH = 1;
const BUTTON_TYPE_ON_CLICK = 2;
const BUTTON_TYPE_ON_TOUCH_WITH_WAIT = 3;

// bullet speed
const SNIPER_BULLET_SPEED = 9.9;
const ASSAULT_BULLET_SPEED = 5.9;
const BAZOOKA_BULLET_SPEED = 3.9;
const PISTOL_BULLET_SPEED = 5.1;
const SHOTGUN_BULLET_SPEED = 3.9;
const GRENADE_LAUNCHER_BULLET_SPEED = 2.4;

// zoom level
const ZOOM_SNIPER = 40;
const ZOOM_ASSAULT = 23;
const ZOOM_BAZOOKA = 12;
const ZOOM_MACHINE = 18;
const ZOOM_SHOTGUN = 15;
const ZOOM_GRENADE_LAUNCHER = 10;
const ZOOM_PISTOL = 13;

// shot types
const SHOT_TYPE_NORMAL = 1;
const SHOT_TYPE_SHOTGUN = 2;
const SHOT_TYPE_FLAMETHROWER = 3;

// bullet types P.S.: check hasParticleTrail in modTick before adding bullet types that requires the modTick too
const BULLET_TYPE_NORMAL = 1;
const BULLET_TYPE_NORMAL_EXPLOSIVE_ON_TOUCH = 2;
const BULLET_TYPE_NORMAL_EXPLOSIVE_ON_TIME = 3;
const BULLET_TYPE_TNT = 4;
const BULLET_TYPE_SNOWBALL = 5;
const BULLET_TYPE_INCENDIARY_SNOWBALL = 6;
const BULLET_TYPE_CUSTOM_ENTITY = 7;


// for new IDs: 3285-3299 (armors) / 3300-3319 (grenades) / 3320-3339 (other items) / 3340-3364 (ammo) / 3365 (info item) / 3366-3479 (guns) / 3480-3499 (addons tabs)

// addons tabs
const TABS_STARTING_ID = 3480;
const TABS_ENDING_ID = 3499;

// ammo
const AMMO_ASSAULT_RIFLE_ID = 3340;
const AMMO_SUB_MACHINE_ID = 3341;
const AMMO_LIGHT_MACHINE_ID = 3342;
const AMMO_SNIPER_RIFLE_ID = 3343;
const AMMO_SHOTGUN_ID = 3344;
const AMMO_MACHINE_PISTOL_ID = 3345;
const AMMO_HANDGUN_ID = 3346;
const AMMO_LAUNCHER_ID = 3347;
const AMMO_MINIGUN_ID = 3348;
const AMMO_ARROW_EXPLOSIVE_ID = 3349;

function createAmmoItems()
{
	Item.defineItem(AMMO_ASSAULT_RIFLE_ID, "ammoassault", 0, "Assault Rifle Ammo");
	Item.addShapedRecipe(AMMO_ASSAULT_RIFLE_ID, 1, 0, [
		" i ",
		" g ",
		"   "], ["i", 265, 0, "r", 331, 0, "g", 289, 0]); // i = iron; r = redstone; g = gunpowder;

	Item.defineItem(AMMO_SUB_MACHINE_ID, "ammosubmachine", 0, "Sub Machine Ammo");
	Item.addShapedRecipe(AMMO_SUB_MACHINE_ID, 1, 0, [
		" i ",
		" g ",
		"   "], ["i", 265, 0, "r", 331, 0, "g", 289, 0]); // i = iron; r = redstone; g = gunpowder;

	Item.defineItem(AMMO_LIGHT_MACHINE_ID, "ammolightmachine", 0, "Light Machine Ammo");
	Item.addShapedRecipe(AMMO_LIGHT_MACHINE_ID, 1, 0, [
		"i i",
		"g g",
		"   "], ["i", 265, 0, "r", 331, 0, "g", 289, 0]); // i = iron; r = redstone; g = gunpowder;

	Item.defineItem(AMMO_SNIPER_RIFLE_ID, "ammosniper", 0, "Sniper Rifle Ammo");
	Item.addShapedRecipe(AMMO_SNIPER_RIFLE_ID, 2, 0, [
		" i ",
		" g ",
		" i "], ["i", 265, 0, "r", 331, 0, "g", 289, 0]); // i = iron; r = redstone; g = gunpowder;

	Item.defineItem(AMMO_SHOTGUN_ID, "ammoshotgun", 0, "Shotgun Ammo");
	Item.addShapedRecipe(AMMO_SHOTGUN_ID, 2, 0, [
		"   ",
		" i ",
		"g g"], ["i", 265, 0, "r", 331, 0, "g", 289, 0]); // i = iron; r = redstone; g = gunpowder;

	Item.defineItem(AMMO_MACHINE_PISTOL_ID, "ammomachinepistol", 0, "Machine Pistol Ammo");
	Item.addShapedRecipe(AMMO_MACHINE_PISTOL_ID, 1, 0, [
		" i ",
		" g ",
		"   "], ["i", 265, 0, "r", 331, 0, "g", 289, 0]); // i = iron; r = redstone; g = gunpowder;

	Item.defineItem(AMMO_HANDGUN_ID, "ammohandgun", 0, "Handgun Ammo");
	Item.addShapedRecipe(AMMO_HANDGUN_ID, 1, 0, [
		"   ",
		" i ",
		"   "], ["i", 265, 0, "r", 331, 0, "g", 289, 0]); // i = iron; r = redstone; g = gunpowder;

	Item.defineItem(AMMO_LAUNCHER_ID, "ammolauncher", 0, "Launcher Ammo");
	Item.addShapedRecipe(AMMO_LAUNCHER_ID, 1, 0, [
		"g g",
		" g ",
		"g g"], ["i", 265, 0, "r", 331, 0, "g", 289, 0]); // i = iron; r = redstone; g = gunpowder;

	Item.defineItem(AMMO_MINIGUN_ID, "ammominigun", 0, "Minigun Ammo");
	Item.addShapedRecipe(AMMO_MINIGUN_ID, 1, 0, [
		"i i",
		"grg",
		"i i"], ["i", 265, 0, "r", 331, 0, "g", 289, 0]); // i = iron; r = redstone; g = gunpowder;

	Item.defineItem(AMMO_ARROW_EXPLOSIVE_ID, "ammoarrowexplosive", 0, "Explosive Arrow");
	Item.addShapedRecipe(AMMO_ARROW_EXPLOSIVE_ID, 1, 0, [
		" g ",
		" g ",
		" a "], ["a", 262, 0, "g", 289, 0]); // a = arrow; g = gunpowder;
}

// general items
const INFO_ITEM_ID = 3365;

const KNIFE_ID = 3320;
const KNIFE_MAX_DAMAGE = 32;
const KNIFE_SOUND_STAB = {
	startingFrom: 1,
	endingAt: 2,
	startText: "desnoguns/knife_stab",
	endText: ".mp3"
};
const KNIFE_MOB_DAMAGE = 20;

const RIOT_SHIELD_ID = 3323;
const RIOT_SHIELD_MAX_DAMAGE = 3072;
const RIOT_SHIELD_MOB_DAMAGE = 1;

var isParachuting = false;
const PARACHUTE_ID = 3321;
const PARACHUTE_MAX_DAMAGE = 10;

const MEDICAL_KIT_ID = 3322;
const MEDICAL_KIT_MAX_RESTORABLE_HEALTH = 50;

const BINOCULARS = {
	id: 3324,
	zoomLevel: 51,
	hasAimImageLayer: true,
};

const ZOOM_BINOCULARS = {
	id: 3325,
	zoomLevel: 51,
	hasAimImageLayer: true,
	hasManualZoom: true,
};

function createGeneralItems()
{
	Item.defineItem(INFO_ITEM_ID, "desnogunsinfo", 0, "DesnoGuns Info");
	Item.addShapedRecipe(INFO_ITEM_ID, 1, 0, [
		"   ",
		" w ",
		"   "], ["w", 17, 0]);
	Item.setCategory(INFO_ITEM_ID, ITEM_CATEGORY_TOOL);
	Player.addItemCreativeInv(INFO_ITEM_ID, 1);

	Item.defineItem(KNIFE_ID, "knife", 0, "Knife");
	Item.setMaxDamage(KNIFE_ID, KNIFE_MAX_DAMAGE);
	Item.addShapedRecipe(KNIFE_ID, 1, 0, [
		" i ",
		" i ",
		" i "], ["i", 265, 0]);
	Item.setVerticalRender(KNIFE_ID);
	Item.setCategory(KNIFE_ID, ITEM_CATEGORY_TOOL);
	Player.addItemCreativeInv(KNIFE_ID, 1);

	Item.defineItem(RIOT_SHIELD_ID, "riotshield", 0, "Riot Shield");
	Item.setMaxDamage(RIOT_SHIELD_ID, RIOT_SHIELD_MAX_DAMAGE);
	Item.addShapedRecipe(RIOT_SHIELD_ID, 1, 0, [
		" g ",
		" i ",
		" g "], ["i", 265, 0, "g", 102, 0]); // i = iron; g = glass pane;
	Item.setVerticalRender(RIOT_SHIELD_ID);
	Item.setCategory(RIOT_SHIELD_ID, ITEM_CATEGORY_TOOL);
	Player.addItemCreativeInv(RIOT_SHIELD_ID, 1);

	Item.defineItem(PARACHUTE_ID, "parachute", 0, "Parachute");
	Item.setMaxDamage(PARACHUTE_ID, PARACHUTE_MAX_DAMAGE);
	Item.addShapedRecipe(PARACHUTE_ID, 1, 0, [
		"www",
		"s s",
		" s "], ["s", 287, 0, "w", 35, 0]); // w = wool; s = string;
	Item.setCategory(PARACHUTE_ID, ITEM_CATEGORY_TOOL);
	Player.addItemCreativeInv(PARACHUTE_ID, 1);

	Item.defineItem(MEDICAL_KIT_ID, "medicalkit", 0, "Medical Kit");
	Item.setMaxDamage(MEDICAL_KIT_ID, MEDICAL_KIT_MAX_RESTORABLE_HEALTH);
	Item.addShapedRecipe(MEDICAL_KIT_ID, 1, 0, [
		" m ",
		"ama",
		" m "], ["a", 260, 0, "m", 40, 0]); // a = apple; m = mushroom;

	Item.defineItem(BINOCULARS.id, "binoculars", 0, "Binoculars");
	Item.addShapedRecipe(BINOCULARS.id, 1, 0, [
		"g g",
		"iii",
		"i i"], ["g", 20, 0, "i", 265, 0]); // g = glass; i = iron;
	Item.setCategory(BINOCULARS.id, ITEM_CATEGORY_TOOL);
	Player.addItemCreativeInv(BINOCULARS.id, 1);

	Item.defineItem(ZOOM_BINOCULARS.id, "zoombinoculars", 0, "Zoom Binoculars");
	Item.addShapedRecipe(ZOOM_BINOCULARS.id, 1, 0, [
		"g g",
		"iri",
		"i i"], ["g", 20, 0, "i", 265, 0, "r", 331, 0]); // g = glass; i = iron; r = redstone
	Item.setCategory(ZOOM_BINOCULARS.id, ITEM_CATEGORY_TOOL);
	Player.addItemCreativeInv(ZOOM_BINOCULARS.id, 1);
}

// grenades
const GRENADE = {
	id: 3300,
	grenadeSpeed: 2.1,
	grenadesExplosionRadius: 4,
	grenadesArray: [],
	accuracy: 4,
	delay: 4000
};

var infiniteGrenade = false;
const FRAGMENT = {
	id: 3301,
	grenadeSpeed: 2.1,
	grenadesExplosionRadius: 2,
	grenadesArray: [],
	fragmentArray: [],
	howManyFragments: 3,
	fragmentDelay: 1000,
	accuracy: 4,
	delay: 4000
};

const MOLOTOV = {
	id: 3302,
	grenadeSpeed: 1.5,
	grenadesExplosionDiameter: 3,
	explodeOnTouch: true,
	isWithFire: true,
	grenadesArray: [],
	accuracy: 4
};

const SMOKE = {
	id: 3303,
	grenadeSpeed: 2.1,
	grenadesArray: [],
	accuracy: 4,
	delay: 10000,
	smokeParticle: 4
};

function createGrenadesItems()
{
	Item.defineItem(GRENADE.id, "grenade", 0, "Grenade");
	Item.addShapedRecipe(GRENADE.id, 1, 0, [
		"i i",
		" g ",
		"i i"], ["i", 265, 0, "r", 331, 0, "g", 289, 0]); // i = iron; r = redstone; g = gunpowder;
	Item.setCategory(GRENADE.id, ITEM_CATEGORY_TOOL);
	Player.addItemCreativeInv(GRENADE.id, 1);

	Item.defineItem(FRAGMENT.id, "grenadefragment", 0, "Fragment Grenade");
	Item.addShapedRecipe(FRAGMENT.id, 2, 0, [
		"g g",
		"   ",
		"g g"], ["g", GRENADE.id, 0]);
	Item.setCategory(FRAGMENT.id, ITEM_CATEGORY_TOOL);
	Player.addItemCreativeInv(FRAGMENT.id, 1);

	Item.defineItem(MOLOTOV.id, "molotov", 0, "Molotov");
	Item.addShapedRecipe(MOLOTOV.id, 1, 0, [
		"ggg",
		"gfg",
		"ggg"], ["f", 289, 0, "g", 102, 0]); // g = glass pane; f = flint and steel;
	Item.setCategory(MOLOTOV.id, ITEM_CATEGORY_TOOL);
	Player.addItemCreativeInv(MOLOTOV.id, 1);

	Item.defineItem(SMOKE.id, "grenadesmoke", 0, "Smoke Grenade");
	Item.addShapedRecipe(SMOKE.id, 1, 0, [
		" i ",
		" z ",
		" s "], ["z", 353, 0, "s", 12, 0, "i", 265, 0]); // z = sugar; s = sand; i = iron;
	Item.setCategory(SMOKE.id, ITEM_CATEGORY_TOOL);
	Player.addItemCreativeInv(SMOKE.id, 1);
}

// armors
const JUGGERNAUT_HELMET_ID = 3285;
const JUGGERNAUT_BODY_ID = 3286;
const JUGGERNAUT_PANTS_ID = 3287;
const JUGGERNAUT_BOOTS_ID = 3288;

function createArmorItems()
{
	Item.newArmor(JUGGERNAUT_HELMET_ID, "juggernauthelmet", 0, "Juggernaut Helmet", "armor/juggernaut_1.png", 2, 249, ArmorType.helmet);
	Item.addShapedRecipe(JUGGERNAUT_HELMET_ID, 1, 0, [
		"cic",
		"c c",
		"   "], ["c", 351, 2, "i", 265, 0]);
	Player.addItemCreativeInv(JUGGERNAUT_HELMET_ID, 1);

	Item.newArmor(JUGGERNAUT_BODY_ID, "juggernautchestplate", 0, "Juggernaut Body", "armor/juggernaut_1.png", 7, 362, ArmorType.chestplate);
	Item.addShapedRecipe(JUGGERNAUT_BODY_ID, 1, 0, [
		"i i",
		"cic",
		"cic"], ["c", 351, 2, "i", 265, 0]);
	Player.addItemCreativeInv(JUGGERNAUT_BODY_ID, 1);

	Item.newArmor(JUGGERNAUT_PANTS_ID, "juggernautleggings", 0, "Juggernaut Pants", "armor/juggernaut_1.png", 5, 339, ArmorType.leggings);
	Item.addShapedRecipe(JUGGERNAUT_PANTS_ID, 1, 0, [
		"ccc",
		"i i",
		"i i"], ["c", 351, 2, "i", 265, 0]);
	Player.addItemCreativeInv(JUGGERNAUT_PANTS_ID, 1);

	Item.newArmor(JUGGERNAUT_BOOTS_ID, "juggernautboots", 0, "Juggernaut Boots", "armor/juggernaut_2.png", 2, 294, ArmorType.boots);
	Item.addShapedRecipe(JUGGERNAUT_BOOTS_ID, 1, 0, [
		"   ",
		"c c",
		"i i"], ["c", 351, 2, "i", 265, 0]);
	Player.addItemCreativeInv(JUGGERNAUT_BOOTS_ID, 1);
}


// all possible gun variables
/*
	const GUN = {
		gunType: int,
		buttonType: int, // button type
		name: String,
		id: int,
		fireRate: int,
		recoil: int,
		bulletSpeed: float,
		zoomLevel: int,
		accuracy: int,
		hasAimImageLayer: boolean, // show image when aiming
		texture: String,
		textureNumber: String, // if 0 can be omitted
		ammo: int, // number of bullets in the ammo
		ammunitionID: int,
		smoke: int, // number of particles when shooting, if 0 can be omitted
		recipe: CRAFTING_SNIPER_RIFLE // crafting recipe

		// BEHAVIOR
		isFlamethrower: boolean,

		isShotgun: boolean,
		shotgunBullets: int,
		shotgunDegreesSpread: float,
		shotgunWait: int,

		hasIceBullets: boolean,

		hasExplosiveBulletsOnTouch: boolean, // explode when the bullet touch the ground
		hasExplosiveBulletsOnTime: boolean, // explode after a delay: bulletExplosionDelay
		bulletsExplosionDelay: int, // ms of delay, REQUIRED when using hasExplosiveBulletsOnTime
		bulletsExplosionRadius: int, // REQUIRED when using explosive bullets
		hasExplosiveBulletsSmokeTrail: boolean,
		bulletsArray: [], // array that contains all the explosive bullets, REQUIRED when using explosive bullets

		isGrenadeLauncher: boolean,
		grenadesArray: [], // array that contains all the grenades, REQUIRED when using isGrenadeLauncher
		hasIncendiaryBullets: boolean,

		// SOUNDS
		hasntShootingSound: boolean,
		sound: String, // sound when shooting
		reloadSound: String, // sound when reloading

		// SOUNDS for type BUTTON_TYPE_ON_TOUCH_WITH_WAIT
		hasRandomWarmupSound: boolean, // true if there are multiple possible warm-up sounds
		warmupSound: { // this form must be used only if hasRandomWarmupSound false, this random structure creates a string like this startText + number + endText
			startingFrom: int,
			endingAt: int,
			startText: String,
			endText: String
		},
		warmupSound: String,
		spinSound: String,
		hasntCooldownSound: boolean,
		cooldownSound: String,
	};
*/

// pro weapons
const AA12 = {
	weaponType: "gun",
	name: "AA-12",
	gunType: GUN_TYPE_SHOTGUN,
	buttonType: BUTTON_TYPE_ON_TOUCH,
	id: 509,
	fireRate: 5,
	recoil: 10,
	bulletSpeed: SHOTGUN_BULLET_SPEED + 0.9,
	accuracy: 10,
	zoomLevel: ZOOM_SHOTGUN,
	texture: "aa12",
	ammo: 8,
	smoke: 1,
	// BEHAVIOR
	shotType: SHOT_TYPE_SHOTGUN,
	shotgunBullets: 6,
	shotgunDegreesSpread: 3,
	bulletType: BULLET_TYPE_NORMAL,
	// SOUNDS
	sound: "desnoguns/AA-12Shoot.ogg",
	reloadSound: "desnoguns/reload/PPSHReload.ogg",
};

const INCENDIARY_GL = {
	weaponType: "gun",
	name: "Incendiary Grenade Launcher",
	gunType: GUN_TYPE_LAUNCHER,
	buttonType: BUTTON_TYPE_ON_CLICK,
	id: 510,
	fireRate: 5,
	recoil: 10,
	bulletSpeed: GRENADE_LAUNCHER_BULLET_SPEED - 0.6,
	accuracy: 15,
	zoomLevel: ZOOM_GRENADE_LAUNCHER,
	texture: "glincendiary",
	ammo: 6,
	smoke: 0,
	// BEHAVIOR
	shotType: SHOT_TYPE_NORMAL,
	hasParticleTrail: true,
	particleTrailDistance: 99,
	particleTrailId: ParticleType.flame,
	bulletType: BULLET_TYPE_INCENDIARY_SNOWBALL,
	grenadesExplosionDiameter: 4,
	// SOUNDS
	sound: "desnoguns/GrenadeLauncherShoot.ogg",
	reloadSound: "desnoguns/reload/GL6Reload.ogg",
};

const MSR = {
	weaponType: "gun",
	name: "MSR",
	gunType: GUN_TYPE_SNIPER_RIFLE,
	buttonType: BUTTON_TYPE_ON_CLICK,
	id: 3369,
	fireRate: 12,
	recoil: 22,
	bulletSpeed: SNIPER_BULLET_SPEED,
	zoomLevel: ZOOM_SNIPER,
	accuracy: 2,
	hasAimImageLayer: true,
	hasManualZoom: true,
	texture: "msr",
	ammo: 5,
	smoke: 1,
	// BEHAVIOR
	shotType: SHOT_TYPE_NORMAL,
	bulletType: BULLET_TYPE_NORMAL,
	// SOUNDS
	sound: "desnoguns/MSRShoot.mp3",
	reloadSound: "desnoguns/reload/BARReload.ogg",
};

// free weapons
const MAGNUM44 = {
	weaponType: "gun",
	name: ".44 Magnum",
	gunType: GUN_TYPE_HANDGUN,
	buttonType: BUTTON_TYPE_ON_CLICK,
	id: 3366,
	fireRate: 4,
	recoil: 20,
	bulletSpeed: SNIPER_BULLET_SPEED /* one shot one kill, yeah */ ,
	accuracy: 6,
	zoomLevel: ZOOM_PISTOL,
	texture: "44magnum",
	ammo: 6,
	smoke: 1,
	// BEHAVIOR
	shotType: SHOT_TYPE_NORMAL,
	bulletType: BULLET_TYPE_NORMAL,
	// SOUNDS
	sound: "desnoguns/44Magnum.mp3",
	reloadSound: "desnoguns/reload/GL6Reload.ogg",
};

const AK47 = {
	weaponType: "gun",
	name: "AK47",
	gunType: GUN_TYPE_ASSAULT_RIFLE,
	buttonType: BUTTON_TYPE_ON_TOUCH,
	id: 3370,
	fireRate: 3,
	recoil: 3,
	bulletSpeed: ASSAULT_BULLET_SPEED,
	accuracy: 5,
	zoomLevel: ZOOM_ASSAULT,
	texture: "ak47",
	ammo: 30,
	smoke: 1,
	// BEHAVIOR
	shotType: SHOT_TYPE_NORMAL,
	bulletType: BULLET_TYPE_NORMAL,
	// SOUNDS
	sound: "desnoguns/AK47Shoot.ogg",
	reloadSound: "desnoguns/reload/MP44Reload.ogg",
};

const AK74 = {
	weaponType: "gun",
	name: "AK74",
	gunType: GUN_TYPE_ASSAULT_RIFLE,
	buttonType: BUTTON_TYPE_ON_TOUCH,
	id: 3371,
	fireRate: 3,
	recoil: 3,
	bulletSpeed: ASSAULT_BULLET_SPEED,
	accuracy: 4,
	zoomLevel: ZOOM_ASSAULT,
	texture: "ak74",
	ammo: 30,
	smoke: 1,
	// BEHAVIOR
	shotType: SHOT_TYPE_NORMAL,
	bulletType: BULLET_TYPE_NORMAL,
	// SOUNDS
	sound: "desnoguns/AK74Shoot.ogg",
	reloadSound: "desnoguns/reload/MP40Reload.ogg",
};

const AT4 = {
	weaponType: "gun",
	name: "AT4",
	gunType: GUN_TYPE_LAUNCHER,
	buttonType: BUTTON_TYPE_ON_CLICK,
	id: 3372,
	fireRate: 10,
	recoil: 10,
	bulletSpeed: BAZOOKA_BULLET_SPEED,
	accuracy: 5,
	zoomLevel: ZOOM_BAZOOKA,
	texture: "at4",
	ammo: 1,
	smoke: 4,
	// BEHAVIOR
	shotType: SHOT_TYPE_NORMAL,
	hasParticleTrail: true,
	particleTrailDistance: 3,
	particleTrailId: 4,
	bulletType: BULLET_TYPE_NORMAL_EXPLOSIVE_ON_TOUCH,
	bulletsExplosionRadius: 4,
	// SOUNDS
	sound: "desnoguns/AT4_and_M72LAW_and_Panzerfaust3Shoot.ogg",
	reloadSound: "desnoguns/reload/BazookaReload.mp3",
};

const AUG = {
	weaponType: "gun",
	name: "AUG",
	gunType: GUN_TYPE_ASSAULT_RIFLE,
	buttonType: BUTTON_TYPE_ON_TOUCH,
	id: 3373,
	fireRate: 3,
	recoil: 2.5,
	bulletSpeed: 6.8,
	accuracy: 3,
	zoomLevel: ZOOM_ASSAULT,
	texture: "aug",
	ammo: 42,
	smoke: 1,
	// BEHAVIOR
	shotType: SHOT_TYPE_NORMAL,
	bulletType: BULLET_TYPE_NORMAL,
	// SOUNDS
	sound: "desnoguns/FNSCAR_and_AUG_and_MTARShoot.ogg",
	reloadSound: "desnoguns/reload/MP44Reload.ogg",
};

const BARRETT_EXPLOSIVE = {
	weaponType: "gun",
	name: "Barrett Explosive",
	gunType: GUN_TYPE_SNIPER_RIFLE,
	buttonType: BUTTON_TYPE_ON_CLICK,
	id: 464,
	fireRate: 12,
	recoil: 25,
	bulletSpeed: SNIPER_BULLET_SPEED,
	zoomLevel: ZOOM_SNIPER,
	accuracy: 3,
	hasAimImageLayer: true,
	texture: "barrettexplosive",
	ammo: 10,
	smoke: 2,
	// BEHAVIOR
	shotType: SHOT_TYPE_NORMAL,
	bulletType: BULLET_TYPE_NORMAL_EXPLOSIVE_ON_TOUCH,
	bulletsExplosionRadius: 2,
	// SOUNDS
	sound: "desnoguns/BarrettShoot.ogg",
	reloadSound: "desnoguns/reload/BARReload.ogg",
};

const BARRETT = {
	weaponType: "gun",
	name: "Barrett",
	gunType: GUN_TYPE_SNIPER_RIFLE,
	buttonType: BUTTON_TYPE_ON_CLICK,
	id: 465,
	fireRate: 12,
	recoil: 25,
	bulletSpeed: SNIPER_BULLET_SPEED,
	zoomLevel: ZOOM_SNIPER,
	accuracy: 2,
	hasAimImageLayer: true,
	texture: "barrett",
	ammo: 10,
	smoke: 2,
	// BEHAVIOR
	shotType: SHOT_TYPE_NORMAL,
	bulletType: BULLET_TYPE_NORMAL,
	// SOUNDS
	sound: "desnoguns/BarrettShoot.ogg",
	reloadSound: "desnoguns/reload/BARReload.ogg",
};

const BIZON = {
	weaponType: "gun",
	name: "Bizon",
	gunType: GUN_TYPE_SUB_MACHINE,
	buttonType: BUTTON_TYPE_ON_TOUCH,
	id: 3374,
	fireRate: 2,
	recoil: 3,
	bulletSpeed: ASSAULT_BULLET_SPEED,
	accuracy: 3,
	zoomLevel: ZOOM_MACHINE,
	texture: "bizon",
	ammo: 53,
	smoke: 1,
	// BEHAVIOR
	shotType: SHOT_TYPE_NORMAL,
	bulletType: BULLET_TYPE_NORMAL,
	// SOUNDS
	sound: "desnoguns/P90_and_Bizon_and_G3Shoot_and_Minigun.ogg",
	reloadSound: "desnoguns/reload/MP40Reload.ogg",
};

const CROSSBOW_EXPLOSIVE = {
	weaponType: "gun",
	name: "Crossbow Explosive",
	gunType: GUN_TYPE_LAUNCHER,
	buttonType: BUTTON_TYPE_ON_CLICK,
	id: 3367,
	fireRate: 14,
	recoil: 11,
	bulletSpeed: ASSAULT_BULLET_SPEED,
	zoomLevel: ZOOM_ASSAULT,
	accuracy: 5,
	hasAimImageLayer: true,
	texture: "crossbowexplosive",
	ammo: 1,
	ammunitionID: AMMO_ARROW_EXPLOSIVE_ID,
	smoke: 0,
	recipeShape: [
		" is",
		"ers",
		" is"],
	recipeDescription: ["i", 265, 0, "r", 331, 0, "s", 287 /*string*/, 0, "e", AMMO_ARROW_EXPLOSIVE_ID, 0],
	// BEHAVIOR
	shotType: SHOT_TYPE_NORMAL,
	bulletType: BULLET_TYPE_NORMAL_EXPLOSIVE_ON_TIME,
	bulletsExplosionDelay: 3350,
	bulletsExplosionRadius: 4,
	// SOUNDS
	sound: "desnoguns/CrossbowShoot.wav",
	reloadSound: "desnoguns/reload/CrossbowReload.wav",
};

const CROSSBOW = {
	weaponType: "gun",
	name: "Crossbow",
	gunType: GUN_TYPE_LAUNCHER,
	buttonType: BUTTON_TYPE_ON_CLICK,
	id: 3368,
	fireRate: 14,
	recoil: 11,
	bulletSpeed: ASSAULT_BULLET_SPEED,
	zoomLevel: ZOOM_ASSAULT,
	accuracy: 5,
	hasAimImageLayer: true,
	texture: "crossbow",
	ammo: 1,
	ammunitionID: 262, // 262 = arrow
	smoke: 0,
	recipeShape: [
		" is",
		"ars",
		" is"],
	recipeDescription: ["i", 265, 0, "r", 331, 0, "s", 287 /*string*/, 0, "a", 262 /*arrow*/, 0],
	// BEHAVIOR
	shotType: SHOT_TYPE_NORMAL,
	bulletType: BULLET_TYPE_NORMAL,
	// SOUNDS
	sound: "desnoguns/CrossbowShoot.wav",
	reloadSound: "desnoguns/reload/CrossbowReload.wav",
};

const DESERT_EAGLE = {
	weaponType: "gun",
	name: "Desert Eagle",
	gunType: GUN_TYPE_HANDGUN,
	buttonType: BUTTON_TYPE_ON_CLICK,
	id: 467,
	fireRate: 1,
	recoil: 4,
	bulletSpeed: PISTOL_BULLET_SPEED,
	accuracy: 6,
	zoomLevel: ZOOM_PISTOL,
	texture: "deserteagle",
	ammo: 7,
	smoke: 0,
	// BEHAVIOR
	shotType: SHOT_TYPE_NORMAL,
	bulletType: BULLET_TYPE_NORMAL,
	// SOUNDS
	sound: "desnoguns/DesertEagleShoot.ogg",
	reloadSound: "desnoguns/reload/LugerReload.ogg",
};

const DESERT_EAGLE_GOLD = {
	weaponType: "gun",
	name: "Desert Eagle Gold",
	gunType: GUN_TYPE_HANDGUN,
	buttonType: BUTTON_TYPE_ON_CLICK,
	id: 468,
	fireRate: 1,
	recoil: 4,
	bulletSpeed: PISTOL_BULLET_SPEED,
	accuracy: 5,
	zoomLevel: ZOOM_PISTOL,
	texture: "deserteaglegold",
	ammo: 7,
	smoke: 0,
	// BEHAVIOR
	shotType: SHOT_TYPE_NORMAL,
	bulletType: BULLET_TYPE_NORMAL,
	// SOUNDS
	sound: "desnoguns/DesertEagleShoot.ogg",
	reloadSound: "desnoguns/reload/LugerReload.ogg",
};

const DRAGUNOV = {
	weaponType: "gun",
	name: "Dragunov",
	gunType: GUN_TYPE_SNIPER_RIFLE,
	buttonType: BUTTON_TYPE_ON_CLICK,
	id: 469,
	fireRate: 8,
	recoil: 23,
	bulletSpeed: SNIPER_BULLET_SPEED,
	zoomLevel: ZOOM_SNIPER,
	accuracy: 2,
	hasAimImageLayer: true,
	texture: "dragunov",
	ammo: 10,
	smoke: 2,
	// BEHAVIOR
	shotType: SHOT_TYPE_NORMAL,
	bulletType: BULLET_TYPE_NORMAL,
	// SOUNDS
	sound: "desnoguns/DragunovShoot.ogg",
	reloadSound: "desnoguns/reload/BARReload.ogg",
};

const FLAMETHROWER = {
	weaponType: "gun",
	name: "Flamethrower",
	gunType: GUN_TYPE_MINIGUN,
	buttonType: BUTTON_TYPE_ON_TOUCH_WITH_WAIT,
	id: 508,
	fireRate: 1,
	recoil: 0.5,
	accuracy: 5.5,
	zoomLevel: ZOOM_GRENADE_LAUNCHER,
	texture: "flamethrower",
	ammo: 750,
	smoke: 3,
	// BEHAVIOR
	shotType: SHOT_TYPE_FLAMETHROWER,
	// SOUNDS
	hasRandomWarmupSound: true,
	warmupSound: {
		startingFrom: 1,
		endingAt: 3,
		startText: "desnoguns/ignite_flamethrower",
		endText: ".ogg"
	},
	hasntShootingSound: true,
	spinSound: "desnoguns/flamethrower.mp3",
	hasntCooldownSound: true,
	reloadSound: "desnoguns/reload/BrowningReload.ogg",
};

const FNSCAR = {
	weaponType: "gun",
	name: "FNSCAR",
	gunType: GUN_TYPE_ASSAULT_RIFLE,
	buttonType: BUTTON_TYPE_ON_TOUCH,
	id: 470,
	fireRate: 3,
	recoil: 1.5,
	bulletSpeed: ASSAULT_BULLET_SPEED,
	accuracy: 3,
	zoomLevel: ZOOM_ASSAULT,
	texture: "fnscar",
	ammo: 20,
	smoke: 1,
	// BEHAVIOR
	shotType: SHOT_TYPE_NORMAL,
	bulletType: BULLET_TYPE_NORMAL,
	// SOUNDS
	sound: "desnoguns/FNSCAR_and_AUG_and_MTARShoot.ogg",
	reloadSound: "desnoguns/reload/MP44Reload.ogg",
};

const G3 = {
	weaponType: "gun",
	name: "G3",
	gunType: GUN_TYPE_ASSAULT_RIFLE,
	buttonType: BUTTON_TYPE_ON_TOUCH,
	id: 471,
	fireRate: 2,
	recoil: 2,
	bulletSpeed: ASSAULT_BULLET_SPEED,
	accuracy: 2.5,
	zoomLevel: ZOOM_ASSAULT,
	texture: "g3",
	ammo: 20,
	smoke: 1,
	// BEHAVIOR
	shotType: SHOT_TYPE_NORMAL,
	bulletType: BULLET_TYPE_NORMAL,
	// SOUNDS
	sound: "desnoguns/P90_and_Bizon_and_G3Shoot_and_Minigun.ogg",
	reloadSound: "desnoguns/reload/ThompsonReload.ogg",
};

const G36 = {
	weaponType: "gun",
	name: "G36",
	gunType: GUN_TYPE_ASSAULT_RIFLE,
	buttonType: BUTTON_TYPE_ON_TOUCH,
	id: 472,
	fireRate: 3,
	recoil: 2,
	bulletSpeed: ASSAULT_BULLET_SPEED,
	accuracy: 2.5,
	zoomLevel: ZOOM_ASSAULT,
	texture: "g36",
	ammo: 30,
	smoke: 1,
	// BEHAVIOR
	shotType: SHOT_TYPE_NORMAL,
	bulletType: BULLET_TYPE_NORMAL,
	// SOUNDS
	sound: "desnoguns/G36Shoot.ogg",
	reloadSound: "desnoguns/reload/MP40Reload.ogg",
};

const GL1 = {
	weaponType: "gun",
	name: "GL1",
	gunType: GUN_TYPE_LAUNCHER,
	buttonType: BUTTON_TYPE_ON_CLICK,
	id: 473,
	fireRate: 10,
	recoil: 12,
	bulletSpeed: GRENADE_LAUNCHER_BULLET_SPEED,
	accuracy: 10,
	zoomLevel: ZOOM_GRENADE_LAUNCHER,
	texture: "gl1",
	ammo: 1,
	smoke: 0,
	// BEHAVIOR
	shotType: SHOT_TYPE_NORMAL,
	bulletType: BULLET_TYPE_TNT,
	// SOUNDS
	sound: "desnoguns/GrenadeLauncherShoot.ogg",
	reloadSound: "desnoguns/reload/GrenadeLauncherReload.ogg",
};

const GL6 = {
	weaponType: "gun",
	name: "GL6",
	gunType: GUN_TYPE_LAUNCHER,
	buttonType: BUTTON_TYPE_ON_CLICK,
	id: 474,
	fireRate: 1,
	recoil: 8,
	bulletSpeed: GRENADE_LAUNCHER_BULLET_SPEED,
	accuracy: 15,
	zoomLevel: ZOOM_GRENADE_LAUNCHER,
	texture: "gl6",
	ammo: 6,
	smoke: 0,
	// BEHAVIOR
	shotType: SHOT_TYPE_NORMAL,
	bulletType: BULLET_TYPE_TNT,
	// SOUNDS
	sound: "desnoguns/GrenadeLauncherShoot.ogg",
	reloadSound: "desnoguns/reload/GL6Reload.ogg",
};

const GLOCK = {
	weaponType: "gun",
	name: "Glock",
	gunType: GUN_TYPE_MACHINE_PISTOL,
	buttonType: BUTTON_TYPE_ON_TOUCH,
	id: 475,
	fireRate: 3,
	recoil: 2,
	bulletSpeed: PISTOL_BULLET_SPEED,
	accuracy: 2.5,
	zoomLevel: ZOOM_PISTOL,
	texture: "glock",
	ammo: 31,
	smoke: 1,
	// BEHAVIOR
	shotType: SHOT_TYPE_NORMAL,
	bulletType: BULLET_TYPE_NORMAL,
	// SOUNDS
	sound: "desnoguns/GlockShoot.ogg",
	reloadSound: "desnoguns/reload/ColtReload.ogg",
};

const L86 = {
	weaponType: "gun",
	name: "L86",
	gunType: GUN_TYPE_LIGHT_MACHINE,
	buttonType: BUTTON_TYPE_ON_TOUCH,
	id: 476,
	fireRate: 3,
	recoil: 5,
	bulletSpeed: ASSAULT_BULLET_SPEED,
	accuracy: 4,
	zoomLevel: ZOOM_MACHINE,
	texture: "l86",
	ammo: 100,
	smoke: 2,
	// BEHAVIOR
	shotType: SHOT_TYPE_NORMAL,
	bulletType: BULLET_TYPE_NORMAL,
	// SOUNDS
	sound: "desnoguns/M249_and_L86Shoot.ogg",
	reloadSound: "desnoguns/reload/BrowningReload.ogg",
};

const L96 = {
	weaponType: "gun",
	name: "L96",
	gunType: GUN_TYPE_SNIPER_RIFLE,
	buttonType: BUTTON_TYPE_ON_CLICK,
	id: 477,
	fireRate: 26,
	recoil: 14,
	bulletSpeed: SNIPER_BULLET_SPEED,
	zoomLevel: ZOOM_SNIPER,
	accuracy: 2,
	hasAimImageLayer: true,
	texture: "l96",
	ammo: 10,
	smoke: 1,
	// BEHAVIOR
	shotType: SHOT_TYPE_NORMAL,
	bulletType: BULLET_TYPE_NORMAL,
	// SOUNDS
	sound: "desnoguns/L96Shoot.ogg",
	reloadSound: "desnoguns/reload/BARReload.ogg",
};

const M9 = {
	weaponType: "gun",
	name: "M9",
	gunType: GUN_TYPE_HANDGUN,
	buttonType: BUTTON_TYPE_ON_CLICK,
	id: 478,
	fireRate: 1,
	recoil: 1,
	bulletSpeed: PISTOL_BULLET_SPEED,
	accuracy: 8,
	zoomLevel: ZOOM_PISTOL,
	texture: "m9",
	ammo: 15,
	smoke: 0,
	// BEHAVIOR
	shotType: SHOT_TYPE_NORMAL,
	bulletType: BULLET_TYPE_NORMAL,
	// SOUNDS
	sound: "desnoguns/M9Shoot.ogg",
	reloadSound: "desnoguns/reload/ColtReload.ogg",
};

const M14 = {
	weaponType: "gun",
	name: "M14",
	gunType: GUN_TYPE_ASSAULT_RIFLE,
	buttonType: BUTTON_TYPE_ON_CLICK,
	id: 479,
	fireRate: 1,
	recoil: 4,
	bulletSpeed: ASSAULT_BULLET_SPEED,
	zoomLevel: ZOOM_ASSAULT,
	accuracy: 2,
	texture: "m14",
	ammo: 20,
	smoke: 0,
	// BEHAVIOR
	shotType: SHOT_TYPE_NORMAL,
	bulletType: BULLET_TYPE_NORMAL,
	// SOUNDS
	sound: "desnoguns/M14_and_M16A4Shoot.ogg",
	reloadSound: "desnoguns/reload/BARReload.ogg",
};

const M16A4 = {
	weaponType: "gun",
	name: "M16A4",
	gunType: GUN_TYPE_ASSAULT_RIFLE,
	buttonType: BUTTON_TYPE_ON_TOUCH,
	id: 480,
	fireRate: 3,
	recoil: 2,
	bulletSpeed: ASSAULT_BULLET_SPEED,
	accuracy: 2.5,
	zoomLevel: ZOOM_ASSAULT,
	texture: "m16a4",
	ammo: 30,
	smoke: 1,
	// BEHAVIOR
	shotType: SHOT_TYPE_NORMAL,
	bulletType: BULLET_TYPE_NORMAL,
	// SOUNDS
	sound: "desnoguns/M14_and_M16A4Shoot.ogg",
	reloadSound: "desnoguns/reload/MP44Reload.ogg",
};

const M21 = {
	weaponType: "gun",
	name: "M21",
	gunType: GUN_TYPE_SNIPER_RIFLE,
	buttonType: BUTTON_TYPE_ON_CLICK,
	id: 481,
	fireRate: 10,
	recoil: 18,
	bulletSpeed: SNIPER_BULLET_SPEED,
	zoomLevel: ZOOM_SNIPER,
	accuracy: 2,
	hasAimImageLayer: true,
	texture: "m21",
	ammo: 10,
	smoke: 1,
	// BEHAVIOR
	shotType: SHOT_TYPE_NORMAL,
	bulletType: BULLET_TYPE_NORMAL,
	// SOUNDS
	sound: "desnoguns/M21Shoot.ogg",
	reloadSound: "desnoguns/reload/BARReload.ogg",
};

const M40A3_ICE = {
	weaponType: "gun",
	name: "M40A3 Ice",
	gunType: GUN_TYPE_SNIPER_RIFLE,
	buttonType: BUTTON_TYPE_ON_CLICK,
	id: 482,
	fireRate: 10,
	recoil: 23,
	bulletSpeed: SNIPER_BULLET_SPEED,
	zoomLevel: ZOOM_SNIPER,
	accuracy: 2,
	hasAimImageLayer: true,
	texture: "m40a3ice",
	ammo: 5,
	smoke: 1,
	// BEHAVIOR
	shotType: SHOT_TYPE_NORMAL,
	bulletType: BULLET_TYPE_NORMAL,
	// SOUNDS
	sound: "desnoguns/R700_and_M40A3Shoot.ogg",
	reloadSound: "desnoguns/reload/SpringfieldReload.ogg",
};

const M40A3 = {
	weaponType: "gun",
	name: "M40A3",
	gunType: GUN_TYPE_SNIPER_RIFLE,
	buttonType: BUTTON_TYPE_ON_CLICK,
	id: 483,
	fireRate: 10,
	recoil: 23,
	bulletSpeed: SNIPER_BULLET_SPEED,
	zoomLevel: ZOOM_SNIPER,
	accuracy: 2,
	hasAimImageLayer: true,
	texture: "m40a3",
	ammo: 5,
	smoke: 1,
	// BEHAVIOR
	shotType: SHOT_TYPE_NORMAL,
	bulletType: BULLET_TYPE_NORMAL,
	// SOUNDS
	sound: "desnoguns/R700_and_M40A3Shoot.ogg",
	reloadSound: "desnoguns/reload/SpringfieldReload.ogg",
};

const M60E4 = {
	weaponType: "gun",
	name: "M60E4",
	gunType: GUN_TYPE_LIGHT_MACHINE,
	buttonType: BUTTON_TYPE_ON_TOUCH,
	id: 484,
	fireRate: 3,
	recoil: 6,
	bulletSpeed: ASSAULT_BULLET_SPEED,
	accuracy: 3.5,
	zoomLevel: ZOOM_MACHINE,
	texture: "m60e4",
	ammo: 100,
	smoke: 2,
	// BEHAVIOR
	shotType: SHOT_TYPE_NORMAL,
	bulletType: BULLET_TYPE_NORMAL,
	// SOUNDS
	sound: "desnoguns/RPD_and_M60E4_and_RPKShoot.ogg",
	reloadSound: "desnoguns/reload/BrowningReload.ogg",
};

const M72LAW = {
	weaponType: "gun",
	name: "M72LAW",
	gunType: GUN_TYPE_LAUNCHER,
	buttonType: BUTTON_TYPE_ON_CLICK,
	id: 485,
	fireRate: 10,
	recoil: 13,
	bulletSpeed: BAZOOKA_BULLET_SPEED,
	accuracy: 5,
	zoomLevel: ZOOM_BAZOOKA,
	texture: "m72law",
	ammo: 1,
	smoke: 4,
	// BEHAVIOR
	shotType: SHOT_TYPE_NORMAL,
	hasParticleTrail: true,
	particleTrailDistance: 3,
	particleTrailId: 4,
	bulletType: BULLET_TYPE_NORMAL_EXPLOSIVE_ON_TOUCH,
	bulletsExplosionRadius: 4,
	// SOUNDS
	sound: "desnoguns/AT4_and_M72LAW_and_Panzerfaust3Shoot.ogg",
	reloadSound: "desnoguns/reload/BazookaReload.mp3",
};

const M249 = {
	weaponType: "gun",
	name: "M249",
	gunType: GUN_TYPE_LIGHT_MACHINE,
	buttonType: BUTTON_TYPE_ON_TOUCH,
	id: 486,
	fireRate: 3,
	recoil: 6,
	bulletSpeed: ASSAULT_BULLET_SPEED,
	accuracy: 3.5,
	zoomLevel: ZOOM_MACHINE,
	texture: "m249",
	ammo: 100,
	smoke: 2,
	// BEHAVIOR
	shotType: SHOT_TYPE_NORMAL,
	bulletType: BULLET_TYPE_NORMAL,
	// SOUNDS
	sound: "desnoguns/M249_and_L86Shoot.ogg",
	reloadSound: "desnoguns/reload/BrowningReload.ogg",
};

const M1014 = {
	weaponType: "gun",
	name: "M1014",
	gunType: GUN_TYPE_SHOTGUN,
	buttonType: BUTTON_TYPE_ON_CLICK,
	id: 487,
	fireRate: 18,
	recoil: 10,
	bulletSpeed: SHOTGUN_BULLET_SPEED,
	accuracy: 12,
	zoomLevel: ZOOM_SHOTGUN,
	texture: "m1014",
	ammo: 4,
	smoke: 1,
	// BEHAVIOR
	shotType: SHOT_TYPE_SHOTGUN,
	shotgunBullets: 8,
	shotgunDegreesSpread: 3,
	bulletType: BULLET_TYPE_NORMAL,
	// SOUNDS
	sound: "desnoguns/M1014Shoot.ogg",
	reloadSound: "desnoguns/reload/M1014Reload.ogg",
};

const M1887 = {
	weaponType: "gun",
	name: "Model 1887",
	gunType: GUN_TYPE_SHOTGUN,
	buttonType: BUTTON_TYPE_ON_CLICK,
	id: 488,
	fireRate: 20,
	recoil: 18,
	bulletSpeed: SHOTGUN_BULLET_SPEED,
	accuracy: 15,
	zoomLevel: ZOOM_SHOTGUN,
	texture: "m1887",
	ammo: 5,
	smoke: 1,
	// BEHAVIOR
	shotType: SHOT_TYPE_SHOTGUN,
	shotgunBullets: 8,
	shotgunDegreesSpread: 5,
	bulletType: BULLET_TYPE_NORMAL,
	// SOUNDS
	sound: "desnoguns/M1887Shoot.ogg",
	reloadSound: "desnoguns/reload/M1887Reload.ogg",
};

const MAKAROV = {
	weaponType: "gun",
	name: "Makarov",
	gunType: GUN_TYPE_HANDGUN,
	buttonType: BUTTON_TYPE_ON_CLICK,
	id: 489,
	fireRate: 1,
	recoil: 2.5,
	bulletSpeed: PISTOL_BULLET_SPEED,
	accuracy: 8,
	zoomLevel: ZOOM_PISTOL,
	texture: "makarov",
	ammo: 8,
	smoke: 0,
	// BEHAVIOR
	shotType: SHOT_TYPE_NORMAL,
	bulletType: BULLET_TYPE_NORMAL,
	// SOUNDS
	sound: "desnoguns/MakarovShoot.ogg",
	reloadSound: "desnoguns/reload/ColtReload.ogg",
};

const MINIGUN_EXPLOSIVE = {
	weaponType: "gun",
	name: "Minigun Explosive",
	gunType: GUN_TYPE_MINIGUN,
	buttonType: BUTTON_TYPE_ON_TOUCH_WITH_WAIT,
	id: 511,
	fireRate: 3,
	recoil: 2,
	bulletSpeed: ASSAULT_BULLET_SPEED,
	accuracy: 5.5,
	zoomLevel: ZOOM_ASSAULT,
	texture: "minigunexplosive",
	ammo: 250,
	smoke: 3,
	// BEHAVIOR
	shotType: SHOT_TYPE_NORMAL,
	bulletType: BULLET_TYPE_NORMAL_EXPLOSIVE_ON_TOUCH,
	bulletsExplosionRadius: 2,
	// SOUNDS
	warmupSound: "desnoguns/MinigunWarmup.ogg",
	sound: "desnoguns/P90_and_Bizon_and_G3Shoot_and_Minigun.ogg",
	spinSound: "desnoguns/MinigunSpin.ogg",
	cooldownSound: "desnoguns/MinigunCooldown.ogg",
	reloadSound: "desnoguns/reload/BrowningReload.ogg",
};

const MINIGUN = {
	weaponType: "gun",
	name: "Minigun",
	gunType: GUN_TYPE_MINIGUN,
	buttonType: BUTTON_TYPE_ON_TOUCH_WITH_WAIT,
	id: 490,
	fireRate: 1,
	recoil: 1,
	bulletSpeed: ASSAULT_BULLET_SPEED,
	accuracy: 5.5,
	zoomLevel: ZOOM_ASSAULT,
	texture: "minigun",
	ammo: 500,
	smoke: 3,
	// BEHAVIOR
	shotType: SHOT_TYPE_NORMAL,
	bulletType: BULLET_TYPE_NORMAL,
	// SOUNDS
	warmupSound: "desnoguns/MinigunWarmup.ogg",
	sound: "desnoguns/P90_and_Bizon_and_G3Shoot_and_Minigun.ogg",
	spinSound: "desnoguns/MinigunSpin.ogg",
	cooldownSound: "desnoguns/MinigunCooldown.ogg",
	reloadSound: "desnoguns/reload/BrowningReload.ogg",
};

const MINI_UZI = {
	weaponType: "gun",
	name: "Mini-Uzi",
	gunType: GUN_TYPE_MACHINE_PISTOL,
	buttonType: BUTTON_TYPE_ON_TOUCH,
	id: 491,
	fireRate: 2,
	recoil: 3,
	bulletSpeed: PISTOL_BULLET_SPEED,
	accuracy: 2.5,
	zoomLevel: ZOOM_PISTOL,
	texture: "miniuzi",
	ammo: 32,
	smoke: 1,
	// BEHAVIOR
	shotType: SHOT_TYPE_NORMAL,
	bulletType: BULLET_TYPE_NORMAL,
	// SOUNDS
	sound: "desnoguns/MiniUziShoot.ogg",
	reloadSound: "desnoguns/reload/ColtReload.ogg",
};

const MP5 = {
	weaponType: "gun",
	name: "MP5",
	gunType: GUN_TYPE_SUB_MACHINE,
	buttonType: BUTTON_TYPE_ON_TOUCH,
	id: 492,
	fireRate: 3,
	recoil: 3,
	bulletSpeed: ASSAULT_BULLET_SPEED,
	accuracy: 2.5,
	zoomLevel: ZOOM_MACHINE,
	texture: "mp5",
	ammo: 30,
	smoke: 1,
	// BEHAVIOR
	shotType: SHOT_TYPE_NORMAL,
	bulletType: BULLET_TYPE_NORMAL,
	// SOUNDS
	sound: "desnoguns/MP5Shoot.ogg",
	reloadSound: "desnoguns/reload/StenReload.ogg",
};

const MTAR = {
	weaponType: "gun",
	name: "MTAR",
	gunType: GUN_TYPE_ASSAULT_RIFLE,
	buttonType: BUTTON_TYPE_ON_TOUCH,
	id: 493,
	fireRate: 3,
	recoil: 3,
	bulletSpeed: ASSAULT_BULLET_SPEED,
	accuracy: 3,
	zoomLevel: ZOOM_ASSAULT,
	texture: "mtar",
	ammo: 30,
	smoke: 1,
	// BEHAVIOR
	shotType: SHOT_TYPE_NORMAL,
	bulletType: BULLET_TYPE_NORMAL,
	// SOUNDS
	sound: "desnoguns/FNSCAR_and_AUG_and_MTARShoot.ogg",
	reloadSound: "desnoguns/reload/MP44Reload.ogg",
};

const MULTIPLE_ROCKET_LAUNCHER = {
	weaponType: "gun",
	name: "Multiple Rocket Launcher",
	gunType: GUN_TYPE_LAUNCHER,
	buttonType: BUTTON_TYPE_ON_CLICK,
	id: 3375,
	fireRate: 10,
	recoil: 22,
	bulletSpeed: BAZOOKA_BULLET_SPEED - 0.3,
	accuracy: 5,
	zoomLevel: ZOOM_BAZOOKA,
	texture: "multiplerocketlauncher",
	ammo: 1,
	smoke: 4,
	// BEHAVIOR
	shotType: SHOT_TYPE_SHOTGUN,
	shotgunBullets: 4,
	shotgunDegreesSpread: 8,
	shotgunWait: 20,
	hasParticleTrail: true,
	particleTrailDistance: 3,
	particleTrailId: 4,
	bulletType: BULLET_TYPE_NORMAL_EXPLOSIVE_ON_TOUCH,
	bulletsExplosionRadius: 2,
	// SOUNDS
	sound: "desnoguns/MultipleRocketLauncherShoot.mp3",
	reloadSound: "desnoguns/reload/BazookaReload.mp3",
};

const P90 = {
	weaponType: "gun",
	name: "P90",
	gunType: GUN_TYPE_SUB_MACHINE,
	buttonType: BUTTON_TYPE_ON_TOUCH,
	id: 494,
	fireRate: 2,
	recoil: 2,
	bulletSpeed: ASSAULT_BULLET_SPEED,
	accuracy: 2.5,
	zoomLevel: ZOOM_MACHINE,
	texture: "p90",
	ammo: 50,
	smoke: 2,
	// BEHAVIOR
	shotType: SHOT_TYPE_NORMAL,
	bulletType: BULLET_TYPE_NORMAL,
	// SOUNDS
	sound: "desnoguns/P90_and_Bizon_and_G3Shoot_and_Minigun.ogg",
	reloadSound: "desnoguns/reload/DP28Reload.ogg",
};

const R700 = {
	weaponType: "gun",
	name: "R700",
	gunType: GUN_TYPE_SNIPER_RIFLE,
	buttonType: BUTTON_TYPE_ON_CLICK,
	id: 495,
	fireRate: 20,
	recoil: 25,
	bulletSpeed: SNIPER_BULLET_SPEED,
	zoomLevel: ZOOM_SNIPER,
	accuracy: 2,
	hasAimImageLayer: true,
	texture: "r700",
	ammo: 4,
	smoke: 1,
	// BEHAVIOR
	shotType: SHOT_TYPE_NORMAL,
	bulletType: BULLET_TYPE_NORMAL,
	// SOUNDS
	sound: "desnoguns/R700_and_M40A3Shoot.ogg",
	reloadSound: "desnoguns/reload/SpringfieldReload.ogg",
};

const R870 = {
	weaponType: "gun",
	name: "Remington 870",
	gunType: GUN_TYPE_SHOTGUN,
	buttonType: BUTTON_TYPE_ON_CLICK,
	id: 496,
	fireRate: 15,
	recoil: 19,
	bulletSpeed: SHOTGUN_BULLET_SPEED,
	accuracy: 11,
	zoomLevel: ZOOM_SHOTGUN,
	texture: "r870",
	ammo: 7,
	smoke: 1,
	// BEHAVIOR
	shotType: SHOT_TYPE_SHOTGUN,
	shotgunBullets: 8,
	shotgunDegreesSpread: 3,
	bulletType: BULLET_TYPE_NORMAL,
	// SOUNDS
	sound: "desnoguns/R870Shoot.ogg",
	reloadSound: "desnoguns/reload/W1200Reload.ogg",
};

const RAYGUN = {
	weaponType: "gun",
	name: "Ray Gun",
	gunType: GUN_TYPE_HANDGUN,
	buttonType: BUTTON_TYPE_ON_CLICK,
	id: 3376,
	fireRate: 5,
	recoil: 12,
	bulletSpeed: ASSAULT_BULLET_SPEED,
	accuracy: 2,
	zoomLevel: ZOOM_PISTOL,
	texture: "raygun",
	ammo: 20,
	smoke: 1,
	// BEHAVIOR
	shotType: SHOT_TYPE_SHOTGUN,
	shotgunBullets: 2, // with double tap
	shotgunDegreesSpread: 0.5,
	hasParticleTrail: true,
	particleTrailDistance: 9,
	particleTrailId: ParticleType.redstone,
	bulletType: BULLET_TYPE_NORMAL,
	// SOUNDS
	sound: "desnoguns/RayGunShoot.mp3",
	reloadSound: "desnoguns/reload/RayGunReload.mp3",
};

const RPD = {
	weaponType: "gun",
	name: "RPD",
	gunType: GUN_TYPE_LIGHT_MACHINE,
	buttonType: BUTTON_TYPE_ON_TOUCH,
	id: 497,
	fireRate: 3,
	recoil: 5.5,
	bulletSpeed: ASSAULT_BULLET_SPEED,
	accuracy: 4,
	zoomLevel: ZOOM_MACHINE,
	texture: "rpd",
	ammo: 100,
	smoke: 2,
	// BEHAVIOR
	shotType: SHOT_TYPE_NORMAL,
	bulletType: BULLET_TYPE_NORMAL,
	// SOUNDS
	sound: "desnoguns/RPD_and_M60E4_and_RPKShoot.ogg",
	reloadSound: "desnoguns/reload/MG42Reload.ogg",
};

const RPG = {
	weaponType: "gun",
	name: "RPG",
	gunType: GUN_TYPE_LAUNCHER,
	buttonType: BUTTON_TYPE_ON_CLICK,
	id: 498,
	fireRate: 10,
	recoil: 25,
	bulletSpeed: BAZOOKA_BULLET_SPEED,
	accuracy: 10,
	zoomLevel: ZOOM_BAZOOKA,
	texture: "rpg",
	ammo: 1,
	smoke: 4,
	// BEHAVIOR
	shotType: SHOT_TYPE_NORMAL,
	hasParticleTrail: true,
	particleTrailDistance: 3,
	particleTrailId: 4,
	bulletType: BULLET_TYPE_NORMAL_EXPLOSIVE_ON_TOUCH,
	bulletsExplosionRadius: 4,
	// SOUNDS
	sound: "desnoguns/RPGShoot.ogg",
	reloadSound: "desnoguns/reload/BazookaReload.mp3",
};

const RPK = {
	weaponType: "gun",
	name: "RPK",
	gunType: GUN_TYPE_ASSAULT_RIFLE,
	buttonType: BUTTON_TYPE_ON_TOUCH,
	id: 499,
	fireRate: 3,
	recoil: 3.5,
	bulletSpeed: ASSAULT_BULLET_SPEED,
	accuracy: 4,
	zoomLevel: ZOOM_ASSAULT,
	texture: "rpk",
	ammo: 40,
	smoke: 1,
	// BEHAVIOR
	shotType: SHOT_TYPE_NORMAL,
	bulletType: BULLET_TYPE_NORMAL,
	// SOUNDS
	sound: "desnoguns/RPD_and_M60E4_and_RPKShoot.ogg",
	reloadSound: "desnoguns/reload/MG42Reload.ogg",
};

const SG550 = {
	weaponType: "gun",
	name: "SG550",
	gunType: GUN_TYPE_ASSAULT_RIFLE,
	buttonType: BUTTON_TYPE_ON_CLICK,
	id: 500,
	fireRate: 5,
	recoil: 2.5,
	bulletSpeed: ASSAULT_BULLET_SPEED,
	accuracy: 2.5,
	zoomLevel: ZOOM_ASSAULT,
	texture: "sg550",
	ammo: 20,
	smoke: 1,
	// BEHAVIOR
	shotType: SHOT_TYPE_NORMAL,
	bulletType: BULLET_TYPE_NORMAL,
	// SOUNDS
	sound: "desnoguns/SG550Shoot.ogg",
	reloadSound: "desnoguns/reload/MP44Reload.ogg",
};

const SIGP226 = {
	weaponType: "gun",
	name: "SIGP226",
	gunType: GUN_TYPE_HANDGUN,
	buttonType: BUTTON_TYPE_ON_CLICK,
	id: 501,
	fireRate: 1,
	recoil: 3,
	bulletSpeed: PISTOL_BULLET_SPEED,
	accuracy: 6,
	zoomLevel: ZOOM_PISTOL,
	texture: "sigp226",
	ammo: 10,
	smoke: 0,
	// BEHAVIOR
	shotType: SHOT_TYPE_NORMAL,
	bulletType: BULLET_TYPE_NORMAL,
	// SOUNDS
	sound: "desnoguns/SIGP226Shoot.ogg",
	reloadSound: "desnoguns/reload/LugerReload.ogg",
};

const SKORPION = {
	weaponType: "gun",
	name: "Skorpion",
	gunType: GUN_TYPE_MACHINE_PISTOL,
	buttonType: BUTTON_TYPE_ON_TOUCH,
	id: 502,
	fireRate: 3,
	recoil: 1.5,
	bulletSpeed: PISTOL_BULLET_SPEED,
	accuracy: 2.5,
	zoomLevel: ZOOM_PISTOL,
	texture: "skorpion",
	ammo: 20,
	smoke: 1,
	// BEHAVIOR
	shotType: SHOT_TYPE_NORMAL,
	bulletType: BULLET_TYPE_NORMAL,
	// SOUNDS
	sound: "desnoguns/SkorpionShoot.ogg",
	reloadSound: "desnoguns/reload/StenReload.ogg",
};

const SPAS = {
	weaponType: "gun",
	name: "SPAS-12",
	gunType: GUN_TYPE_SHOTGUN,
	buttonType: BUTTON_TYPE_ON_CLICK,
	id: 503,
	fireRate: 15,
	recoil: 22,
	bulletSpeed: SHOTGUN_BULLET_SPEED,
	accuracy: 11,
	zoomLevel: ZOOM_SHOTGUN,
	texture: "spas",
	ammo: 7,
	smoke: 1,
	// BEHAVIOR
	shotType: SHOT_TYPE_SHOTGUN,
	shotgunBullets: 7,
	shotgunDegreesSpread: 2,
	bulletType: BULLET_TYPE_NORMAL,
	// SOUNDS
	sound: "desnoguns/W1200_and_SPASShoot.ogg",
	reloadSound: "desnoguns/reload/W1200Reload.ogg",
};

const USP = {
	weaponType: "gun",
	name: "USP",
	gunType: GUN_TYPE_HANDGUN,
	buttonType: BUTTON_TYPE_ON_CLICK,
	id: 504,
	fireRate: 1,
	recoil: 1,
	bulletSpeed: PISTOL_BULLET_SPEED,
	accuracy: 8,
	zoomLevel: ZOOM_PISTOL,
	texture: "usp",
	ammo: 10,
	smoke: 0,
	// BEHAVIOR
	shotType: SHOT_TYPE_NORMAL,
	bulletType: BULLET_TYPE_NORMAL,
	// SOUNDS
	sound: "desnoguns/USPShoot.ogg",
	reloadSound: "desnoguns/reload/TT33Reload.ogg",
};

const W1200 = {
	weaponType: "gun",
	name: "W1200",
	gunType: GUN_TYPE_SHOTGUN,
	buttonType: BUTTON_TYPE_ON_CLICK,
	id: 505,
	fireRate: 15,
	recoil: 17,
	bulletSpeed: SHOTGUN_BULLET_SPEED,
	accuracy: 11,
	zoomLevel: ZOOM_SHOTGUN,
	texture: "w1200",
	ammo: 7,
	smoke: 1,
	// BEHAVIOR
	shotType: SHOT_TYPE_SHOTGUN,
	shotgunBullets: 8,
	shotgunDegreesSpread: 3,
	bulletType: BULLET_TYPE_NORMAL,
	// SOUNDS
	sound: "desnoguns/W1200_and_SPASShoot.ogg",
	reloadSound: "desnoguns/reload/W1200Reload.ogg",
};

const XMAS_MINIGUN = {
	weaponType: "gun",
	name: "X-Mas Minigun",
	gunType: GUN_TYPE_MINIGUN,
	buttonType: BUTTON_TYPE_ON_TOUCH_WITH_WAIT,
	id: 506,
	fireRate: 2,
	recoil: 1,
	bulletSpeed: ASSAULT_BULLET_SPEED,
	accuracy: 4,
	zoomLevel: ZOOM_ASSAULT,
	texture: "xmasminigun",
	ammo: 500,
	smoke: 3,
	// BEHAVIOR
	shotType: SHOT_TYPE_NORMAL,
	bulletType: BULLET_TYPE_SNOWBALL,
	// SOUNDS
	warmupSound: "desnoguns/MinigunWarmup.ogg",
	sound: "desnoguns/bell.mp3",
	spinSound: "desnoguns/MinigunSpin.ogg",
	cooldownSound: "desnoguns/MinigunCooldown.ogg",
	reloadSound: "desnoguns/reload/BrowningReload.ogg",
};

const XMAS_SNIPER = {
	weaponType: "gun",
	name: "X-Mas Sniper",
	gunType: GUN_TYPE_SNIPER_RIFLE,
	buttonType: BUTTON_TYPE_ON_CLICK,
	id: 507,
	fireRate: 5,
	recoil: 5,
	bulletSpeed: SNIPER_BULLET_SPEED,
	zoomLevel: ZOOM_SNIPER,
	accuracy: 2,
	hasAimImageLayer: true,
	texture: "xmassniper",
	ammo: 5,
	// BEHAVIOR
	shotType: SHOT_TYPE_NORMAL,
	bulletType: BULLET_TYPE_SNOWBALL,
	// SOUNDS
	sound: "desnoguns/bell.mp3",
	reloadSound: "desnoguns/reload/SpringfieldReload.ogg",
};

// all the guns in a single array.
// sequence: first pro items, then other items in alphabetic order, and last the items that are added with the Date system
var defaultGuns = [AA12, INCENDIARY_GL, MSR, MAGNUM44, AK47, AK74, AT4, AUG, BARRETT_EXPLOSIVE, BARRETT, BIZON, CROSSBOW_EXPLOSIVE, CROSSBOW, DESERT_EAGLE, DESERT_EAGLE_GOLD, DRAGUNOV, FLAMETHROWER, FNSCAR, G3, G36, GL1, GL6, GLOCK, L86, L96, M9, M14, M16A4, M21, M40A3_ICE, M40A3, M60E4, M72LAW, M249, M1014, M1887, MAKAROV, MINIGUN_EXPLOSIVE, MINIGUN, MINI_UZI, MP5, MTAR, MULTIPLE_ROCKET_LAUNCHER, P90, R700, R870, RAYGUN, RPD, RPG, RPK, SG550, SIGP226, SKORPION, SPAS, USP, W1200];
var allGuns = [];


//########################################################################################################################################################
// Hooks and simulated hooks
//########################################################################################################################################################

function selectLevelHook()
{
	// when selecting level
	//
}

function newLevel()
{
	isInGame = true;

	refreshIsPro();

	var bSizeTest = ModPE.readData("bSize");
	if(bSizeTest != "" && bSizeTest != null && bSizeTest != undefined)
		buttonsSize = parseFloat(bSizeTest);

	var mButtonsTest = ModPE.readData("mButtons");
	if(mButtonsTest != "" && mButtonsTest != null && mButtonsTest != undefined)
		pixelsOffsetButtons = parseFloat(mButtonsTest);

	var aTSizeTest = ModPE.readData("aTSize");
	if(aTSizeTest != "" && aTSizeTest != null && aTSizeTest != undefined)
		ammoTextSize = parseFloat(aTSizeTest);

	var generalVolumeTest = ModPE.readData("generalVolume");
	if(generalVolumeTest != "" && generalVolumeTest != null && generalVolumeTest != undefined)
		generalVolume = parseFloat(generalVolumeTest);
	if(generalVolume < 0 || generalVolume > 1)
		generalVolume = 1;

	// load saved boolean settings
	// getSavedBoolean(name, defaultValue, debug);
	shouldDisplaySight = getSavedBoolean("dSight", true);
	displayGunNameInAmmo = getSavedBoolean("dNameAmmo", false);
	reloadInCreative = getSavedBoolean("rCreative", true);
	instantReloadInCreative = getSavedBoolean("instReload", false);
	switchedButtonsPosition = getSavedBoolean("sBPosition", false);
	minecraftStyleForButtons = getSavedBoolean("sBStyle", false);

	new java.lang.Thread(new java.lang.Runnable()
	{
		run: function()
		{
			updateLatestVersionMod();
			if(latestVersion != CURRENT_VERSION && latestVersion != undefined)
				updateAvailableUI();
			else
			{
				if(latestVersion != undefined) // if == undefined there was an error
				{
					if(!isPro())
					{
						currentActivity.runOnUiThread(new java.lang.Runnable() {
							run: function() {
								android.widget.Toast.makeText(currentActivity, new android.text.Html.fromHtml("<b>DesnoGuns</b>: You have the latest version."), 0).show();
							}
						});
					} else
					{
						currentActivity.runOnUiThread(new java.lang.Runnable() {
							run: function() {
								android.widget.Toast.makeText(currentActivity, new android.text.Html.fromHtml("<b>DesnoGuns Pro</b>: You have the latest version."), 0).show();
							}
						});
					}
				}
			}
		}
	}).start();
}

function leaveGame()
{
	isInGame = false;
	players = [];

	removeShootAndAimButtons();

	previousCarriedItem = 0;
	previousSlotId = 0;

	// release the resources for sounds
	Sound.stopAllSounds();

	// fire button variables
	currentShotTicks = 0;

	// for assault rifles
	isShooting = false;
	shootingRunnable = null;

	// for minigun
	isTouchingFireButtonGunsWithWait = false;

	// remove explosive bullets
	for(var i in allGuns)
	{
		allGuns[i].bulletsArray = [];
	}

	// remove grenades
	GRENADE.grenadesArray = [];

	// remove fragment grenades
	FRAGMENT.grenadesArray = [];

	// remove molotovs
	MOLOTOV.grenadesArray = [];

	// remove smoke grenades
	SMOKE.grenadesArray = [];

	// parachute
	isParachuting = false;

	// reset fov
	ModPE.resetFov();
	zoomWithFov = 72;

	// info item UIs
	removeInfoItemUI();

	// medical kit UI
	removeHealButton();
}

function procCmd(text)
{
	var command = text.toLowerCase().split(" ");
	switch(command[0])
	{
		case "swag-grenade":
		case "swaggrenade":
		case "swag_grenade":
		{
			if(infiniteGrenade)
			{
				infiniteGrenade = false;
				clientMessage("Disabled swag.");
			}
			else
			{
				infiniteGrenade = true;
				clientMessage("A crash may happen if you use a fragment grenade.");
				clientMessage(ChatColor.RED + "Use at your own risk!");
				clientMessage("For a better experience use it on a flat world.");
			}
			break;
		}
		case "swag":
		{
			if(command[1] == "grenade")
			{
				if(infiniteGrenade)
				{
					infiniteGrenade = false;
					clientMessage("Disabled swag.");
				}
				else
				{
					infiniteGrenade = true;
					clientMessage("A crash may happen if you use a fragment grenade.");
					clientMessage(ChatColor.RED + "Use at your own risk!");
					clientMessage("For a better experience use it on a flat world.");
				}
			}
			break;
		}
	}
}

function useItem(x, y, z, itemId, blockId, side, itemDamage)
{
	if(itemId == INFO_ITEM_ID)
	{
		infoDesnoGunsMod();
		preventDefault();
		return;
	}

	if(itemId == KNIFE_ID)
	{
		playSoundFromSimplePath("desnoguns/knife_on_blocks.mp3");
	}

	// easter egg
	if(blockId == 173) // 173 block of coal
	{
		if(Level.getTile(Math.floor(x), Math.floor(y) - 1, Math.floor(z)) == 42) // block of iron
		{
			preventDefault();
			if(Level.getGameMode() == GameMode.SURVIVAL)
			{
				xCoalEE = Math.floor(x);
				yCoalEE = Math.floor(y);
				zCoalEE = Math.floor(z);
				easterEggUI();
			} else
			{
				clientMessage("Only in survival.");
			}
		}
	}
}

function entityHurtHook(attacker, victim, hearts)
{
	if(Entity.getEntityTypeId(attacker) == EntityType.ARROW)
	{
		if(victim == latestShotEntity)
		{
			if(latestEntityHurtTime == null || java.lang.System.currentTimeMillis() < (latestEntityHurtTime + ENTITY_HURT_ANIMATION_DURATION))
			{
				// if the entity has been recently hurt by an arrow remove other arrows that hit the entity (this may remove arrows that really damaged the entity, but it isn't a problem because when an arrow damages an entity the arrow is removed)
				Entity.remove(attacker);
			}
		} else
		{
			latestEntityHurtTime = java.lang.System.currentTimeMillis();
			latestShotEntity = victim;
		}
	}
}

function attackHook(attacker, victim)
{
	if(attacker = Player.getEntity())
	{
		// knife
		if(Player.getCarriedItem() == KNIFE_ID && Entity.getHealth(victim) != 0)
		{
			playSoundFromSimplePath(createRandomString(KNIFE_SOUND_STAB));

			var health = Entity.getHealth(victim) - KNIFE_MOB_DAMAGE;
			if(health < 1)
				health = 1;
			Entity.setHealth(victim, health);

			if(Level.getGameMode() == GameMode.SURVIVAL)
				Player.damageCarriedItem();
		}

		// riot shield
		if(Player.getCarriedItem() == RIOT_SHIELD_ID && Entity.getHealth(victim) != 0)
		{
			playSoundFromSimplePath("desnoguns/riot_shield_attack.mp3");

			var health = Entity.getHealth(victim) - RIOT_SHIELD_MOB_DAMAGE;
			if(health < 1)
				health = 1;
			Entity.setHealth(victim, health);

			if(Level.getGameMode() == GameMode.SURVIVAL)
			{
				for(var i = 0; i < 20; i++)
				{
					Player.damageCarriedItem();
				}
			}
		}
	}
}

function deathHook(murderer, victim)
{
	// easter egg
	if(Entity.getEntityTypeId(victim) == 36) // 36 = pigman id
	{
		if(Player.getCarriedItem() == BARRETT_EXPLOSIVE.id)
		{
			killedPigmenEE++;
			if(killedPigmenEE % 20 == 0)
			{
				codeEE = Math.floor((Math.random() * 8999) + 1000);
				clientMessage(codeEE);
			}
		}

		var index = pigmen.indexOf(victim);
		if(index != -1)
		{
			pigmen.splice(index, 1);
		}
	}
}

function entityRemovedHook(entity)
{
	// remove explosive bullets
	for(var i in allGuns)
	{
		if(!allGuns[i].bulletType == BULLET_TYPE_NORMAL_EXPLOSIVE_ON_TIME) // bullets on time shouldn't be removed from the array when the entity gets removed from the game
		{
			for(var j in allGuns[i].bulletsArray)
			{
				if(entity == allGuns[i].bulletsArray[j].entity)
					allGuns[i].bulletsArray.splice(j, 1);
			}
		}
	}
}

function changeCarriedItemHook(currentItem, previousItem)
{
	// prevent infinite shooting
	currentShotTicks = 0;
	isShooting = false;

	// remove aiming if the user was aiming
	removeZoomAndAimImageLayer();

	// stop reloading if necessary
	stopReloading();

	// release the resources for sounds
	Sound.stopSoundPool();

	// reset sounds for on touch with wait guns spin
	try {
		gunSpinSound.stop();
		gunSpinSound.release();
		gunSpinSound = null;
		gunSpinSound = new android.media.MediaPlayer();
	} catch(e) {
		clientMessage(e);
	}

	// remove shooting UI of grenades and molotov
	if(previousItem == MOLOTOV.id || previousItem == GRENADE.id || previousItem == FRAGMENT.id || previousItem == SMOKE.id || previousItem == BINOCULARS.id || previousItem == ZOOM_BINOCULARS.id)
	{
		//
		removeShootAndAimButtons();
	}

	// remove UI of the info item
	if(previousItem == INFO_ITEM_ID)
	{
		//
		removeInfoItemUI();
	}

	// remove UI of the medical kit
	if(previousItem == MEDICAL_KIT_ID)
	{
		//
		removeHealButton();
	}

	// the current item is a gun?
	if(isItemAGun(currentItem) && needsToLoadTheUI(currentItem, true))
	{
		// load current gun
		var currentGun = getGun(currentItem);

		if(!isItemAGun(previousItem) || !needsToLoadTheUI(previousItem, false)) // load fire and aim buttons if necessary
			displayShootAndAimButtons();

		// reset clicks and long clicks
		resetRunnables();
		currentActivity.runOnUiThread(new java.lang.Runnable(
		{
			run: function()
			{
				shotText.setOnTouchListener(new android.view.View.OnTouchListener()
				{
					onTouch: function(v, event)
					{
						if(minecraftStyleForButtons)
							MinecraftButtonLibrary.onTouch(v, event, false); // make touch effect
						return false;
					}
				});
			}
		}));

		// reset flamethrower tick
		if(currentGun.isFlamethrower)
			flameTick = 2;

		// load sounds for the gun
		if(!currentGun.hasntShootingSound)
			Sound.loadSoundPoolFromPath(getOriginalPathOfSound(currentGun.sound));

		// assault rifles, sub machine guns and light machine guns
		if(currentGun.buttonType == BUTTON_TYPE_ON_TOUCH)
		{
			// load touch events
			if(shouldReload())
			{
				// survival or creative with reload option enabled
				currentActivity.runOnUiThread(new java.lang.Runnable(
				{
					run: function()
					{
						shotText.setOnTouchListener(new android.view.View.OnTouchListener()
						{
							onTouch: function(v, event)
							{
								if(minecraftStyleForButtons)
									MinecraftButtonLibrary.onTouch(v, event, false); // make touch effect
								onTouchWeaponShoot(event, currentGun, true);
								return false;
							}
						});
					}
				}));
			} else
			{
				// creative with reload option disabled
				currentActivity.runOnUiThread(new java.lang.Runnable(
				{
					run: function()
					{
						shotText.setOnTouchListener(new android.view.View.OnTouchListener()
						{
							onTouch: function(v, event)
							{
								if(minecraftStyleForButtons)
									MinecraftButtonLibrary.onTouch(v, event, false); // make touch effect
								onTouchWeaponShoot(event, currentGun, false);
								return false;
							}
						});
					}
				}));
			}
		}

		// single shot weapons
		if(currentGun.buttonType == BUTTON_TYPE_ON_CLICK)
		{
			// load click event
			onClickRunnable = (new java.lang.Runnable(
			{
				run: function()
				{
					onClickWeaponShoot(currentGun);
				}
			}));
		}

		// guns with warmup
		if(currentGun.buttonType == BUTTON_TYPE_ON_TOUCH_WITH_WAIT)
		{
			// load spin sound
			try {
				gunSpinSound.reset();
				gunSpinSound.setDataSource(getOriginalPathOfSound(currentGun.spinSound));
				gunSpinSound.setLooping(true);
				gunSpinSound.setVolume(generalVolume, generalVolume);
				gunSpinSound.prepareAsync();
			} catch(e) {
				try {
					// try again, maybe we had a weird sound error
					gunSpinSound.reset();
					gunSpinSound.setDataSource(getOriginalPathOfSound(currentGun.spinSound));
					gunSpinSound.setLooping(true);
					gunSpinSound.setVolume(generalVolume, generalVolume);
					gunSpinSound.prepareAsync();
				} catch(e) { /* sounds not installed */ }
			}

			// load touch events
			if(shouldReload())
			{
				// survival or creative with reload option enabled
				currentActivity.runOnUiThread(new java.lang.Runnable(
				{
					run: function()
					{
						shotText.setOnTouchListener(new android.view.View.OnTouchListener()
						{
							onTouch: function(v, event)
							{
								if(minecraftStyleForButtons)
									MinecraftButtonLibrary.onTouch(v, event, false); // make touch effect
								onTouchWithWaitWeaponShoot(event, currentGun, true);
								return false;
							}
						});
					}
				}));
			} else
			{
				// creative with reload option disabled
				currentActivity.runOnUiThread(new java.lang.Runnable(
				{
					run: function()
					{
						shotText.setOnTouchListener(new android.view.View.OnTouchListener()
						{
							onTouch: function(v, event)
							{
								if(minecraftStyleForButtons)
									MinecraftButtonLibrary.onTouch(v, event, false); // make touch effect
								onTouchWithWaitWeaponShoot(event, currentGun, false);
								return false;
							}
						});
					}
				}));
			}
		}

		// set ammo text
		updateAmmoText(currentGun)
	} else
	{
		if(isItemAGun(previousItem))
		{
			// the item before was weapon, now it isn't
			removeShootAndAimButtons();
		}
	}

	// medical kit
	if(currentItem == MEDICAL_KIT_ID)
	{
		//
		displayHealButton();
	}

	// grenade
	if(currentItem == GRENADE.id)
	{
		displayShootButton();

		// load click event
		onClickRunnable = (new java.lang.Runnable(
		{
			run: function()
			{
				shootGrenadeHand(GRENADE);
				if(Level.getGameMode() == GameMode.SURVIVAL)
					Player.decreaseByOneCarriedItem();
			}
		}));
		setAmmoText(" ");
	}

	// fragment
	if(currentItem == FRAGMENT.id)
	{
		displayShootButton();

		// load click event
		onClickRunnable = (new java.lang.Runnable(
		{
			run: function()
			{
				shootGrenadeHand(FRAGMENT);
				if(Level.getGameMode() == GameMode.SURVIVAL)
					Player.decreaseByOneCarriedItem();
			}
		}));
		setAmmoText(" ");
	}

	// molotov
	if(currentItem == MOLOTOV.id)
	{
		displayShootButton();

		// load click event
		onClickRunnable = (new java.lang.Runnable(
		{
			run: function()
			{
				shootGrenadeHand(MOLOTOV);
				if(Level.getGameMode() == GameMode.SURVIVAL)
					Player.decreaseByOneCarriedItem();
			}
		}));
		setAmmoText(" ");
	}

	// smoke grenade
	if(currentItem == SMOKE.id)
	{
		displayShootButton();

		// load click event
		onClickRunnable = (new java.lang.Runnable(
		{
			run: function()
			{
				shootGrenadeHand(SMOKE);
				if(Level.getGameMode() == GameMode.SURVIVAL)
					Player.decreaseByOneCarriedItem();
			}
		}));
		setAmmoText(" ");
	}

	if(currentItem == BINOCULARS.id || currentItem == ZOOM_BINOCULARS.id)
	{
		if(needsToLoadTheUI(currentItem, true))
			displayAimButton();
	}

	// DesnoGuns info
	if(currentItem == INFO_ITEM_ID)
	{
		//
		displayInfoItemUI();
	}

	// addons tabs items
	if(currentItem >= TABS_STARTING_ID && currentItem <= TABS_ENDING_ID)
	{
		if(loadedAddons.length > (currentItem - TABS_STARTING_ID))
			clientMessage("All the weapons after this item were added by \"" + loadedAddons[currentItem - TABS_STARTING_ID].name + "\"");
	}
}

function modTick()
{
	ModTickFunctions.checkChangedCarriedItem();

	ModTickFunctions.onTouchShooting();

	ModTickFunctions.bulletsControl();

	ModTickFunctions.molotov();

	ModTickFunctions.smokeGrenade();
	
	ModTickFunctions.parachute();

	ModTickFunctions.riotShield();
	
	ModTickFunctions.unstuckPigmenEE();

	/*if(DEBUG1)
	{
		ModPE.showTipMessage(Entity.getVelY(Player.getEntity()));
	}*/
}

var ModTickFunctions = {

	checkChangedCarriedItem: function()
	{
		if(Player.getCarriedItem() != previousCarriedItem)
			changeCarriedItemHook(Player.getCarriedItem(), previousCarriedItem);
		else
		{
			// switching between items with same id but different damage for example
			if(Player.getSelectedSlotId() != previousSlotId)
			{
				changeCarriedItemHook(previousCarriedItem, previousCarriedItem);
			}
		}
		previousCarriedItem = Player.getCarriedItem();
		previousSlotId = Player.getSelectedSlotId();
	},

	onTouchShooting: function()
	{
		if(isShooting && shootingRunnable != null)
		{
			shootingRunnable.run();
		} else
		{
			if(currentShotTicks != 0)
				currentShotTicks = 0;
		}
	},

	bulletsControl: function()
	{
		for(var i in allGuns)
		{
			for(var j in allGuns[i].bulletsArray)
			{
				if(allGuns[i].bulletType == BULLET_TYPE_NORMAL_EXPLOSIVE_ON_TOUCH)
				{
					var arrow = allGuns[i].bulletsArray[j];
					var xArrow = Entity.getX(arrow.entity);
					var yArrow = Entity.getY(arrow.entity);
					var zArrow = Entity.getZ(arrow.entity);

					if(arrow.previousX == xArrow && arrow.previousY == yArrow && arrow.previousZ == zArrow && Entity.getVelY(arrow.entity) == 0)
					{
						// arrow touched the ground
						Level.explode(xArrow, yArrow, zArrow, allGuns[i].bulletsExplosionRadius);

						Entity.remove(arrow.entity);
						allGuns[i].bulletsArray.splice(j, 1);
					} else
					{
						if(xArrow == 0 && yArrow == 0 && zArrow == 0)
						{
							// arrow hit an entity, the previous position may be near the player, we need to check it
							if(!checkProximityOfPoints(arrow.previousX, arrow.previousY, arrow.previousZ, Player.getX(), Player.getY(), Player.getZ(), 5))
								Level.explode(arrow.previousX, arrow.previousY, arrow.previousZ, allGuns[i].bulletsExplosionRadius);

							allGuns[i].bulletsArray.splice(j, 1);
						} else
						{
							arrow.previousX = xArrow;
							arrow.previousY = yArrow;
							arrow.previousZ = zArrow;
						}
					}
				}

				if(allGuns[i].bulletType == BULLET_TYPE_NORMAL_EXPLOSIVE_ON_TIME)
				{
					var arrow = allGuns[i].bulletsArray[j];
					var xArrow = Entity.getX(arrow.entity);
					var yArrow = Entity.getY(arrow.entity);
					var zArrow = Entity.getZ(arrow.entity);

					if(xArrow != 0 && yArrow != 0 && zArrow != 0)
					{
						// save the last position of the arrow, needed if the arrow is removed before it explodes
						arrow.previousX = xArrow;
						arrow.previousY = yArrow;
						arrow.previousZ = zArrow;
					}
				}

				if(allGuns[i].bulletType == BULLET_TYPE_INCENDIARY_SNOWBALL)
				{
					var grenade = allGuns[i].bulletsArray[j];
					var xGrenade = Entity.getX(grenade.entity);
					var yGrenade = Entity.getY(grenade.entity);
					var zGrenade = Entity.getZ(grenade.entity);

					if(xGrenade == 0 && yGrenade == 0 && zGrenade == 0)
					{
						// the snowball has been removed

						// fire
						var xStarting = Math.floor(grenade.previousX) - Math.floor(allGuns[i].grenadesExplosionDiameter / 2);
						var yStarting = Math.floor(grenade.previousY) - Math.floor(allGuns[i].grenadesExplosionDiameter / 2);
						var zStarting = Math.floor(grenade.previousZ) - Math.floor(allGuns[i].grenadesExplosionDiameter / 2);
						for(var xExplosion = xStarting; xExplosion <= xStarting + allGuns[i].grenadesExplosionDiameter; xExplosion++)
						{
							for(var yExplosion = yStarting; yExplosion <= yStarting + allGuns[i].grenadesExplosionDiameter; yExplosion++)
							{
								for(var zExplosion = zStarting; zExplosion <= zStarting + allGuns[i].grenadesExplosionDiameter; zExplosion++)
								{
									var setFire = true;
									if(xExplosion == xStarting || xExplosion == xStarting + allGuns[i].grenadesExplosionDiameter || zExplosion == zStarting || zExplosion == zStarting + allGuns[i].grenadesExplosionDiameter)
									{
										setFire = java.util.Random().nextBoolean();
									}
									if(setFire && (Level.getTile(xExplosion, yExplosion, zExplosion) == 0 || Level.getTile(xExplosion, yExplosion, zExplosion) == 31))
									{
										Level.setTile(xExplosion, yExplosion, zExplosion, 51);
									}
								}
							}
						}

						playSoundFromSimplePath("desnoguns/fire-explosion.mp3", grenade.previousX, grenade.previousY, grenade.previousZ);

						Entity.remove(grenade.entity);
						allGuns[i].bulletsArray.splice(j, 1);
					}else
					{
						grenade.previousX = xGrenade;
						grenade.previousY = yGrenade;
						grenade.previousZ = zGrenade;
					}
				}

				if(allGuns[i].hasParticleTrail)
				{
					// here the entity object may have been removed by bullet types
					if(allGuns[i].bulletsArray[j] != null)
					{
						var arrow = allGuns[i].bulletsArray[j];
						var xArrow = Entity.getX(arrow.entity);
						var yArrow = Entity.getY(arrow.entity);
						var zArrow = Entity.getZ(arrow.entity);

						if(arrow.previousX == xArrow && arrow.previousY == yArrow && arrow.previousZ == zArrow && Entity.getVelY(arrow.entity) == 0)
						{
							// arrow is on the ground
							if(!(allGuns[i].bulletType == BULLET_TYPE_NORMAL_EXPLOSIVE_ON_TOUCH || allGuns[i].bulletType == BULLET_TYPE_NORMAL_EXPLOSIVE_ON_TIME || allGuns[i].bulletType == BULLET_TYPE_INCENDIARY_SNOWBALL))
							{
								// we can't remove the arrow if it is needed somewhere else in the code, for these bullet types the arrow is needed
								Entity.remove(arrow.entity);
								allGuns[i].bulletsArray.splice(j, 1);
							}
						} else
						{
							if(xArrow == 0 && yArrow == 0 && zArrow == 0)
							{
								// arrow hit an entity
								if(!(allGuns[i].bulletType == BULLET_TYPE_NORMAL_EXPLOSIVE_ON_TOUCH || allGuns[i].bulletType == BULLET_TYPE_NORMAL_EXPLOSIVE_ON_TIME || allGuns[i].bulletType == BULLET_TYPE_INCENDIARY_SNOWBALL))
								{
									// we can't remove the entity object of the arrow if it is needed somewhere else in the code, for these bullet types it is needed
									allGuns[i].bulletsArray.splice(j, 1);
								}
							} else
							{
								arrow.previousX = xArrow;
								arrow.previousY = yArrow;
								arrow.previousZ = zArrow;

								var particleId;
								if(allGuns[i].particleTrailId != null)
									particleId = allGuns[i].particleTrailId;
								else
									particleId = 4;

								var particleDistance;
								if(allGuns[i].particleTrailDistance != null)
									particleDistance = allGuns[i].particleTrailDistance;
								else
									particleDistance = 3;

									Level.addParticle(allGuns[i].particleTrailId, xArrow, yArrow, zArrow, Entity.getVelX(arrow.entity) / particleDistance, Entity.getVelY(arrow.entity) / particleDistance, Entity.getVelZ(arrow.entity) / particleDistance, 1);
							}
						}
					}
				}
			}
		}
	},

	molotov: function()
	{
		for(var i in MOLOTOV.grenadesArray)
		{
			var grenade = MOLOTOV.grenadesArray[i];
			var xGrenade = Entity.getX(grenade.entity);
			var yGrenade = Entity.getY(grenade.entity);
			var zGrenade = Entity.getZ(grenade.entity);
			//ModPE.showTipMessage("x: " + Math.floor(xGrenade) + "y: " + Math.floor(yGrenade) + "z: " + Math.floor(zGrenade));

			if(xGrenade == 0 && yGrenade == 0 && zGrenade == 0)
			{
				// the entity has been removed

				// fire!!!!
				var xStarting = Math.floor(grenade.previousX) - Math.floor(MOLOTOV.grenadesExplosionDiameter / 2);
				var yStarting = Math.floor(grenade.previousY) - Math.floor(MOLOTOV.grenadesExplosionDiameter / 2);
				var zStarting = Math.floor(grenade.previousZ) - Math.floor(MOLOTOV.grenadesExplosionDiameter / 2);
				for(var xExplosion = xStarting; xExplosion <= xStarting + MOLOTOV.grenadesExplosionDiameter; xExplosion++)
				{
					for(var yExplosion = yStarting; yExplosion <= yStarting + MOLOTOV.grenadesExplosionDiameter; yExplosion++)
					{
						for(var zExplosion = zStarting; zExplosion <= zStarting + MOLOTOV.grenadesExplosionDiameter; zExplosion++)
						{
							var setFire = true;
							if(xExplosion == xStarting || xExplosion == xStarting + MOLOTOV.grenadesExplosionDiameter || zExplosion == zStarting || zExplosion == zStarting + MOLOTOV.grenadesExplosionDiameter)
							{
								setFire = java.util.Random().nextBoolean();
							}
							if(setFire && (Level.getTile(xExplosion, yExplosion, zExplosion) == 0 || Level.getTile(xExplosion, yExplosion, zExplosion) == 31))
							{
								Level.setTile(xExplosion, yExplosion, zExplosion, 51);
							}
						}
					}
				}

				playSoundFromSimplePath("desnoguns/MolotovExplosion.mp3", grenade.previousX, grenade.previousY, grenade.previousZ);

				//clientMessage("x: " + Math.floor(grenade.previousX ) + "y: " + Math.floor(grenade.previousY) + "z: " + Math.floor(grenade.previousZ));
				Entity.remove(grenade.entity);
				MOLOTOV.grenadesArray.splice(i, 1);
			} else
			{
				Level.addParticle(ParticleType.flame, xGrenade, yGrenade, zGrenade, 0, 0, 0, 1);
				grenade.previousX = xGrenade;
				grenade.previousY = yGrenade;
				grenade.previousZ = zGrenade;
			}
		}
	},

	smokeGrenade: function()
	{
		for(var i in SMOKE.grenadesArray)
		{
			for(var j = 0; j < 9; j++)
			{
				if(SMOKE.grenadesArray[i] != null)
				{
					var entity = SMOKE.grenadesArray[i].entity;
					var speed;
					var randomOffset;

					var dir = DesnoUtils.getVector(Math.floor(Math.random() * 360), Math.floor((Math.random() * 225) + 120)); // DesnoUtils.getVector(randomYaw, randomPitch);

					var distance = Math.random() * 0.8 + 1.8;
					var x = Entity.getX(entity) + (dir.x * distance);
					var y = Entity.getY(entity) + (dir.y * (distance - 0.5)); // -0.5 to make it not a perfect sphere and add a "gravity" effect
					var z = Entity.getZ(entity) + (dir.z * distance);

					speed = Math.random() * 0.08 + 0.02;
					randomOffset = Math.random() - 0.5;
					Level.addParticle(SMOKE.smokeParticle, x + randomOffset, y + randomOffset, z + randomOffset, dir.x * speed, dir.y * speed * 0.8, dir.z * speed, 1);
					
					speed = Math.random() * 0.08 + 0.02;
					randomOffset = Math.random() - 0.5;
					Level.addParticle(SMOKE.smokeParticle, x + randomOffset, y + randomOffset, z + randomOffset, dir.x * speed, dir.y * speed * 0.8, dir.z * speed, 1);
				}
			}

			if(SMOKE.grenadesArray[i] != null)
			{
				SMOKE.grenadesArray[i].effectsTick++;
				if(SMOKE.grenadesArray[i].effectsTick >= 10)
				{
					for(var j in players)
					{
						if(checkProximity(SMOKE.grenadesArray[i].entity, players[j], 5))
						{
							Entity.addEffect(players[j], MobEffect.movementSlowdown, 100, 1, false, false);
							Entity.addEffect(players[j], MobEffect.weakness, 100, 1, false, false);
							Entity.addEffect(players[j], MobEffect.blindness, 40, 0, false, false);
						}
					}
					SMOKE.grenadesArray[i].effectsTick = 0;
				}
			}
		}
	},

	parachute: function()
	{
		if(Player.getCarriedItem() == PARACHUTE_ID)
		{
			// player will hit the ground soon
			if(isParachuting && Level.getTile(Math.floor(Player.getX()), Math.floor(Player.getY()) - 2, Math.floor(Player.getZ())) > 0)
			{
				if(Entity.getVelY(Player.getEntity()) == VEL_Y_OFFSET)
				{
					// STOP parachuting
					isParachuting = false;

					if(Level.getGameMode() == GameMode.SURVIVAL)
					{
						// Entity.removeEffect(entity, id) doesn't remove particles of the effect https://github.com/zhuowei/MCPELauncher/issues/241
						//Entity.removeEffect(Player.getEntity(), MobEffect.jump);
						Entity.removeAllEffects(Player.getEntity());
						Player.damageCarriedItem();
					}
				}
			}

			// player is falling, oh no! We have to help him.
			if(Entity.getVelY(Player.getEntity()) <= -0.5)
			{
				// START parachuting
				playSoundFromSimplePath("desnoguns/benboncan_parachute.mp3");
				isParachuting = true;

				if(Level.getGameMode() == GameMode.SURVIVAL)
					Entity.addEffect(Player.getEntity(), MobEffect.jump, 999999, 254, false, false);
			}
		} else
		{
			if(isParachuting)
			{
				// STOP parachuting
				isParachuting = false;

				if(Level.getGameMode() == GameMode.SURVIVAL)
				{
					// Entity.removeEffect(entity, id) doesn't remove particles of the effect https://github.com/zhuowei/MCPELauncher/issues/241
					//Entity.removeEffect(Player.getEntity(), MobEffect.jump);
					Entity.removeAllEffects(Player.getEntity());

					//Player.damageCarriedItem(); // TODO fix: the item is not carried
					//Player.damageItemInInventory(item)
				}
			}
		}
		if(isParachuting)
		{
			// thanks to Anti for this line of code, it works better than making the player riding a chicken (that was my idea)
			Entity.setVelY(Player.getEntity(), -0.10);
		}
	},

	riotShield: function()
	{
		if(Player.getCarriedItem() == RIOT_SHIELD_ID)
		{
			Entity.addEffect(Player.getEntity(), MobEffect.damageResistance, 4, 3, false, false);
			Entity.addEffect(Player.getEntity(), MobEffect.movementSlowdown, 4, 0, false, false);

			if(Level.getGameMode() == GameMode.SURVIVAL)
				Player.damageCarriedItem();
		}
	},

	unstuckPigmenEE: function()
	{
		// Sin0psysS's spawning pattern code (with some changes by me)
		if(unstuck >= 1)
		{
			for(var i in pigmen)
			{
				if(Level.getTile(Math.floor(Entity.getX(pigmen[i])), Math.floor(Entity.getY(pigmen[i])), Math.floor(Entity.getZ(pigmen[i]))) != 0)
				{
					Entity.setPosition(pigmen[i], Entity.getX(pigmen[i]), Entity.getY(pigmen[i]) + 1, Entity.getZ(pigmen[i]));
				}
			}
			unstuck--;
		}
	}
};


//########################################################################################################################################################
// Added functions (No GUI and No render)
//########################################################################################################################################################

//########## LOAD ADDONS functions ##########
var loadedAddons = [];

function loadWeaponsFromAddons()
{
	var arrobject = [];
	net.zhuoweizhang.mcpelauncher.ScriptManager.callScriptMethod("loadWeaponsHook", arrobject);
}

function loadWeaponsCallback(weaponsArray, addonName, addonDescription)
{
	if(addonName == null)
		addonName = "No Name";
	if(addonDescription == null)
		addonDescription = "No Description";

	var result = canAddonBeLoaded(weaponsArray);
	if(result == "yes")
	{
		// everything is ok with the addon, add the guns in the game
		loadedAddons.push(new addonClass(weaponsArray, addonName, addonDescription));
	} else
	{
		addonErrorUI(addonName, result);
	}
}

function canAddonBeLoaded(weaponsArray)
{
	if(Array.isArray(weaponsArray))
	{
		for(var i in weaponsArray)
		{
			if(weaponsArray[i].weaponType == "gun")
			{
				var result = canGunBeLoaded(weaponsArray[i]);
				if(result != "yes")
				{
					return result;
				}
			}
		}

		return "yes";
	} else
	{
		return "The addon hasn't passed to the mod an array of weapons.";
	}
}

function canGunBeLoaded(gun)
{
	if(gun.name == null)
		return "You must set a name for every gun you add.";

	var defaultError = "Error in gun.name \"" + gun.name + "\": ";

	// the colon here fixes a bug with the code highlighting of sublime text:

	for(var i in defaultGuns)
	{
		if(defaultGuns[i].name == gun.name)
			return defaultError + "the name \"" + gun.name + "\" is already used in the DesnoGuns mod and can't be added.";
	}

	if(getGunTypeIdFromString(gun.gunType) == "error")
		return defaultError + gun.gunType + " is not a known gunType.";

	if(getButtonTypeIdFromString(gun.buttonType) == "error")
		return defaultError + gun.buttonType + " is not a known buttonType.";

	if(gun.id == null)
		return defaultError + "gun.id is not specified.";
	if(gun.id <= 512 || gun.id >= 4096)
		return defaultError + "gun.id must be > 512 and < 4096.";
	if(isItemAnIdTheModAlreadyUse(gun.id))
		return defaultError + "gun.id is already used in the mod.";

	if(gun.fireRate == null)
		return defaultError + "gun.fireRate is not specified.";
	if(gun.fireRate < 1)
		return defaultError + "gun.fireRate must be > or = 1.";

	if(gun.recoil == null)
		return defaultError + "gun.recoil is not specified.";
	if(gun.recoil <= 0)
		return defaultError + "gun.recoil must be > 0.";

	if(gun.bulletSpeed == null && getShotTypeIdFromString(gun.shotType) != SHOT_TYPE_FLAMETHROWER)
		return defaultError + "gun.bulletSpeed is not specified.";
	if(gun.bulletSpeed <= 0 && getShotTypeIdFromString(gun.shotType) != SHOT_TYPE_FLAMETHROWER)
		return defaultError + "gun.bulletSpeed must be > 0.";

	if(gun.zoomLevel == null)
		return defaultError + "gun.zoomLevel is not specified.";
	if(gun.zoomLevel <= 0 || gun.zoomLevel >= 68)
		return defaultError + "gun.zoomLevel must be > 0 and < 68.";

	if(gun.accuracy == null)
		return defaultError + "gun.accuracy is not specified.";
	if(gun.accuracy <= 0 || gun.accuracy >= 45)
		return defaultError + "gun.accuracy must be > 0 and < 45.";

	if(gun.texture == null)
		return defaultError + "gun.texture is not specified.";

	if(gun.ammo == null)
		return defaultError + "gun.ammo is not specified.";
	if(gun.ammo <= 0)
		return defaultError + "gun.ammo must be > 0.";

	if(gun.smoke != null && gun.smoke < 0)
		return defaultError + "gun.smoke must be > or = 0.";

	if(gun.recipeShape != null && gun.recipeShape.length != 3)
		return defaultError + "gun.recipeShape must be an array with 3 strings.";

	if(gun.recipeDescription != null && gun.recipeDescription.length % 3 != 0)
		return defaultError + "gun.recipeDescription doesn't seem to be well formatted.";

	// BEHAVIOR

	if(getShotTypeIdFromString(gun.shotType) == "error")
		return defaultError + gun.shotType + " is not a known shotType.";

	if(getBulletTypeIdFromString(gun.bulletType) == "error" && getShotTypeIdFromString(gun.shotType) != SHOT_TYPE_FLAMETHROWER)
		return defaultError + gun.bulletType + " is not a known bulletType.";

	if(getBulletTypeIdFromString(gun.bulletType) == BULLET_TYPE_CUSTOM_ENTITY && !(gun.customBulletId > 0))
		return defaultError + gun.customBulletId + " must be > 0 when using the \"custom\" bulletType.";

	if(gun.particleTrailDistance != null && gun.particleTrailDistance <= 0)
		return defaultError + "gun.particleTrailDistance must be > 0.";

	if(gun.particleTrailId != null && gun.particleTrailId <= 0)
		return defaultError + "gun.particleTrailId must be > 0.";

	if(getShotTypeIdFromString(gun.shotType) == SHOT_TYPE_SHOTGUN && !(gun.shotgunBullets > 0))
		return defaultError + "gun.shotgunBullets must be > 0.";

	if(getShotTypeIdFromString(gun.shotType) == SHOT_TYPE_SHOTGUN && !(gun.shotgunDegreesSpread > 0))
		return defaultError + "gun.shotgunDegreesSpread must be > 0.";

	if(getBulletTypeIdFromString(gun.bulletType) == BULLET_TYPE_NORMAL_EXPLOSIVE_ON_TIME && !(gun.bulletsExplosionDelay > 0))
		return defaultError + "gun.bulletsExplosionDelay must be > 0.";

	if(getBulletTypeIdFromString(gun.bulletType) == BULLET_TYPE_NORMAL_EXPLOSIVE_ON_TIME && !(gun.bulletsExplosionRadius > 0))
		return defaultError + "gun.bulletsExplosionRadius must be > 0.";

	if(getBulletTypeIdFromString(gun.bulletType) == BULLET_TYPE_NORMAL_EXPLOSIVE_ON_TOUCH && !(gun.bulletsExplosionRadius > 0))
		return defaultError + "gun.bulletsExplosionRadius must be > 0.";

	// SOUNDS

	if(!gun.hasntShootingSound)
	{
		if(gun.sound == null)
			return defaultError + "gun.sound is not specified.";
		if(!(isCustomSound(gun.sound) || isDefaultSound(gun.sound)))
			return defaultError + "gun.sound must be a string starting with custom/ if a custom sound from a texture pack is used, or desnoguns/ if a pre-installed sound is used.";
	}
	
	if(gun.reloadSound == null)
		return defaultError + "gun.reloadSound is not specified.";
	if(!(isCustomSound(gun.reloadSound) || isDefaultSound(gun.reloadSound)))
		return defaultError + "gun.reloadSound must be a string starting with custom/ if a custom sound from a texture pack is used, or desnoguns/ if a pre-installed sound is used.";

	if(getButtonTypeIdFromString(gun.buttonType) == BUTTON_TYPE_ON_TOUCH_WITH_WAIT)
	{
		if(gun.hasRandomWarmupSound)
			return defaultError + "gun.hasRandomWarmupSound is not yet supported.";
		if(gun.warmupSound == null)
			return defaultError + "gun.warmupSound is not specified.";
		if(!(isCustomSound(gun.warmupSound) || isDefaultSound(gun.warmupSound)))
			return defaultError + "gun.warmupSound must be a string starting with custom/ if a custom sound from a texture pack is used, or desnoguns/ if a pre-installed sound is used.";

		if(gun.spinSound == null)
			return defaultError + "gun.spinSound is not specified.";
		if(!(isCustomSound(gun.spinSound) || isDefaultSound(gun.spinSound)))
			return defaultError + "gun.spinSound must be a string starting with custom/ if a custom sound from a texture pack is used, or desnoguns/ if a pre-installed sound is used.";

		if(!gun.hasntCooldownSound)
		{
			if(gun.cooldownSound == null)
				return defaultError + "gun.cooldownSound is not specified.";
			if(!(isCustomSound(gun.cooldownSound) || isDefaultSound(gun.cooldownSound)))
				return defaultError + "gun.cooldownSound must be a string starting with custom/ if a custom sound from a texture pack is used, or desnoguns/ if a pre-installed sound is used.";
		}
	}


	return "yes";
}

function getGunTypeIdFromString(gunType)
{
	if(typeof gunType == "string")
		gunType = gunType.toLowerCase();
	else
		return "error";

	if(gunType == "assault_rifle")
		return GUN_TYPE_ASSAULT_RIFLE;
	if(gunType == "sub_machine")
		return GUN_TYPE_SUB_MACHINE;
	if(gunType == "light_machine")
		return GUN_TYPE_LIGHT_MACHINE;
	if(gunType == "sniper_rifle")
		return GUN_TYPE_SNIPER_RIFLE;
	if(gunType == "shotgun")
		return GUN_TYPE_SHOTGUN;
	if(gunType == "machine_pistol")
		return GUN_TYPE_MACHINE_PISTOL;
	if(gunType == "handgun")
		return GUN_TYPE_HANDGUN;
	if(gunType == "launcher")
		return GUN_TYPE_LAUNCHER;
	if(gunType == "minigun")
		return GUN_TYPE_MINIGUN;

	return "error";
}

function getButtonTypeIdFromString(buttonType)
{
	if(typeof buttonType == "string")
		buttonType = buttonType.toLowerCase();
	else
		return "error";

	if(buttonType == "on_click")
		return BUTTON_TYPE_ON_CLICK;
	if(buttonType == "on_touch")
		return BUTTON_TYPE_ON_TOUCH;
	if(buttonType == "on_touch_with_wait")
		return BUTTON_TYPE_ON_TOUCH_WITH_WAIT;

	return "error";
}

function getShotTypeIdFromString(shotType)
{
	if(typeof shotType == "string")
		shotType = shotType.toLowerCase();
	else
		return "error";

	if(shotType == "normal")
		return SHOT_TYPE_NORMAL;
	if(shotType == "shotgun")
		return SHOT_TYPE_SHOTGUN;
	if(shotType == "flamethrower")
		return SHOT_TYPE_FLAMETHROWER;

	return "error";
}

function getBulletTypeIdFromString(bulletType)
{
	if(typeof bulletType == "string")
		bulletType = bulletType.toLowerCase();
	else
		return "error";

	if(bulletType == "normal")
		return BULLET_TYPE_NORMAL;
	if(bulletType == "normal_explosive_on_touch")
		return BULLET_TYPE_NORMAL_EXPLOSIVE_ON_TOUCH;
	if(bulletType == "normal_explosive_on_time")
		return BULLET_TYPE_NORMAL_EXPLOSIVE_ON_TIME;
	if(bulletType == "tnt")
		return BULLET_TYPE_TNT;
	if(bulletType == "snowball")
		return BULLET_TYPE_SNOWBALL;
	if(bulletType == "custom")
		return BULLET_TYPE_CUSTOM_ENTITY;

	return "error";
}

function addonClass(array, addonName, addonDescription)
{
	this.name = addonName;
	this.description = addonDescription;

	// passed by reference by addons, if changed the addon will be changed too
	this.weaponsArray = array;

	this.gunsArray = [];
}
//########## LOAD ADDONS functions - END ##########


//########## LOADED ADDONS MANAGING functions ##########
function addLoadedAddonsInGame()
{
	// put a limit on the number of addons
	if(isPro())
	{
		//
		loadedAddons = limitLoadedAddonsArray(loadedAddons, 20);
	}
	else
	{
		if(loadedAddons.length > 2)
		{
			loadedAddons = limitLoadedAddonsArray(loadedAddons, 2);

			currentActivity.runOnUiThread(new java.lang.Runnable() {
				run: function() {
					android.widget.Toast.makeText(currentActivity, new android.text.Html.fromHtml("<b>DesnoGuns</b>: You can't have more than 2 addons enabled without the Pro Key."), 1).show();
				}
			});
		}
	}

	for(var i in loadedAddons)
	{
		// add tab
		addNewTab(i);

		// add guns
		for(var j in loadedAddons[i].weaponsArray)
		{
			var weapon = loadedAddons[i].weaponsArray[j];
			if(weapon.weaponType == "gun")
			{
				if(!isItemAGun(weapon.id)) // check if the id of this new gun isn't already present in the allGuns array
				{
					// this id isn't already used, we can add it safely to the game
					var gun = convertGunsStringsInIds(weapon);
					loadedAddons[i].gunsArray.push(gun);
					installSoundsOfGun(gun, loadedAddons[i].name);
					addNewGunFromAddon(gun, loadedAddons[i].name);
				} else
				{
					// the id of this new weapon is already used in another addon (the id was already checked for mod's ids)
					currentActivity.runOnUiThread(new java.lang.Runnable() {
						run: function() {
							android.widget.Toast.makeText(currentActivity, new android.text.Html.fromHtml("<b>DesnoGuns</b>: \"" + weapon.name + "\" of \"" + loadedAddons[i].name + "\" wasn't added because the id was already used by another addon."), 1).show();
						}
					});
				}
			}
		}
	}

	// show the user how many addons have been enabled
	if(loadedAddons.length > 0)
	{
		currentActivity.runOnUiThread(new java.lang.Runnable() {
			run: function() {
				android.widget.Toast.makeText(currentActivity, new android.text.Html.fromHtml("<b>DesnoGuns</b>: " + loadedAddons.length + " addon" + ((loadedAddons.length > 1) ? "s" : "") + " enabled!"), 0).show();
			}
		});
	}
}

function limitLoadedAddonsArray(array, limit)
{
	if(array.length > limit)
	{
		var newArray = [];
		for(var i = 0; i < limit; i++)
		{
			newArray[i] = array[i];
		}
		return newArray;
	} else
	{
		return array;
	}
}

function convertGunsStringsInIds(gun)
{
	// at this point we are already sure there aren't any errors in gunType and buttonType, they can be safely converted

	// the gun object is a reference to the object in the addon, we don't want to modify it directly
	var newGun = JSON.parse(JSON.stringify(gun)); // http://stackoverflow.com/questions/18359093/how-to-copy-javascript-object-to-new-variable-not-by-reference

	newGun.gunType = getGunTypeIdFromString(newGun.gunType);
	newGun.buttonType = getButtonTypeIdFromString(newGun.buttonType);
	newGun.shotType = getShotTypeIdFromString(newGun.shotType);
	newGun.bulletType = getBulletTypeIdFromString(newGun.bulletType);

	// remove pro features
	newGun.hasManualZoom = false;
	if(newGun.bulletType == BULLET_TYPE_INCENDIARY_SNOWBALL)
		newGun.bulletType = BULLET_TYPE_NORMAL;

	return newGun;
}

function addNewTab(index)
{
	var id = (TABS_STARTING_ID + parseInt(index));

	Item.defineItem(id, "transparent", 0, loadedAddons[index].name + " Divider", 1);
	Item.setCategory(id, ITEM_CATEGORY_TOOL);
	Player.addItemCreativeInv(id, 1);
}

function installSoundsOfGun(gun, addonName)
{
	if((!gun.hasntShootingSound) && gun.sound != null)
		installSoundFromSimplePath(gun.sound, gun.name, addonName);

	if(gun.reloadSound != null)
		installSoundFromSimplePath(gun.reloadSound, gun.name, addonName);

	if(gun.warmupSound != null) // Random warmup sound not supported
		installSoundFromSimplePath(gun.warmupSound, gun.name, addonName);

	if(gun.spinSound != null)
		installSoundFromSimplePath(gun.spinSound, gun.name, addonName);

	if((!gun.hasntCooldownSound) && gun.cooldownSound != null)
		installSoundFromSimplePath(gun.cooldownSound, gun.name, addonName);
}

function installSoundFromSimplePath(simplePath, gunName, addonName)
{
	try
	{
		if(isCustomSound(simplePath))
		{
			// sound in form: custom/path-in-texture-pack and it will be saved in ...sdcard/games/com.mojang/desnoguns-temp/path-in-texture-pack
			var pathInTexturePack = simplePath.substring(7);
			File.writeInputStreamToFile(ModPE.openInputStreamFromTexturePack(pathInTexturePack), getOriginalPathOfSound(simplePath));
			return;
		}

		if(isDefaultSound(simplePath))
		{
			// no need to install
			// TODO maybe check if the sound exists and warning user if it doesn't
			return;
		}

		print(Log.getLogPrefix() + "Error with " + addonName + " installation impossible. No /custom no /desnoguns");
		
	} catch(e)
	{
		errorWithAddonResources("Seems that you haven't installed the texture pack of \"" + addonName + "\".<br><br>Please install the texture pack of the addon and <b>restart BlockLauncher</b>.<br><br>Error in " + gunName + ": the sound \"" + simplePath + "\" hasn't been found.");
		Log.log("installSoundFromSimplePath(): Error: " + e);
	}
}

function addNewGunFromAddon(gun, addonName)
{
	// add gun to the main array
	allGuns.push(new gunClass(gun));

	// create gun
	if(gun.textureNumber > 0)
	{
		try
		{
			ModPE.setItem(gun.id, gun.texture, gun.textureNumber, gun.name, 1);
		} catch(e)
		{
			ModPE.setItem(gun.id, "skull_zombie", 0, gun.name, 1);
			errorWithAddonResources("Seems that you haven't installed the texture pack of \"" + addonName + "\".<br><br>Please install the texture pack of the addon and <b>restart BlockLauncher</b>.<br><br>Error in " + gun.name + ": the texture \"" + gun.texture + "\" hasn't been found.");
		}	
	}
	else
	{
		try
		{
			ModPE.setItem(gun.id, gun.texture, 0, gun.name, 1);
		} catch(e)
		{
			ModPE.setItem(gun.id, "skull_zombie", 0, gun.name, 1);
			errorWithAddonResources("Seems that you haven't installed the \"" + addonName + "\" texture pack.<br><br>Please install the texture pack of the addon and <b>restart BlockLauncher</b>.<br><br>Error in " + gun.name + ": the texture \"" + gun.texture + "\" hasn't been found.");
		}	
	}
	addGunCraftingRecipe(gun);
	Item.setMaxDamage(gun.id, gun.ammo);
	Item.setVerticalRender(gun.id);
	Item.setCategory(gun.id, ITEM_CATEGORY_TOOL);
	Player.addItemCreativeInv(gun.id, 1);
}
//########## LOADED ADDONS MANAGING functions - END ##########


//########## ADD GUNS TO GAME functions ##########
function addNewGun(gun)
{
	// add gun to the main array
	allGuns.push(new gunClass(gun));

	// create gun
	if(gun.textureNumber > 0)
		Item.defineItem(gun.id, gun.texture, gun.textureNumber, gun.name, 1);
	else
		Item.defineItem(gun.id, gun.texture, 0, gun.name, 1);
	addGunCraftingRecipe(gun);
	Item.setMaxDamage(gun.id, gun.ammo);
	Item.setVerticalRender(gun.id);
	Item.setCategory(gun.id, ITEM_CATEGORY_TOOL);
	Player.addItemCreativeInv(gun.id, 1);
}

function addGunCraftingRecipe(gun)
{
	if(gun.recipeShape == null || gun.recipeDescription == null)
		Item.addShapedRecipe(gun.id, 1, 0, getDefaultCraftingRecipeForGunType(gun.gunType), ["i", 265, 0, "r", 331, 0, "a", AMMO_ASSAULT_RIFLE_ID, 0, "b", AMMO_SUB_MACHINE_ID, 0, "c", AMMO_LIGHT_MACHINE_ID, 0, "d", AMMO_SNIPER_RIFLE_ID, 0, "e", AMMO_SHOTGUN_ID, 0, "f", AMMO_MACHINE_PISTOL_ID, 0, "g", AMMO_HANDGUN_ID, 0, "h", AMMO_LAUNCHER_ID, 0, "j", AMMO_MINIGUN_ID, 0]);
	else
		Item.addShapedRecipe(gun.id, 1, 0, gun.recipeShape, gun.recipeDescription);
}

function getDefaultCraftingRecipeForGunType(gunType)
{
	switch(gunType)
	{
		case GUN_TYPE_ASSAULT_RIFLE:
		{
			return [
				" a ",
				"iri",
				"iri"];
		}
		case GUN_TYPE_SUB_MACHINE:
		{
			return [
				" b ",
				"iri",
				"iri"];
		}
		case GUN_TYPE_LIGHT_MACHINE:
		{
			return [
				" c ",
				"iri",
				"iri"];
		}
		case GUN_TYPE_SNIPER_RIFLE:
		{
			return [
				" d ",
				"iri",
				"iri"];
		}
		case GUN_TYPE_SHOTGUN:
		{
			return [
				" e ",
				"iri",
				"iri"];
		}
		case GUN_TYPE_MACHINE_PISTOL:
		{
			return [
				" f ",
				"iri",
				"iri"];
		}
		case GUN_TYPE_HANDGUN:
		{
			return [
				" g ",
				"iri",
				"iri"];
		}
		case GUN_TYPE_LAUNCHER:
		{
			return [
				" h ",
				"iri",
				"iri"];
		}
		case GUN_TYPE_MINIGUN:
		{
			return [
				" j ",
				"iri",
				"iri"];
		}
	}
}

function gunClass(gun)
{
	var gunObject = gun;
	gunObject.bulletsArray = [];

	return gunObject;
}
//########## ADD GUNS TO GAME functions - END ##########


//########## WEAPONS functions ##########
function isItemAGun(itemId)
{
	for(var i in allGuns)
	{
		if(allGuns[i].id == itemId)
			return true;
	}
	return false;
}

function isItemADefaultGun(itemId)
{
	for(var i in defaultGuns)
	{
		if(itemId == defaultGuns[i].id)
			return true;
	}
	return false;
}

function isItemAnIdTheModAlreadyUse(itemId)
{
	if(isItemADefaultGun(itemId))
		return true;


	if(itemId >= TABS_STARTING_ID && itemId <= TABS_ENDING_ID)
		return true;


	if(itemId == AMMO_ASSAULT_RIFLE_ID || itemId == AMMO_SUB_MACHINE_ID || itemId == AMMO_LIGHT_MACHINE_ID || itemId == AMMO_SNIPER_RIFLE_ID || itemId == AMMO_MACHINE_PISTOL_ID || itemId == AMMO_SHOTGUN_ID || itemId == AMMO_HANDGUN_ID || itemId == AMMO_LAUNCHER_ID || itemId == AMMO_MINIGUN_ID || itemId == AMMO_ARROW_EXPLOSIVE_ID)
		return true;


	if(itemId == INFO_ITEM_ID)
		return true;

	if(itemId == KNIFE_ID)
		return true;

	if(itemId == RIOT_SHIELD_ID)
		return true;

	if(itemId == PARACHUTE_ID)
		return true;

	if(itemId == MEDICAL_KIT_ID)
		return true;

	if(itemId == BINOCULARS.id)
		return true;

	if(itemId == ZOOM_BINOCULARS.id)
		return true;


	if(itemId == GRENADE.id)
		return true;

	if(itemId == FRAGMENT.id)
		return true;

	if(itemId == MOLOTOV.id)
		return true;

	if(itemId == SMOKE.id)
		return true;


	if(itemId == JUGGERNAUT_HELMET_ID)
		return true;

	if(itemId == JUGGERNAUT_BODY_ID)
		return true;

	if(itemId == JUGGERNAUT_PANTS_ID)
		return true;

	if(itemId == JUGGERNAUT_BOOTS_ID)
		return true;

	return false;
}

function shootGrenadeHand(grenadeObject)
{
	var yawAccuracyValue = ((Math.random() * RANDOMNESS) - (RANDOMNESS / 2)) * grenadeObject.accuracy;
	var pitchAccuracyValue = ((Math.random() * RANDOMNESS) - (RANDOMNESS / 2)) * grenadeObject.accuracy;
	var playerShootDir = DesnoUtils.getVector(getYaw() + yawAccuracyValue, getPitch() + pitchAccuracyValue);

	var handShootDir = DesnoUtils.getVector(getYaw() + 30, getPitch());

	if(grenadeObject.explodeOnTouch)
		var grenade = Level.spawnMob(getPlayerX() + (handShootDir.x * 2), getPlayerY() + (handShootDir.y * 2.5), getPlayerZ() + (handShootDir.z * 2), 81);
	else
	{
		var grenade = Level.spawnMob(getPlayerX() + (handShootDir.x * 2), getPlayerY() + (handShootDir.y * 2.5), getPlayerZ() + (handShootDir.z * 2), 11);
		Entity.setHealth(grenade, 99999);
	}
	setVelX(grenade, playerShootDir.x * grenadeObject.grenadeSpeed);
	setVelY(grenade, playerShootDir.y * grenadeObject.grenadeSpeed);
	setVelZ(grenade, playerShootDir.z * grenadeObject.grenadeSpeed);
	if(grenadeObject.id == GRENADE.id || grenadeObject.id == SMOKE.id)
	{
		Entity.setGrenadeRender(grenade);
		Entity.setMobSkin(grenade, "mob/grenade.png");
	}
	if(grenadeObject.id == FRAGMENT.id)
	{
		Entity.setGrenadeRender(grenade);
		Entity.setMobSkin(grenade, "mob/fraggrenade.png");
	}

	if(grenadeObject.isWithFire)
		Entity.setFireTicks(grenade, 1000);

	if(grenadeObject.id == SMOKE.id)
		grenadeObject.grenadesArray.push(new smokeGrenadeClass(grenade));
	else
		grenadeObject.grenadesArray.push(new entityClass(grenade));

	if(!grenadeObject.explodeOnTouch)
	{
		if(grenadeObject.id == FRAGMENT.id)
		{
			new android.os.Handler().postDelayed(new java.lang.Runnable(
			{
				run: function()
				{
					if(isInGame && FRAGMENT.grenadesArray.length > 0)
					{
						// push() put the object at the end so the first object ( [0] ) is the object that will explode
						var explosionX = Entity.getX(FRAGMENT.grenadesArray[0].entity);
						var explosionY = Entity.getY(FRAGMENT.grenadesArray[0].entity);
						var explosionZ = Entity.getZ(FRAGMENT.grenadesArray[0].entity);
						Entity.remove(FRAGMENT.grenadesArray[0].entity);
						FRAGMENT.grenadesArray.splice(0, 1);

						for(var i = 0; i < FRAGMENT.howManyFragments; i++)
						{
							var fragment = Level.spawnMob(explosionX + ((Math.random() * 2) - 1), explosionY + ((Math.random() * 2) - 1), explosionZ + ((Math.random() * 2) - 1), 11);
							Entity.setHealth(fragment, 99999);
							Entity.setGrenadeRender(fragment);
							Entity.setMobSkin(fragment, "mob/fraggrenade.png");
							FRAGMENT.fragmentArray.push(new entityClass(fragment));

							new android.os.Handler().postDelayed(new java.lang.Runnable(
							{
								run: function()
								{
									if(isInGame && FRAGMENT.fragmentArray.length > 0)
									{
										if(infiniteGrenade)
										{
											fragmentShit();
										} else
										{
											var fragmentX = Entity.getX(FRAGMENT.fragmentArray[0].entity);
											var fragmentY = Entity.getY(FRAGMENT.fragmentArray[0].entity);
											var fragmentZ = Entity.getZ(FRAGMENT.fragmentArray[0].entity);
											Entity.remove(FRAGMENT.fragmentArray[0].entity);
											FRAGMENT.fragmentArray.splice(0, 1);

											Level.explode(fragmentX, fragmentY, fragmentZ, FRAGMENT.grenadesExplosionRadius);
										}
									}
								}
							}), FRAGMENT.fragmentDelay);
						}

						Level.explode(explosionX, explosionY, explosionZ, FRAGMENT.grenadesExplosionRadius);
					}
				}
			}), grenadeObject.delay);
		}

		if(grenadeObject.id == GRENADE.id)
		{
			new android.os.Handler().postDelayed(new java.lang.Runnable(
			{
				run: function()
				{
					if(isInGame && GRENADE.grenadesArray.length > 0)
					{
						// push() put the object at the end so the first object ( [0] ) is the object that will explode
						var explosionX = Entity.getX(GRENADE.grenadesArray[0].entity);
						var explosionY = Entity.getY(GRENADE.grenadesArray[0].entity);
						var explosionZ = Entity.getZ(GRENADE.grenadesArray[0].entity);
						Entity.remove(GRENADE.grenadesArray[0].entity);
						GRENADE.grenadesArray.splice(0, 1);

						Level.explode(explosionX, explosionY, explosionZ, GRENADE.grenadesExplosionRadius);
					}
				}
			}), grenadeObject.delay);
		}

		if(grenadeObject.id == SMOKE.id)
		{
			new android.os.Handler().postDelayed(new java.lang.Runnable(
			{
				run: function()
				{
					if(isInGame && SMOKE.grenadesArray.length > 0)
					{
						var entity = SMOKE.grenadesArray[0].entity;
						SMOKE.grenadesArray.splice(0, 1);
						Entity.remove(entity);
					}
				}
			}), grenadeObject.delay);

			new android.os.Handler().postDelayed(new java.lang.Runnable(
			{
				run: function()
				{
					if(isInGame && SMOKE.grenadesArray.length > 0)
					{
						players = Server.getAllPlayers();
					}
				}
			}), 1);

			playSoundFromSimplePath("desnoguns/smoke-grenade.mp3");
		}
	}
}

function fragmentShit()
{
	// different number of fragments and different delay

	var explosionX = Entity.getX(FRAGMENT.fragmentArray[0].entity);
	var explosionY = Entity.getY(FRAGMENT.fragmentArray[0].entity);
	var explosionZ = Entity.getZ(FRAGMENT.fragmentArray[0].entity);
	Entity.remove(FRAGMENT.fragmentArray[0].entity);
	FRAGMENT.fragmentArray.splice(0, 1);

	for(var i = 0; i < 2; i++)
	{
		var fragment = Level.spawnMob(explosionX + ((Math.random() * 2) - 1), explosionY + ((Math.random() * 2) - 1), explosionZ + ((Math.random() * 2) - 1), 11);
		Entity.setHealth(fragment, 99999);
		Entity.setGrenadeRender(fragment);
		Entity.setMobSkin(fragment, "mob/fraggrenade.png");
		FRAGMENT.fragmentArray.push(new entityClass(fragment));

		new android.os.Handler().postDelayed(new java.lang.Runnable(
		{
			run: function()
			{
				if(isInGame && FRAGMENT.fragmentArray.length > 0)
				{
					fragmentShit();
				}
			}
		}), FRAGMENT.fragmentDelay * 2);
	}

	Level.explode(explosionX, explosionY, explosionZ, FRAGMENT.grenadesExplosionRadius);
}

function smokeGrenadeClass(entity)
{
	var smokeObject = new entityClass(entity);
	smokeObject.effectsTick = 0;
	return smokeObject;
}

function getWeaponObject(id)
{
	if(isItemAGun(id))
		return getGun(id);

	if(id == BINOCULARS.id)
		return BINOCULARS;

	if(id == ZOOM_BINOCULARS.id)
		return ZOOM_BINOCULARS;
}

function getGun(id)
{
	var currentGun = -1;

	findTheGun:
	for(var i in allGuns)
	{
		if(id == allGuns[i].id)
		{
			currentGun = allGuns[i];
			break findTheGun;
		}
	}

	// gun not found
	if(currentGun == -1)
	{
		clientMessage("Error: gun not found in getGun(): " + id);
		currentGun = AK47;
	}

	return currentGun;
}

function getGunTypeName(gunType)
{
	switch(gunType)
	{
		case GUN_TYPE_ASSAULT_RIFLE:
		{
			return "Assault Rifle";
		}
		case GUN_TYPE_SUB_MACHINE:
		{
			return "Sub Machine";
		}
		case GUN_TYPE_LIGHT_MACHINE:
		{
			return "Light Machine";
		}
		case GUN_TYPE_SNIPER_RIFLE:
		{
			return "Sniper Rifle";
		}
		case GUN_TYPE_SHOTGUN:
		{
			return "Shotgun";
		}
		case GUN_TYPE_MACHINE_PISTOL:
		{
			return "Machine Pistol";
		}
		case GUN_TYPE_HANDGUN:
		{
			return "Handgun";
		}
		case GUN_TYPE_LAUNCHER:
		{
			return "Launcher";
		}
		case GUN_TYPE_MINIGUN:
		{
			return "Minigun";
		}
	}
}

function setUpGunsWithDate()
{
	var cal = java.util.Calendar.getInstance();
	var day = cal.get(java.util.Calendar.DAY_OF_MONTH);
	var month = cal.get(java.util.Calendar.MONTH);

	if((day > 6 && month == java.util.Calendar.JANUARY) || month == java.util.Calendar.FEBRUARY || (day <= 21 && month == java.util.Calendar.MARCH))
	{
		// winter after Xmas period
		XMAS_SNIPER.name = "Winter Sniper";
		XMAS_MINIGUN.name = "Winter Minigun";
		defaultGuns.push(XMAS_MINIGUN);
		defaultGuns.push(XMAS_SNIPER);
	}

	if(month == java.util.Calendar.DECEMBER || (day <= 6 && month == java.util.Calendar.JANUARY))
	{
		// Xmas period
		defaultGuns.push(XMAS_MINIGUN);
		defaultGuns.push(XMAS_SNIPER);
	}
}
//########## WEAPONS functions - END ##########


//########## SHOOT WITH GUNS functions ##########
function shoot(gun)
{
	if(gun.shotType == SHOT_TYPE_NORMAL)
	{
		shootSingleBullet(gun);
		return;
	}

	if(gun.shotType == SHOT_TYPE_SHOTGUN)
	{
		shootShotgun(gun);
		return;
	}

	if(gun.shotType == SHOT_TYPE_FLAMETHROWER)
	{
		shootFlamethrower(gun);
		return;
	}

	clientMessage("Something went wrong in shoot() with " + gun.name);
}

function shootSingleBullet(gun)
{
	// a single bullet

	var gunAccuracy = getDefaultAccuracy(gun);

	var yawAccuracyValue = ((Math.random() * RANDOMNESS) - (RANDOMNESS / 2)) * gunAccuracy;
	var pitchAccuracyValue = ((Math.random() * RANDOMNESS) - (RANDOMNESS / 2)) * gunAccuracy;

	var gunShootDir = DesnoUtils.getVector(getYaw() + yawAccuracyValue, getPitch() + pitchAccuracyValue);

	var bullet = shootEntity(gun, getEntityIdForBulletType(gun), gunShootDir);

	if(gun.bulletType == BULLET_TYPE_INCENDIARY_SNOWBALL)
		Entity.setFireTicks(bullet, 1000);

	if(gun.hasParticleTrail || gun.bulletType == BULLET_TYPE_NORMAL_EXPLOSIVE_ON_TOUCH || gun.bulletType == BULLET_TYPE_NORMAL_EXPLOSIVE_ON_TIME || gun.bulletType == BULLET_TYPE_INCENDIARY_SNOWBALL)
		gun.bulletsArray.push(new entityClass(bullet));

	if(gun.bulletType == BULLET_TYPE_NORMAL_EXPLOSIVE_ON_TIME)
	{
		playSoundFromSimplePath("desnoguns/explosion-countdown.wav");

		new android.os.Handler().postDelayed(new java.lang.Runnable(
		{
			run: function()
			{
				if(isInGame && gun.bulletsArray.length > 0) // gun.bulletsArray.length > 0 fix a crash that happens when the player shoot an explosive bullet, exit the world and re-enter in the world
				{
					var explosionX = Entity.getX(gun.bulletsArray[0].entity);
					var explosionY = Entity.getY(gun.bulletsArray[0].entity);
					var explosionZ = Entity.getZ(gun.bulletsArray[0].entity);

					if(explosionX == 0 && explosionY == 0 && explosionZ == 0)
					{
						// arrow hit an entity
						Entity.remove(gun.bulletsArray[0].entity);
						Level.explode(gun.bulletsArray[0].previousX, gun.bulletsArray[0].previousY - 1, gun.bulletsArray[0].previousZ, gun.bulletsExplosionRadius); // y - 1 because usually the arrow is removed when it hits an entity and the explosion happens on a previous position that is not on the ground.
					} else
					{
						Entity.remove(gun.bulletsArray[0].entity);
						Level.explode(explosionX, explosionY, explosionZ, gun.bulletsExplosionRadius);
					}
					gun.bulletsArray.splice(0, 1);
				}
			}
		}), gun.bulletsExplosionDelay);
	}
}

function shootShotgun(gun)
{
	// multiple arrows

	for(var i = 0; i < gun.shotgunBullets; i++)
	{
		if(gun.shotgunWait > 0)
		{
			new android.os.Handler().postDelayed(new java.lang.Runnable(
			{
				run: function()
				{
					if(isInGame)
					{
						shootSingleShotgunBullet(gun);
					}
				}
			}), i * gun.shotgunWait);
		} else
		{
			shootSingleShotgunBullet(gun);
		}
	}

	if(gun.bulletType == BULLET_TYPE_NORMAL_EXPLOSIVE_ON_TIME)
		playSoundFromSimplePath("desnoguns/explosion-countdown.wav");
}

function shootSingleShotgunBullet(gun)
{
	// a single bullet but with yaw and pitch accuracy of the shotgun

	var gunAccuracy = getDefaultAccuracy(gun);

	var yawAccuracyValue = ((Math.random() * RANDOMNESS) - (RANDOMNESS / 2)) * gunAccuracy;
	var pitchAccuracyValue = ((Math.random() * RANDOMNESS) - (RANDOMNESS / 2)) * gunAccuracy;

	var yawAccuracyShotgun = ((Math.random() * gun.shotgunDegreesSpread) - (gun.shotgunDegreesSpread / 2));
	var pitchAccuracyShotgun = ((Math.random() * gun.shotgunDegreesSpread) - (gun.shotgunDegreesSpread / 2));

	var gunShootDir = DesnoUtils.getVector(getYaw() + yawAccuracyValue + yawAccuracyShotgun, getPitch() + pitchAccuracyValue + pitchAccuracyShotgun);

	var bullet = shootEntity(gun, getEntityIdForBulletType(gun), gunShootDir);

	if(gun.bulletType == BULLET_TYPE_INCENDIARY_SNOWBALL)
		Entity.setFireTicks(bullet, 1000);

	if(gun.hasParticleTrail || gun.bulletType == BULLET_TYPE_NORMAL_EXPLOSIVE_ON_TOUCH || gun.bulletType == BULLET_TYPE_NORMAL_EXPLOSIVE_ON_TIME || gun.bulletType == BULLET_TYPE_INCENDIARY_SNOWBALL)
		gun.bulletsArray.push(new entityClass(bullet));

	if(gun.bulletType == BULLET_TYPE_NORMAL_EXPLOSIVE_ON_TIME)
	{
		new android.os.Handler().postDelayed(new java.lang.Runnable(
		{
			run: function()
			{
				if(isInGame && gun.bulletsArray.length > 0) // gun.bulletsArray.length > 0 fix a crash that happens when the player shoot an explosive bullet, exit the world and re-enter in the world
				{
					var explosionX = Entity.getX(gun.bulletsArray[0].entity);
					var explosionY = Entity.getY(gun.bulletsArray[0].entity);
					var explosionZ = Entity.getZ(gun.bulletsArray[0].entity);

					if(explosionX == 0 && explosionY == 0 && explosionZ == 0)
					{
						// arrow hit an entity
						Entity.remove(gun.bulletsArray[0].entity);
						Level.explode(gun.bulletsArray[0].previousX, gun.bulletsArray[0].previousY - 1, gun.bulletsArray[0].previousZ, gun.bulletsExplosionRadius); // y - 1 because usually the arrow is removed when it hits an entity and the explosion happens on a previous position that is not on the ground.
					} else
					{
						Entity.remove(gun.bulletsArray[0].entity);
						Level.explode(explosionX, explosionY, explosionZ, gun.bulletsExplosionRadius);
					}
					gun.bulletsArray.splice(0, 1);
				}
			}
		}), gun.bulletsExplosionDelay);
	}
}

function shootFlamethrower(gun)
{
	// fire

	var gunAccuracy = getDefaultAccuracy(gun);

	var yawAccuracyValue = ((Math.random() * RANDOMNESS) - (RANDOMNESS / 2)) * gun.accuracy;
	var pitchAccuracyValue = ((Math.random() * RANDOMNESS) - (RANDOMNESS / 2)) * gun.accuracy;
	var playerShootDir = DesnoUtils.getVector(getYaw() + yawAccuracyValue, getPitch() + pitchAccuracyValue);

	var flameShootDir = DesnoUtils.getVector(getYaw() + 45, getPitch());

	var xDir;
	var yDir;
	var zDir;
	var tile;

	// particles near the player
	xDir = Player.getX() + (playerShootDir.x * 0.75) + flameShootDir.x;
	yDir = Player.getY() + (playerShootDir.y * 0.75) - 0.3;
	zDir = Player.getZ() + (playerShootDir.z * 0.75) + flameShootDir.z;

	Level.addParticle(ParticleType.flame, xDir + Math.random() - 0.5, yDir, zDir + Math.random() - 0.5, playerShootDir.x * 0.05, playerShootDir.y * 0.05, playerShootDir.z * 0.05, 1);
	Level.addParticle(ParticleType.flame, xDir - Math.random() + 0.5, yDir, zDir - Math.random() + 0.5, playerShootDir.x * 0.05, playerShootDir.y * 0.05, playerShootDir.z * 0.05, 1);


	// first flame tick
	xDir = Player.getX() + (playerShootDir.x * flameTick) + flameShootDir.x;
	yDir = Player.getY() + (playerShootDir.y * flameTick) - 0.3;
	zDir = Player.getZ() + (playerShootDir.z * flameTick) + flameShootDir.z;

	tile = Level.getTile(Math.floor(xDir), Math.floor(yDir), Math.floor(zDir));

	if(tile == 0 || tile == 31) // 31 grass
	{
		if(flameTick > 5)
		{
			Level.setTile(Math.floor(xDir), Math.floor(yDir), Math.floor(zDir), 51);
		} else
		{
			Level.setTile(Math.floor(xDir), Math.floor(yDir), Math.floor(zDir), 51);
		}
	}

	Level.addParticle(ParticleType.flame, xDir + Math.random() - 0.5, yDir, zDir + Math.random() - 0.5, playerShootDir.x * 0.05, playerShootDir.y * 0.05, playerShootDir.z * 0.05, 1);
	Level.addParticle(ParticleType.flame, xDir - Math.random() + 0.5, yDir, zDir - Math.random() + 0.5, playerShootDir.x * 0.05, playerShootDir.y * 0.05, playerShootDir.z * 0.05, 1);


	flameTick += 0.5;


	// second flame tick
	xDir = Player.getX() + (playerShootDir.x * flameTick) + flameShootDir.x;
	yDir = Player.getY() + (playerShootDir.y * flameTick) - 0.3;
	zDir = Player.getZ() + (playerShootDir.z * flameTick) + flameShootDir.z;

	tile = Level.getTile(Math.floor(xDir), Math.floor(yDir), Math.floor(zDir));

	if(tile == 0 || tile == 31) // 31 grass
		Level.setTile(Math.floor(xDir), Math.floor(yDir), Math.floor(zDir), 51);

	Level.addParticle(ParticleType.flame, xDir + Math.random() - 0.5, yDir, zDir + Math.random() - 0.5, playerShootDir.x * 0.05, playerShootDir.y * 0.05, playerShootDir.z * 0.05, 1);
	Level.addParticle(ParticleType.flame, xDir - Math.random() + 0.5, yDir, zDir - Math.random() + 0.5, playerShootDir.x * 0.05, playerShootDir.y * 0.05, playerShootDir.z * 0.05, 1);


	flameTick += 0.5;

	if(flameTick > 10)
		flameTick = 2;
}

function shootEntity(gun, entityId, playerDir, arrowDir)
{
	if(arrowDir == null)
		arrowDir = playerDir;

	var bullet = Level.spawnMob(getPlayerX() + (playerDir.x * 2), getPlayerY() + (playerDir.y * 2.5), getPlayerZ() + (playerDir.z * 2), entityId);
	setVelX(bullet, arrowDir.x * gun.bulletSpeed);
	setVelY(bullet, arrowDir.y * gun.bulletSpeed);
	setVelZ(bullet, arrowDir.z * gun.bulletSpeed);

	return bullet;
}

function getDefaultAccuracy(gun)
{
	if(isAiming)
	{
		return gun.accuracy - 1;
	} else
	{
		if(gun.gunType == GUN_TYPE_SNIPER_RIFLE)
			return gun.accuracy + 25;
		else
			return gun.accuracy;
	}
}

function getEntityIdForBulletType(gun)
{
	if(gun.bulletType == BULLET_TYPE_NORMAL || gun.bulletType == BULLET_TYPE_NORMAL_EXPLOSIVE_ON_TOUCH || gun.bulletType == BULLET_TYPE_NORMAL_EXPLOSIVE_ON_TIME)
		return 80;

	if(gun.bulletType == BULLET_TYPE_TNT)
		return 65;

	if(gun.bulletType == BULLET_TYPE_SNOWBALL || gun.bulletType == BULLET_TYPE_INCENDIARY_SNOWBALL)
		return 81;

	if(gun.bulletType == BULLET_TYPE_CUSTOM_ENTITY)
		return gun.customBulletId;
}

function showCloudParticle(amount)
{
	if(amount > 0)
	{
		new android.os.Handler().postDelayed(new java.lang.Runnable(
		{
			run: function()
			{
				if(isInGame)
				{
					var gunDir = DesnoUtils.getVector(getYaw() + 30, getPitch());
					for(var i = 0; i < amount; i++)
						Level.addParticle(4, getPlayerX() + (gunDir.x * 1.5), getPlayerY() + (gunDir.y * 1.5), getPlayerZ() + (gunDir.z * 1.5), 0, 0, 0, 1);
				}
			}
		}), 250);
	}
}
//########## SHOOT WITH GUNS functions - END ##########


//########## ON CLICK GUNS functions ##########
function onClickWeaponShoot(gun)
{
	if(latestShotTime == null || java.lang.System.currentTimeMillis() > (latestShotTime + (gun.fireRate * 50)))
	{
		if(shouldReload())
		{
			// survival or creative with reload option enabled
			onClickShootWithReload(gun);
		} else
		{
			// creative with reload option disabled
			onClickShootWithoutReload(gun);
		}
	}
}

function onClickShootWithReload(gun)
{
	if(Player.getCarriedItemData() >= gun.ammo)
	{
		playSoundFromSimplePath("desnoguns/EmptyGun.ogg");
		ModPE.showTipMessage("Press the ammo text to reload.");
	} else
	{
		stopReloading();
		Sound.playLoadedSoundPool(null, generalVolume);
		shoot(gun);
		damageCarriedGun(gun);
		latestShotTime = java.lang.System.currentTimeMillis();
		showCloudParticle(gun.smoke);
		Recoil.makeRecoil(gun);
	}
}

function onClickShootWithoutReload(gun)
{
	Sound.playLoadedSoundPool(null, generalVolume);
	shoot(gun);
	latestShotTime = java.lang.System.currentTimeMillis();
	showCloudParticle(gun.smoke);
	Recoil.makeRecoil(gun);
}
//########## ON CLICK GUNS functions - END ##########


//########## ON TOUCH GUNS functions ##########
function onTouchWeaponShoot(event, gun, reload)
{
	var action = event.getActionMasked();
	if(action == android.view.MotionEvent.ACTION_CANCEL || action == android.view.MotionEvent.ACTION_UP)
	{
		isShooting = false;
		showCloudParticle(gun.smoke);
	} else
	{
		if(!isShooting)
		{
			isShooting = true;
			currentShotTicks = gun.fireRate;
			if(reload)
				onTouchShootingRunnableWithReload(gun);
			else
				onTouchShootingRunnableWithoutReload(gun);
		}
	}
}

function onTouchShootingRunnableWithReload(gun)
{
	shootingRunnable = (new java.lang.Runnable(
	{
		run: function()
		{
			if(currentShotTicks == gun.fireRate)
			{
				if(Player.getCarriedItemData() >= gun.ammo)
				{
					playSoundFromSimplePath("desnoguns/EmptyGun.ogg");
					ModPE.showTipMessage("Press the ammo text to reload.");
				} else
				{
					stopReloading();
					currentShotTicks = 0;
					Sound.playLoadedSoundPool(GUNS_ON_TOUCH_SHOOT_VOLUME, generalVolume);
					shoot(gun);
					damageCarriedGun(gun);
					Recoil.makeRecoil(gun);
				}
			}
			currentShotTicks++;
		}
	}));
}

function onTouchShootingRunnableWithoutReload(gun)
{
	shootingRunnable = (new java.lang.Runnable(
	{
		run: function()
		{
			if(currentShotTicks == gun.fireRate)
			{
				currentShotTicks = 0;
				Sound.playLoadedSoundPool(GUNS_ON_TOUCH_SHOOT_VOLUME, generalVolume);
				shoot(gun);
				Recoil.makeRecoil(gun);
			}
			currentShotTicks++;
		}
	}));
}
//########## ON TOUCH GUNS functions - END ##########


//########## ON TOUCH WITH WAIT GUNS functions ##########
function onTouchWithWaitWeaponShoot(event, gun, reload)
{
	var action = event.getActionMasked();
	if(action == android.view.MotionEvent.ACTION_CANCEL || action == android.view.MotionEvent.ACTION_UP)
	{
		onTouchWithWaitWeaponButtonReleased(gun);
	} else
	{
		if(!isShooting && !isTouchingFireButtonGunsWithWait)
		{
			try
			{
				var warmupSoundString;
				if(gun.hasRandomWarmupSound)
					warmupSoundString = createRandomString(gun.warmupSound);
				else
					warmupSoundString = gun.warmupSound;

				isTouchingFireButtonGunsWithWait = true;
				gunWarmupSound.reset();
				gunWarmupSound.setDataSource(getOriginalPathOfSound(warmupSoundString));
				gunWarmupSound.setVolume(generalVolume, generalVolume);
				gunWarmupSound.prepare();
				gunWarmupSound.setOnCompletionListener(new android.media.MediaPlayer.OnCompletionListener()
				{
					onCompletion: function(mp)
					{
						if(isTouchingFireButtonGunsWithWait)
						{
							isShooting = true;
							gunSpinSound.start();
							currentShotTicks = gun.fireRate;
							if(reload)
								onTouchWithWaitShootingRunnableWithReload(gun);
							else
								onTouchWithWaitShootingRunnableWithoutReload(gun);
						}
					}
				});
				gunWarmupSound.start();
			} catch(e) {
				Log.log("Error in onTouchWithWaitWeaponShoot(): " + e);
				clientMessage("The minigun needs sounds to work properly.");
			}
		}
	}
}

function onTouchWithWaitWeaponButtonReleased(gun)
{
	if(gun.isFlamethrower)
		flameTick = 2;

	isTouchingFireButtonGunsWithWait = false;
	if(gunWarmupSound.isPlaying())
		gunWarmupSound.stop();
	if(isShooting)
		showCloudParticle(gun.smoke);
	isShooting = false;
	try {
		gunSpinSound.stop();
		gunSpinSound.prepareAsync();
	} catch(e) {
		// sometimes an error happens also if you have sounds installed correctly and I didn't find why
		clientMessage("A wild error appeared. See log.");
		Log.log("Error in onTouchWithWaitWeaponButtonReleased(): " + e);
		try {
			gunSpinSound.reset();
			gunSpinSound.setDataSource(getOriginalPathOfSound(gun.spinSound));
			gunSpinSound.setLooping(true);
			gunSpinSound.setVolume(generalVolume, generalVolume);
			gunSpinSound.prepareAsync();
		} catch(e) { /* sounds not installed */ }
	}

	if(!gun.hasntCooldownSound)
		playSoundFromSimplePath(gun.cooldownSound);
}

function onTouchWithWaitShootingRunnableWithReload(gun)
{
	shootingRunnable = (new java.lang.Runnable(
	{
		run: function()
		{
			if(currentShotTicks == gun.fireRate)
			{
				if(Player.getCarriedItemData() >= gun.ammo)
				{
					playSoundFromSimplePath("desnoguns/EmptyGun.ogg");
					ModPE.showTipMessage("Press the ammo text to reload.");
				} else
				{
					stopReloading();
					currentShotTicks = 0;
					if(!gun.hasntShootingSound)
						Sound.playLoadedSoundPool(GUNS_ON_TOUCH_WITH_WAIT_SHOOT_VOLUME, generalVolume);
					shoot(gun);
					damageCarriedGun(gun);
					Recoil.makeRecoil(gun);
				}
			}
			currentShotTicks++;
		}
	}));
}

function onTouchWithWaitShootingRunnableWithoutReload(gun)
{
	shootingRunnable = (new java.lang.Runnable(
	{
		run: function()
		{
			if(currentShotTicks == gun.fireRate)
			{
				currentShotTicks = 0;
				if(!gun.hasntShootingSound)
					Sound.playLoadedSoundPool(GUNS_ON_TOUCH_WITH_WAIT_SHOOT_VOLUME, generalVolume);
				shoot(gun);
				Recoil.makeRecoil(gun);
			}
			currentShotTicks++;
		}
	}));
}
//########## ON TOUCH WITH WAIT GUNS functions - END ##########


//########## SOUND functions ##########
function isDefaultSound(simplePath)
{
	//
	return simplePath.substring(0, 10) == "desnoguns/";
}

function isCustomSound(simplePath)
{
	//
	return simplePath.substring(0, 7) == "custom/";
}

function getOriginalPathOfSound(simplePath)
{
	if(isDefaultSound(simplePath))
	{
		// sound in form: desnoguns/path-in-default-desnoguns-folder
		var pathInDefaultDesnoGunsFolder = simplePath.substring(10); // keep only after desnoguns/
		return sdcard + "/games/com.mojang/desnoguns-sounds/" + pathInDefaultDesnoGunsFolder;
	}

	if(isCustomSound(simplePath))
	{
		// sound in form: custom/path-in-texture-pack and it has been saved in ...com.mojang/desnoguns-temp/path-in-texture-pack
		var pathInTexturePack = simplePath.substring(7); // keep only after custom/
		return sdcard + "/games/com.mojang/desnoguns-temp/" + pathInTexturePack;
	}

	throw Log.getLogPrefix() + "problem in path: " + simplePath;
}

function playSoundFromSimplePath(simplePath, x, y, z)
{
	//
	Sound.playFromPath(getOriginalPathOfSound(simplePath), x, y, z, generalVolume);
}
//########## SOUND functions - END ##########


//########## SHOOT UI functions ##########
function displayShootAndAimButtons()
{
	displayShootButton();

	displayAimButton();
}

function displayShootButton()
{
	currentActivity.runOnUiThread(new java.lang.Runnable(
	{
		run: function()
		{
			try
			{
				// display a little cross in the center of the screen
				displaySight();


				// fire button
				if(minecraftStyleForButtons)
				{
					shotText = MinecraftButton(buttonsSize, false);
					shotText.setText("Fire");
				} else
				{
					shotText = defaultColoredMinecraftButton("fire", "#FFDE0000");
				}
				shotText.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function(v)
					{
						if(onClickRunnable != null)
							onClickRunnable.run();
						return false;
					}
				});
				shotText.setOnLongClickListener(new android.view.View.OnLongClickListener()
				{
					onLongClick: function(v)
					{
						return false;
					}
				});
				shotText.setSoundEffectsEnabled(false);

				popupShot = new android.widget.PopupWindow(shotText, android.view.ViewGroup.LayoutParams.WRAP_CONTENT, android.view.ViewGroup.LayoutParams.WRAP_CONTENT);
				popupShot.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
				popupShot.setOutsideTouchable(false);
				popupShot.setSplitTouchEnabled(true);
				popupShot.showAtLocation(currentActivity.getWindow().getDecorView(), (switchedButtonsPosition ? android.view.Gravity.RIGHT : android.view.Gravity.LEFT) | android.view.Gravity.CENTER, 0, pixelsOffsetButtons);


				// ammo text (reload)
				ammoText = basicMinecraftTextView("null", ammoTextSize);
				ammoText.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function(v)
					{
						reloadAmmo(getGun(Player.getCarriedItem()));
						return false;
					}
				});
				ammoText.setGravity(android.view.Gravity.CENTER);
				ammoText.setTextColor(android.graphics.Color.parseColor("#FFFFFFFF"));
				ammoText.setLayoutParams(new android.view.ViewGroup.LayoutParams(android.view.ViewGroup.LayoutParams.WRAP_CONTENT, android.view.ViewGroup.LayoutParams.WRAP_CONTENT));

				popupAmmo = new android.widget.PopupWindow(ammoText, android.view.ViewGroup.LayoutParams.WRAP_CONTENT, android.view.ViewGroup.LayoutParams.WRAP_CONTENT);
				popupAmmo.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
				popupAmmo.showAtLocation(currentActivity.getWindow().getDecorView(), android.view.Gravity.CENTER | android.view.Gravity.BOTTOM, 0, Convert.convertDpToPixels(64));

			} catch(err)
			{
				clientMessage("Error: " + err);
			}
		}
	}));
}

function displaySight()
{
	if(shouldDisplaySight) // display sight preference
	{
		currentActivity.runOnUiThread(new java.lang.Runnable(
		{
			run: function()
			{
				try
				{
					try {
						popupSightImage.dismiss();
					} catch(e) {}

					var sightImageView = new android.widget.ImageView(currentActivity);
					sightImageView.setImageBitmap(sightPngScaled);

					popupSightImage = new android.widget.PopupWindow(sightImageView, android.view.ViewGroup.LayoutParams.WRAP_CONTENT, android.view.ViewGroup.LayoutParams.WRAP_CONTENT);
					popupSightImage.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
					popupSightImage.setOutsideTouchable(false);
					popupSightImage.setFocusable(false);
					popupSightImage.setTouchable(false);
					popupSightImage.showAtLocation(currentActivity.getWindow().getDecorView(), android.view.Gravity.CENTER | android.view.Gravity.CENTER, -Convert.convertDpToPixels(1), -Convert.convertDpToPixels(1));
				} catch(err)
				{
					clientMessage("Error: " + err);
				}
			}
		}));
	}
}

function displayAimButton()
{
	// weapon must be an object with zoomLevel and optional hasAimImageLayer

	currentActivity.runOnUiThread(new java.lang.Runnable(
	{
		run: function()
		{
			try
			{
				var aimText;
				if(minecraftStyleForButtons)
				{
					aimText = MinecraftButton(buttonsSize);
					aimText.setText("Aim");
				} else
				{
					aimText = defaultColoredMinecraftButton("aim", "#FFFFFFFF");
				}
				aimText.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function(v)
					{
						onAimClick();
						return false;
					}
				});
				aimText.setSoundEffectsEnabled(true);

				popupAim = new android.widget.PopupWindow(aimText, android.view.ViewGroup.LayoutParams.WRAP_CONTENT, android.view.ViewGroup.LayoutParams.WRAP_CONTENT);
				popupAim.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
				popupAim.showAtLocation(currentActivity.getWindow().getDecorView(), (switchedButtonsPosition ? android.view.Gravity.LEFT : android.view.Gravity.RIGHT) | android.view.Gravity.CENTER, 0, pixelsOffsetButtons);
			} catch(err)
			{
				clientMessage("Error: " + err);
			}
		}
	}));
}

function removeShootAndAimButtons()
{
	currentActivity.runOnUiThread(new java.lang.Runnable(
	{
		run: function()
		{
			try {
				popupShot.dismiss();
			} catch(e) {}
			try {
				popupSettingsImage.dismiss();
			} catch(e) {}
			try {
				popupSightImage.dismiss();
			} catch(e) {}
			try {
				popupAmmo.dismiss();
			} catch(e) {}
			try {
				popupAim.dismiss();
			} catch(e) {}
			try {
				popupAiming.dismiss();
			} catch(e) {}
			try {
				popupZoom.dismiss();
			} catch(e) {}
		}
	}));
	currentShotTicks = 0;
}

function resetRunnables()
{
	if(shootingRunnable != null)
	{
		isShooting = false;
		shootingRunnable = null;
	}
	if(onClickRunnable != null)
		onClickRunnable = null;
}
//########## SHOOT UI functions - END ##########


//########## AIM functions ##########
function onAimClick()
{
	var weapon = getWeaponObject(Player.getCarriedItem());

	if(!isDisplayingAimingAnimation) // if is currently zooming in or out don't do anything
	{
		if(!isAiming)
		{
			isAiming = true;
			isDisplayingAimingAnimation = true;

			zoomInGradually(weapon.zoomLevel - 1); // total steps = weapon.zoomLevel - 1; total time: (weapon.zoomLevel - 1) * 12

			// last step of decreasing FOV
			new android.os.Handler().postDelayed(new java.lang.Runnable( // executed 1 time. Total: executed a total of weapon.zoomLevel times
			{
				run: function()
				{
					zoomWithFov--;
					ModPE.setFov(zoomWithFov);

					if(weapon.id == Player.getCarriedItem()) // check if the player hasn't changed is item while zooming
					{
						if(weapon.hasAimImageLayer)
							showAimImageLayerFromWeapon(weapon);

						isDisplayingAimingAnimation = false;
					} else
					{
						isDisplayingAimingAnimation = false;
						
						removeZoomAndAimImageLayer();
					}
				}
			}), weapon.zoomLevel * 12);
		} else
		{
			if(weapon.hasAimImageLayer && isItemAGun(weapon.id)) // restore the sight after aiming with an image layer (the image layer removed the sight)
				displaySight();

			removeZoomAndAimImageLayer();
		}
	}
}

function zoomInGradually(amount)
{
	for(var ms = 1; ms <= amount; ms++)
	{
		new android.os.Handler().postDelayed(new java.lang.Runnable(
		{
			run: function()
			{
				zoomWithFov--;
				ModPE.setFov(zoomWithFov);
			}
		}), ms * 12);
	}
}

function removeZoomAndAimImageLayer()
{
	currentActivity.runOnUiThread(new java.lang.Runnable(
	{
		run: function()
		{
			if(!isDisplayingAimingAnimation) // if is currently zooming in or out don't do anything
			{
				if(isAiming)
				{
					isAiming = false;
					isDisplayingAimingAnimation = true;
					var removeAiming = zoomWithFov;

					for(var ms = 1; ms < (72 - removeAiming); ms++)
					{
						new android.os.Handler().postDelayed(new java.lang.Runnable(
						{
							run: function()
							{
								zoomWithFov++;
								ModPE.setFov(zoomWithFov);
							}
						}), ms * 12);
					}

					new android.os.Handler().postDelayed(new java.lang.Runnable(
					{
						run: function()
						{
							zoomWithFov++;
							ModPE.setFov(zoomWithFov);

							isDisplayingAimingAnimation = false;
						}
					}), (72 - removeAiming) * 12);
				}
				try {
					popupAiming.dismiss();
				} catch(e) {}
				try {
					popupZoom.dismiss();
				} catch(e) {}
			}
		}
	}));
}
//########## AIM functions - END ##########


//########## IMAGE LAYER FOR AIM functions ##########
function showAimImageLayerFromWeapon(weapon)
{
	currentActivity.runOnUiThread(new java.lang.Runnable(
	{
		run: function()
		{
			try
			{
				// remove buttons (we don't want the layer to stay on the top of them)
				removeShootAndAimButtons();

				// display actual layer
				displayAimImageLayerPopup(getAimImageFromId(weapon.id));


				if(weapon.hasManualZoom)
					displayManualZoom(weapon);

				if(isItemAGun(weapon.id))
				{
					// display both fire and aim buttons
					displayShootAndAimButtons();

					// restore ammo text
					updateAmmoText(weapon);

					// remove sight image, we already have the image layer but we need to restore it later
					try {
						popupSightImage.dismiss();
					} catch(e) {}

					if(weapon.buttonType == BUTTON_TYPE_ON_TOUCH)
					{
						// load touch events
						if(shouldReload())
						{
							// survival or creative with reload option enabled
							currentActivity.runOnUiThread(new java.lang.Runnable(
							{
								run: function()
								{
									shotText.setOnTouchListener(new android.view.View.OnTouchListener()
									{
										onTouch: function(v, event)
										{
											if(minecraftStyleForButtons)
												MinecraftButtonLibrary.onTouch(v, event, false); // make touch effect
											onTouchWeaponShoot(event, weapon, true);
											return false;
										}
									});
								}
							}));
						} else
						{
							// creative with reload option disabled
							currentActivity.runOnUiThread(new java.lang.Runnable(
							{
								run: function()
								{
									shotText.setOnTouchListener(new android.view.View.OnTouchListener()
									{
										onTouch: function(v, event)
										{
											if(minecraftStyleForButtons)
												MinecraftButtonLibrary.onTouch(v, event, false); // make touch effect
											onTouchWeaponShoot(event, weapon, false);
											return false;
										}
									});
								}
							}));
						}
					}
				} else
				{
					// is not a gun, we don't want to display the fire button and related things (sight, ammo)
					displayAimButton();
				}
			} catch(err)
			{
				clientMessage("Error: " + err);
			}
		}
	}));
}

function displayAimImageLayerPopup(image)
{
	// must be called in a runOnUiThread

	var backgroundAimImageView = new android.widget.ImageView(currentActivity);
	backgroundAimImageView.setImageBitmap(image);
	backgroundAimImageView.setScaleType(android.widget.ImageView.ScaleType.CENTER_CROP);
	backgroundAimImageView.setLayoutParams(new android.widget.LinearLayout.LayoutParams(android.view.ViewGroup.LayoutParams.MATCH_PARENT, android.view.ViewGroup.LayoutParams.MATCH_PARENT));

	popupAiming = new android.widget.PopupWindow();
	popupAiming.setContentView(backgroundAimImageView);
	popupAiming.setOutsideTouchable(false);
	popupAiming.setFocusable(false);
	popupAiming.setTouchable(false);
	popupAiming.setAnimationStyle(android.R.style.Animation_Translucent); // Animation_Activity, Animation_Dialog, Animation_Translucent, 
	popupAiming.setWidth(Screen.getWidth());
	popupAiming.setHeight(Screen.getHeight());
	popupAiming.showAtLocation(currentActivity.getWindow().getDecorView(), android.view.Gravity.CENTER | android.view.Gravity.CENTER, 0, 0);
}

function getAimImageFromId(id)
{
	switch(id)
	{
		case BARRETT.id:
		case BARRETT_EXPLOSIVE.id:
		{
			return barrettUIDecoded;
		}
		case DRAGUNOV.id:
		{
			return dragunovUIDecoded;
		}
		case M21.id:
		{
			return m21UIDecoded;
		}
		case M40A3.id:
		case M40A3_ICE.id:
		{
			return m40a3UIDecoded;
		}
		case R700.id:
		{
			return r700UIDecoded;
		}
		case CROSSBOW.id:
		case CROSSBOW_EXPLOSIVE.id:
		{
			return crossbowUIDecoded;
		}
		case MSR.id:
		{
			return msrUIDecoded;
		}

		case BINOCULARS.id:
		case ZOOM_BINOCULARS.id:
		{
			return binocularsUIDecoded;
		}

		default:
		{
			return barrettUIDecoded;
		}
	}
}

function displayManualZoom(weapon)
{
	currentActivity.runOnUiThread(new java.lang.Runnable(
	{
		run: function()
		{
			try
			{
				var zoomChooser = new android.widget.SeekBar(currentActivity);
				zoomChooser.setMax(68);
				zoomChooser.setProgress(72 - zoomWithFov);
				zoomChooser.setOnSeekBarChangeListener(new android.widget.SeekBar.OnSeekBarChangeListener()
				{
					onProgressChanged: function()
					{
						zoomWithFov = 72 - zoomChooser.getProgress();
						weapon.zoomLevel = zoomChooser.getProgress();
						if(zoomWithFov == 72)
							ModPE.resetFov();
						else
							ModPE.setFov(zoomWithFov);
					}
				});

				popupZoom = new android.widget.PopupWindow();
				popupZoom.setContentView(zoomChooser);
				popupZoom.setWidth(Math.floor(Screen.getWidth() * 0.4));
				popupZoom.setHeight(android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
				popupZoom.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
				popupZoom.showAtLocation(currentActivity.getWindow().getDecorView(), android.view.Gravity.TOP | android.view.Gravity.CENTER, 0, Convert.convertDpToPixels(8));
			} catch(err)
			{
				clientMessage("Error: " + err);
			}
		}
	}));
}
//########## IMAGE LAYER FOR AIM functions - END ##########


//########## RECOIL functions ##########
var timedRecoilVar;

var Recoil = {

	makeRecoil: function(gun)
	{
		if(gun.fireRate < 2)
		{
			if(gun.buttonType == BUTTON_TYPE_ON_CLICK)
			{
				Recoil.makeLessTimedRecoil(gun);
				return;
			} else
			{
				Recoil.makeInstantRecoil(gun);
				return;
			}
		}

		if(gun.fireRate >= 2 && gun.fireRate <= 5)
		{
			Recoil.makeLessTimedRecoil(gun);
			return;
		}

		// fire rate > 5
		if(gun.recoil >= 15)
		{
			Recoil.makeTimedRecoil(gun);
			return;
		} else
		{
			Recoil.makeLessTimedRecoil(gun);
			return;
		}
	},

	makeInstantRecoil: function(gun)
	{
		var recoilDegree = gun.recoil / RECOIL;
		Entity.setRot(Player.getEntity(), Entity.getYaw(Player.getEntity()), Entity.getPitch(Player.getEntity()) - recoilDegree);
	},

	makeLessTimedRecoil: function(gun)
	{
		var recoilDegree = gun.recoil / RECOIL;
		var timedRecoilVar = recoilDegree / 4;
		currentActivity.runOnUiThread(new java.lang.Runnable(
		{
			run: function()
			{
				new android.os.Handler().postDelayed(new java.lang.Runnable(
				{
					run: function()
					{
						Entity.setRot(Player.getEntity(), Entity.getYaw(Player.getEntity()), Entity.getPitch(Player.getEntity()) - (timedRecoilVar));
					}
				}), 1 * 6);

				new android.os.Handler().postDelayed(new java.lang.Runnable(
				{
					run: function()
					{
						Entity.setRot(Player.getEntity(), Entity.getYaw(Player.getEntity()), Entity.getPitch(Player.getEntity()) - (timedRecoilVar * 0.9));
					}
				}), 2 * 6);

				new android.os.Handler().postDelayed(new java.lang.Runnable(
				{
					run: function()
					{
						Entity.setRot(Player.getEntity(), Entity.getYaw(Player.getEntity()), Entity.getPitch(Player.getEntity()) - (timedRecoilVar * 0.8));
					}
				}), 3 * 6);

				new android.os.Handler().postDelayed(new java.lang.Runnable(
				{
					run: function()
					{
						Entity.setRot(Player.getEntity(), Entity.getYaw(Player.getEntity()), Entity.getPitch(Player.getEntity()) - (timedRecoilVar * 0.7));
					}
				}), 4 * 6);
			}
		}));
	},

	makeTimedRecoil: function(gun)
	{
		var recoilDegree = gun.recoil / RECOIL;
		var timedRecoilVar = recoilDegree / 8;
		currentActivity.runOnUiThread(new java.lang.Runnable(
		{
			run: function()
			{
				for(var ms = 1; ms <= 5; ms++)
				{
					new android.os.Handler().postDelayed(new java.lang.Runnable(
					{
						run: function()
						{
							Entity.setRot(Player.getEntity(), Entity.getYaw(Player.getEntity()), Entity.getPitch(Player.getEntity()) - timedRecoilVar);
						}
					}), ms * 7);
				}

				new android.os.Handler().postDelayed(new java.lang.Runnable(
				{
					run: function()
					{
						Entity.setRot(Player.getEntity(), Entity.getYaw(Player.getEntity()), Entity.getPitch(Player.getEntity()) - (timedRecoilVar * 0.9));
					}
				}), 6 * 7);

				new android.os.Handler().postDelayed(new java.lang.Runnable(
				{
					run: function()
					{
						Entity.setRot(Player.getEntity(), Entity.getYaw(Player.getEntity()), Entity.getPitch(Player.getEntity()) - (timedRecoilVar * 0.75));
					}
				}), 7 * 7);

				new android.os.Handler().postDelayed(new java.lang.Runnable(
				{
					run: function()
					{
						Entity.setRot(Player.getEntity(), Entity.getYaw(Player.getEntity()), Entity.getPitch(Player.getEntity()) - (timedRecoilVar * 0.5));
					}
				}), 8 * 7);
			}
		}));
	}
};
//########## RECOIL functions - END ##########


//########## RELOAD GUN functions ##########
function reloadAmmo(gun)
{
	if(Level.getGameMode() == GameMode.SURVIVAL)
	{
		// gamemode survival
		var slot = Player.getSlotOfItem(getAmmoId(gun));
		if(Player.getCarriedItemData() != 0)
		{
			if(slot == -1)
				clientMessage("You don't have one " + Item.getName(getAmmoId(gun), 0, false) + " in your inventory.");
			else
			{
				try
				{
					isReloading = true;
					reloadingGun = gun;

					reloadSound.reset();
					reloadSound.setDataSource(getOriginalPathOfSound(gun.reloadSound));
					reloadSound.setVolume(generalVolume, generalVolume);
					reloadSound.prepare();
					reloadSound.setOnCompletionListener(new android.media.MediaPlayer.OnCompletionListener()
					{
						onCompletion: function(mp)
						{
							isReloading = false;

							// let's do again a check to see if the player hasn't changed his carried item
							if(Player.getCarriedItem() == reloadingGun.id)
							{
								var ammoSlot = Player.getSlotOfItem(getAmmoId(reloadingGun));
								if(ammoSlot == -1)
									clientMessage("You don't have one " + Item.getName(getAmmoId(gun), 0, false) + " ammo in your inventory.");
								else
								{
									Entity.setCarriedItem(Player.getEntity(), Player.getCarriedItem(), Player.getCarriedItemCount(), 0);
									setAmmoTextFromGun(gun);
									Player.removeItemsFromInventory(ammoSlot, 1);
								}
							}

							// reset sound
							reloadSound.release();
							reloadSound = null;
							reloadSound = new android.media.MediaPlayer();
						}
					});
					reloadSound.start();
					ModPE.showTipMessage("Reloading");
				} catch(e)
				{
					ModPE.showTipMessage("Sounds not installed.");
					Log.log("error in reloadAmmo: " + e);
				}
			}
		}
	}

	if(Level.getGameMode() == GameMode.CREATIVE)
	{
		// gamemode creative
		if(Player.getCarriedItemData() != 0)
		{
			if(instantReloadInCreative)
			{
				// instant reload enabled
				isReloading = false;

				// let's do a re-check to see if the player hasn't changed his carried item
				if(Player.getCarriedItem() == gun.id)
				{
					Entity.setCarriedItem(Player.getEntity(), Player.getCarriedItem(), Player.getCarriedItemCount(), 0);
					setAmmoTextFromGun(gun);
				}
			} else
			{
				// instant reload NOT enabled
				try
				{
					isReloading = true;
					reloadingGun = gun;

					reloadSound.reset();
					reloadSound.setDataSource(getOriginalPathOfSound(gun.reloadSound));
					reloadSound.setVolume(generalVolume, generalVolume);
					reloadSound.prepare();
					reloadSound.setOnCompletionListener(new android.media.MediaPlayer.OnCompletionListener()
					{
						onCompletion: function(mp)
						{
							isReloading = false;

							// let's do a re-check to see if the player hasn't changed his carried item
							if(Player.getCarriedItem() == reloadingGun.id)
							{
								Entity.setCarriedItem(Player.getEntity(), Player.getCarriedItem(), Player.getCarriedItemCount(), 0);
								setAmmoTextFromGun(reloadingGun);
							}

							// reset sound
							reloadSound.release();
							reloadSound = null;
							reloadSound = new android.media.MediaPlayer();
						}
					});
					reloadSound.start();
					ModPE.showTipMessage("Reloading");
				} catch(e)
				{
					ModPE.showTipMessage("Sounds not installed.");
					Log.log("error in reloadAmmo: " + e);

					// since we are in creative we should reload the ammo, also if sounds aren't installed.
					isReloading = false;

					// let's do a re-check to see if the player hasn't changed his carried item
					if(Player.getCarriedItem() == reloadingGun.id)
					{
						Entity.setCarriedItem(Player.getEntity(), Player.getCarriedItem(), Player.getCarriedItemCount(), 0);
						setAmmoTextFromGun(reloadingGun);
					}
				}
			}
		}
	}
}

function stopReloading()
{
	if(isReloading)
	{
		try {
			reloadSound.stop();
		} catch(e) {
			Log.log("error while stopping reloadSound: " + e);
		}
		isReloading = false;
		ModPE.showTipMessage("Ammo reload interrupted.");
	}
}

function updateAmmoText(currentGun)
{
	if(shouldReload())
		setAmmoTextFromGun(currentGun);
	else
		setAmmoText(" ");
}

function setAmmoTextFromGun(gun)
{
	if(displayGunNameInAmmo)
		setAmmoText(gun.name + " " + (gun.ammo - Player.getCarriedItemData()) + "/" + gun.ammo);
	else
		setAmmoText((gun.ammo - Player.getCarriedItemData()) + "/" + gun.ammo);
}

function setAmmoText(text)
{
	currentActivity.runOnUiThread(new java.lang.Runnable(
	{
		run: function()
		{
			try
			{
				ammoText.setText(text);
			} catch(err)
			{
				clientMessage("Error: " + err);
			}
		}
	}));
}

function damageCarriedGun(gun)
{
	var maxDamage = gun.ammo;
	if(Player.getCarriedItemData() < maxDamage)
		Entity.setCarriedItem(Player.getEntity(), Player.getCarriedItem(), Player.getCarriedItemCount(), Player.getCarriedItemData() + 1);
	setAmmoTextFromGun(gun);
}

function getAmmoId(gun)
{
	if(gun.ammunitionID != null)
	{
		return gun.ammunitionID;
	}
	else
	{
		switch(gun.gunType)
		{
			case GUN_TYPE_ASSAULT_RIFLE:
			{
				return AMMO_ASSAULT_RIFLE_ID;
			}
			case GUN_TYPE_SUB_MACHINE:
			{
				return AMMO_SUB_MACHINE_ID;
			}
			case GUN_TYPE_LIGHT_MACHINE:
			{
				return AMMO_LIGHT_MACHINE_ID;
			}
			case GUN_TYPE_SNIPER_RIFLE:
			{
				return AMMO_SNIPER_RIFLE_ID;
			}
			case GUN_TYPE_SHOTGUN:
			{
				return AMMO_SHOTGUN_ID;
			}
			case GUN_TYPE_MACHINE_PISTOL:
			{
				return AMMO_MACHINE_PISTOL_ID;
			}
			case GUN_TYPE_HANDGUN:
			{
				return AMMO_HANDGUN_ID;
			}
			case GUN_TYPE_LAUNCHER:
			{
				return AMMO_LAUNCHER_ID;
			}
			case GUN_TYPE_MINIGUN:
			{
				return AMMO_MINIGUN_ID;
			}
			default:
			{
				clientMessage("Error in getAmmoId() with gunType " + gun.gunType);
			}
		}
	}
}

function shouldReload()
{
	// reload in survival, or in creative with reload option enabled
	return reloadInCreative || Level.getGameMode() == GameMode.SURVIVAL;
}
//########## RELOAD GUN functions - END ##########


//########## MED KIT functions ##########
function displayHealButton()
{
	currentActivity.runOnUiThread(new java.lang.Runnable()
	{
		run: function()
		{
			try
			{
				var healthText;
				if(minecraftStyleForButtons)
				{
					healthText = MinecraftButton(buttonsSize);
					healthText.setText("Heal");
				} else
				{
					healthText = defaultColoredMinecraftButton("heal", "#FF00DE00");
				}
				healthText.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function(v)
					{
						if(Player.getCarriedItem() == MEDICAL_KIT_ID) // one more check before removing items
						{
							var currentHealth = Entity.getHealth(Player.getEntity());
							if(currentHealth >= 20)
							{
								ModPE.showTipMessage("Your health is full.");
								return;
							}
							var healthToBeRestored = 20 - currentHealth;
							var healthMedicalKitCanRestore = MEDICAL_KIT_MAX_RESTORABLE_HEALTH - Player.getCarriedItemData() + 1;
							if(healthToBeRestored > healthMedicalKitCanRestore)
							{
								Player.setHealth(currentHealth + healthMedicalKitCanRestore);
								for(var i = 0; i < healthMedicalKitCanRestore; i++)
									Player.damageCarriedItem();
								ModPE.showTipMessage("Medical Kit broke before restoring all health.");
							} else
							{
								Player.setHealth(20);
								for(var i = 0; i < healthToBeRestored; i++)
									Player.damageCarriedItem();
								ModPE.showTipMessage("Restored " + (healthToBeRestored / 2) + " hearts.");
							}
						} else
						{
							popupHealth.dismiss();
						}
					}
				});
				healthText.setSoundEffectsEnabled(true);

				popupHealth = new android.widget.PopupWindow(healthText, android.view.ViewGroup.LayoutParams.WRAP_CONTENT, android.view.ViewGroup.LayoutParams.WRAP_CONTENT);
				popupHealth.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
				popupHealth.setOutsideTouchable(false);
				popupHealth.setSplitTouchEnabled(true);
				popupHealth.showAtLocation(currentActivity.getWindow().getDecorView(), android.view.Gravity.LEFT | android.view.Gravity.CENTER, 0, pixelsOffsetButtons);
			} catch(err)
			{
				clientMessage("Error: " + err);
			}
		}
	});
}

function removeHealButton()
{
	currentActivity.runOnUiThread(new java.lang.Runnable(
	{
		run: function()
		{
			try {
				popupHealth.dismiss();
			} catch(e) {}
		}
	}));
}
//########## MED KIT functions - END ##########


//########## INFO ITEM functions ##########
function displayInfoItemUI()
{
	currentActivity.runOnUiThread(new java.lang.Runnable()
	{
		run: function()
		{
			try
			{
				var settingsImage = new android.widget.ImageView(currentActivity);
				settingsImage.setImageBitmap(settingsPngScaled);
				settingsImage.setOnClickListener(new android.view.View.OnClickListener({
					onClick: function()
					{
						infoDesnoGunsMod();
					}
				}));

				popupSettingsImage = new android.widget.PopupWindow(settingsImage, android.view.ViewGroup.LayoutParams.WRAP_CONTENT, android.view.ViewGroup.LayoutParams.WRAP_CONTENT);
				popupSettingsImage.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
				popupSettingsImage.setOutsideTouchable(false);
				popupSettingsImage.setSplitTouchEnabled(true);
				popupSettingsImage.showAtLocation(currentActivity.getWindow().getDecorView(), android.view.Gravity.LEFT | android.view.Gravity.CENTER, Convert.convertDpToPixels(4), 0);



				var tipText = basicMinecraftTextView(getRandomTip(), 14);
				tipText.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function(v)
					{
						v.setText(new android.text.Html.fromHtml(getRandomTip()));
						return false;
					}
				});
				tipText.setMovementMethod(android.text.method.LinkMovementMethod.getInstance());
				tipText.setLinkTextColor(android.graphics.Color.parseColor("#FFFBFF97"));
				tipText.setGravity(android.view.Gravity.LEFT);
				tipText.setTextColor(android.graphics.Color.parseColor("#FFFFFFFF"));
				tipText.setPadding(Convert.convertDpToPixels(4), Convert.convertDpToPixels(4), Convert.convertDpToPixels(4), Convert.convertDpToPixels(4));
				tipText.setLayoutParams(new android.view.ViewGroup.LayoutParams(android.view.ViewGroup.LayoutParams.WRAP_CONTENT, android.view.ViewGroup.LayoutParams.WRAP_CONTENT));

				popupTip = new android.widget.PopupWindow(tipText, android.view.ViewGroup.LayoutParams.WRAP_CONTENT, android.view.ViewGroup.LayoutParams.WRAP_CONTENT);
				popupTip.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
				popupTip.showAtLocation(currentActivity.getWindow().getDecorView(), android.view.Gravity.RIGHT | android.view.Gravity.CENTER, 0, -Convert.convertDpToPixels(64));
			} catch(err)
			{
				clientMessage("Error: " + err);
			}
		}
	});
}

function getRandomTip()
{
	var cal = java.util.Calendar.getInstance();
	var day = cal.get(java.util.Calendar.DAY_OF_MONTH);
	var month = cal.get(java.util.Calendar.MONTH);
	if(day == 3 && month == java.util.Calendar.JULY)
	{
		return "Happy birthday, Desno365!";
	}
	if(day == 31 && month == java.util.Calendar.OCTOBER)
	{
		return "Keep calm and scary on.";
	}
	if(day == 25 && month == java.util.Calendar.DECEMBER)
	{
		return "Merry Christmas!";
	}
	if(day == 1 && month == java.util.Calendar.JANUARY)
	{
		return "Happy new year!";
	}

	var random = Math.floor((Math.random() * 21) + 1);
	switch(random)
	{
		case 1:
		{
			return "Guns have better accuracy while aiming.";
		}
		case 2:
		{
			return "Follow @Desno365 on Twitter";
		}
		case 3:
		{
			return "Sniper Rifles have a really bad accuracy if you don't aim.";
		}
		case 4:
		{
			return "Many textures and sounds are made by @jamioflan, a big thanks to him!";
		}
		case 5:
		{
			return "Place a Block of Coal on top of a Block of Iron, then touch it.";
		}
		case 6:
		{
			return "The damage of a bullet to a mob depends on his speed.";
		}
		case 7:
		{
			return "This mod causes addiction, use with caution.";
		}
		case 8:
		{
			return "In Minecraft the damage of an arrow depends on his speed.";
		}
		case 9:
		{
			return "This mod is compatible with the <a href=\"http://desno365.net/minecraft/portal2-mod/\">Portal 2 Mod by Desno365</a>!";
		}
		case 10:
		{
			return ".shootDatCreeper()";
		}
		case 11:
		{
			return "Press the settings icon on the left, there are awesome things inside.";
		}
		case 12:
		{
			return "Do a 360 noscope.";
		}
		case 13:
		{
			return "author.name = \"Dennis Motta\"; author.nickname = \"Desno365\";";
		}
		case 14:
		{
			return "Do you already know you can <a href=\"http://desno365.net/minecraft/desnoguns-mod/addons/\">install addons</a> that add new guns?";
		}
		case 15:
		{
			return "A good sniper calculates the gravity before shooting.";
		}
		case 16:
		{
			if(isPro())
				return "Pro Key installed. Thanks for your support! :)";
			else
				return "Consider getting the Pro Key, you will support the development and unlock features.";
		}
		case 17:
		{
			return "You're running the " + CURRENT_VERSION + " version of the DesnoGuns mod!";
		}
		case 18:
		{
			return "There is an option in Settings that disables reload in creative.";
		}
		case 19:
		{
			return "Did you find the Easter Egg? No? You'll find a tip on one of these splash texts.";
		}
		case 20:
		{
			return "/swag grenade";
		}
		case 21:
		{
			if(isPro())
				return "If you like the pro features consider leaving a good review on the Play Store: <a href=\"https://play.google.com/store/apps/details?id=com.desno365.desnogunsmodkey\">DesnoGuns Mod Pro Key</a>.";
			else
				return "Get notifications when a new version of one of my mod is released, download the <a href=\"https://play.google.com/store/apps/details?id=com.desno365.mods\">Desno365's Mods app</a> now!";
		}
	}
}

function removeInfoItemUI()
{
	currentActivity.runOnUiThread(new java.lang.Runnable(
	{
		run: function()
		{
			try {
				popupSettingsImage.dismiss();
			} catch(e) {}
			try {
				popupTip.dismiss();
			} catch(e) {}
		}
	}));
}
//########## INFO ITEM functions - END ##########


//########## INTERNET functions ##########
function updateLatestVersionMod()
{
	try
	{
		// download content
		var url = new java.net.URL("https://raw.githubusercontent.com/Desno365/MCPE-scripts/master/desnogunsMOD-version");
		var connection = url.openConnection();
 
		// get content
		inputStream = connection.getInputStream();
 
		// read result
		var loadedVersion = "";
		var bufferedVersionReader = new java.io.BufferedReader(new java.io.InputStreamReader(inputStream));
		var rowVersion = "";
		while((rowVersion = bufferedVersionReader.readLine()) != null)
		{
			loadedVersion += rowVersion;
		}
		latestVersion = loadedVersion.split(" ")[0];
 
		// close what needs to be closed
		bufferedVersionReader.close();
		inputStream.close();
	} catch(err)
	{
		clientMessage("DesnoGuns Mod: Can't check for updates, please check your Internet connection.");
		Log.log("updateLatestVersionMod(): caught an error: " + err);
	}
}
//########## INTERNET functions - END ##########


//########## ITEM functions ##########
Item.defineItem = function(id, textureName, textureNumber, name, stackLimit)
{
	try
	{
		ModPE.setItem(id, textureName, textureNumber, name, stackLimit);
	}catch(e)
	{
		errorWithModResources();

		ModPE.setItem(id, "skull_zombie", 0, name, stackLimit);
	}
}

Item.newArmor = function(id, iconName, iconIndex, name, texture, damageReduceAmount, maxDamage, armorType)
{
	try
	{
		//Item.defineArmor(int id, String iconName, int iconIndex, String name, String texture, int damageReduceAmount, int maxDamage, int armorType)
		Item.defineArmor(id, iconName, iconIndex, name, texture, damageReduceAmount, maxDamage, armorType);
	}catch(e)
	{
		errorWithModResources();

		Item.defineArmor(id, "skull_zombie", 0, name, "armor/chain_2.png", damageReduceAmount, maxDamage, armorType);
	}
}
//########## ITEM functions - END ##########


//########## IMAGE functions ##########
function createImages()
{
	var settingsPngDecoded = Image.decodeBitmapFromBase64(settingsPng);
	settingsPngScaled = Image.scaleBitmapToSize(settingsPngDecoded, settingsPngDecoded.getHeight() * Screen.getDensity() * 0.3, settingsPngDecoded.getHeight() * Screen.getDensity() * 0.3, true);
	settingsPng = null;

	var sightPngDecoded = Image.decodeBitmapFromBase64(sightPng);
	sightPngScaled = Image.scaleBitmapToScreenDensity(sightPngDecoded);
	sightPng = null;

	var backgroundDarkDirtDecoded = Image.decodeBitmapFromBase64(backgroundDarkDirtPng);
	backgroundDarkDirtScaled = Image.scaleBitmapToScreenDensity(backgroundDarkDirtDecoded);
	background = new android.graphics.drawable.BitmapDrawable(backgroundDarkDirtScaled);
	background.setTileModeXY(android.graphics.Shader.TileMode.REPEAT, android.graphics.Shader.TileMode.REPEAT);
	backgroundDarkDirtPng = null;

	var playStorePngDecoded = Image.decodeBitmapFromBase64(playStorePng);
	playStorePngScaled = Image.scaleBitmapToSize(playStorePngDecoded, playStorePngDecoded.getWidth() * (Screen.getDensity() / 3), playStorePngDecoded.getHeight() * (Screen.getDensity() / 3), true);
	playStorePng = null;

	binocularsUIDecoded = Image.decodeBitmapFromBase64(binocularsUI);
	binocularsUI = null;

	barrettUIDecoded = Image.decodeBitmapFromBase64(barrettUI);
	barrettUI = null;
	dragunovUIDecoded = Image.decodeBitmapFromBase64(dragunovUI);
	dragunovUI = null;
	m21UIDecoded = Image.decodeBitmapFromBase64(m21UI);
	m21UI = null;
	m40a3UIDecoded = Image.decodeBitmapFromBase64(m40a3UI);
	m40a3UI = null;
	r700UIDecoded = Image.decodeBitmapFromBase64(r700UI);
	r700UI = null;
	crossbowUIDecoded = Image.decodeBitmapFromBase64(crossbowUI);
	crossbowUI = null;
	msrUIDecoded = Image.decodeBitmapFromBase64(msrUI);
	msrUI = null;
}
//########## IMAGE functions - END ##########


//########## MISC functions ##########
function createRandomString(randomObject)
{
	// randomObjectExample = { startingFrom:1, endingAt:4, startText:"ignite_flamethrower", endText:".ogg" }
	var random = Math.floor((Math.random() * (randomObject.endingAt - randomObject.startingFrom + 1)) + randomObject.startingFrom);
	return(randomObject.startText + random + randomObject.endText);
}

function cloneObject(obj)
{
	var copy;

	// Handle the 3 simple types, and null or undefined
	if (null == obj || "object" != typeof obj) return obj;

	// Handle Array
	if(obj instanceof Array)
	{
		copy = [];
		for (var i = 0, len = obj.length; i < len; i++) {
			copy[i] = cloneObject(obj[i]);
		}
		return copy;
	}

	// Handle Object
	if(obj instanceof Object)
	{
		copy = {};
		for (var attr in obj)
		{
			if (obj.hasOwnProperty(attr))
				copy[attr] = cloneObject(obj[attr]);
		}
		return copy;
	}

	return obj;
}

function entityClass(entity)
{
	this.entity = entity;
	this.previousX = 0;
	this.previousY = 0;
	this.previousZ = 0;
}

function checkProximity(entity1, entity2, distanceXZ, distanceY)
{
	if(distanceY == null)
		distanceY = distanceXZ;

	if(!(Math.abs(Entity.getX(entity1) - Entity.getX(entity2)) <= distanceXZ))
		return false;
	if(!(Math.abs(Entity.getY(entity1) - Entity.getY(entity2)) <= distanceY))
		return false;
	if(!(Math.abs(Entity.getZ(entity1) - Entity.getZ(entity2)) <= distanceXZ))
		return false;

	return true;
}

function checkProximityOfPoints(x1, y1, z1, x2, y2, z2, distanceXZ, distanceY)
{
	if(distanceY == null)
		distanceY = distanceXZ;

	if(!(Math.abs(x1 - x2) <= distanceXZ))
		return false;
	if(!(Math.abs(y1 - y2) <= distanceY))
		return false;
	if(!(Math.abs(z1 - z2) <= distanceXZ))
		return false;

	return true;
}

function getSavedBoolean(name, defaultValue, debug)
{
	var savedDataTest = ModPE.readData(name);
	debug = debug || false;

	// debug code
	if(DEBUG1 && debug)
	{
		var debugTest;

		if(typeof savedDataTest == "boolean")
		{
			clientMessage(name + " is bool");
			debugTest = savedDataTest;
		} else
		{
			if(typeof savedDataTest == "string")
			{
				clientMessage(name + " is string");
				debugTest = Convert.stringToBoolean(savedDataTest);
			} else
			{
				clientMessage(name + " is " + typeof savedDataTest);
			}
		}

		clientMessage(name + ": " + debugTest);

		if(typeof debugTest == "boolean")
		{
			if(debugTest)
				clientMessage(name + " true");
			else
				clientMessage(name + " false");
		} else
		{
			clientMessage(name + ", something really wrong here!");
		}
	}

	// return the saved boolean
	if(typeof savedDataTest == "boolean")
	{
		return savedDataTest;
	} else
	{
		if(typeof savedDataTest == "string")
		{
			if(savedDataTest != "" && savedDataTest != null && savedDataTest != undefined)
			{
				return Convert.stringToBoolean(savedDataTest);
			} else
			{
				// this setting has never been saved.
				if(typeof defaultValue == "boolean")
					return defaultValue;
				else
					return Convert.stringToBoolean(defaultValue)
			}
		} else
		{
			clientMessage("Error in getSavedBoolean() for " + name);
			return false;
		}
	}
}

function dumpFlagStateToLog(uiFlags)
{
	// https://developer.android.com/samples/AdvancedImmersiveMode/src/com.example.android.advancedimmersivemode/AdvancedImmersiveModeFragment.html
	if ((uiFlags & android.view.View.SYSTEM_UI_FLAG_LOW_PROFILE) != 0) {
		clientMessage("SYSTEM_UI_FLAG_LOW_PROFILE is set");
	} else {
		clientMessage("SYSTEM_UI_FLAG_LOW_PROFILE is unset");
	}

	if ((uiFlags & android.view.View.SYSTEM_UI_FLAG_FULLSCREEN) != 0) {
		clientMessage("SYSTEM_UI_FLAG_FULLSCREEN is set");
	} else {
		clientMessage("SYSTEM_UI_FLAG_FULLSCREEN is unset");
	}

	if ((uiFlags & android.view.View.SYSTEM_UI_FLAG_HIDE_NAVIGATION) != 0) {
		clientMessage("SYSTEM_UI_FLAG_HIDE_NAVIGATION is set");
	} else {
		clientMessage("SYSTEM_UI_FLAG_HIDE_NAVIGATION is unset");
	}

	if ((uiFlags & android.view.View.SYSTEM_UI_FLAG_IMMERSIVE) != 0) {
		clientMessage("SYSTEM_UI_FLAG_IMMERSIVE is set");
	} else {
		clientMessage("SYSTEM_UI_FLAG_IMMERSIVE is unset");
	}

	if ((uiFlags & android.view.View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY) != 0) {
		clientMessage("SYSTEM_UI_FLAG_IMMERSIVE_STICKY is set");
	} else {
		clientMessage("SYSTEM_UI_FLAG_IMMERSIVE_STICKY is unset");
	}
}
//########## MISC functions - END ##########


//########## UTILS OF UIs functions ##########
function basicMinecraftTextView(text, textSize) // TextView with just the Minecraft font
{
	var lineSpacing = Convert.convertDpToPixels(4);

	var textview = new android.widget.TextView(currentActivity);
	textview.setText(new android.text.Html.fromHtml(text));
	if(textSize != null)
		textview.setTextSize(textSize);
	textview.setTypeface(MinecraftButtonLibrary.ProcessedResources.font);
	textview.setPaintFlags(textview.getPaintFlags() | android.graphics.Paint.SUBPIXEL_TEXT_FLAG);
	textview.setLineSpacing(lineSpacing, 1);
	if(android.os.Build.VERSION.SDK_INT > 19) // KITKAT
		textview.setShadowLayer(1, Math.round((textview.getLineHeight() - lineSpacing) / 8), Math.round((textview.getLineHeight() - lineSpacing) / 8), android.graphics.Color.parseColor("#FF333333"));
	else
		textview.setShadowLayer(0.001, Math.round((textview.getLineHeight() - lineSpacing) / 8), Math.round((textview.getLineHeight() - lineSpacing) / 8), android.graphics.Color.parseColor("#FF333333"));

	return textview;
}

function defaultColoredMinecraftButton(text, colorString)
{
	var padding = Convert.convertDpToPixels(4);

	var bg = android.graphics.drawable.GradientDrawable();
	bg.setColor(android.graphics.Color.TRANSPARENT);
	bg.setShape(android.graphics.drawable.GradientDrawable.RECTANGLE);
	bg.setStroke(Convert.convertDpToPixels(1), android.graphics.Color.parseColor(colorString));

	var coloredButton = basicMinecraftTextView(text, buttonsSize);
	coloredButton.setGravity(android.view.Gravity.CENTER);
	coloredButton.setTextColor(android.graphics.Color.parseColor(colorString));
	coloredButton.setBackgroundDrawable(bg);
	coloredButton.setPadding(padding, padding, padding, padding);
	coloredButton.setLayoutParams(new android.view.ViewGroup.LayoutParams(android.view.ViewGroup.LayoutParams.WRAP_CONTENT, android.view.ViewGroup.LayoutParams.WRAP_CONTENT));

	return coloredButton;
}
//########## UTILS OF UIs functions - END ##########


//########################################################################################################################################################
// Utils of popup's UI functions
//########################################################################################################################################################

const MARGIN_HORIZONTAL_BIG = 16;
const MARGIN_HORIZONTAL_SMALL = 4;

function dividerText()
{
	var dividerText = new android.widget.TextView(currentActivity);
	dividerText.setText(" ");
	return dividerText;
}

function progressBarForInformation(value, max, invert, text)
{
	if(value > max)
		value = max;
	if(invert)
		value = max - value;
	var progressBar = new android.widget.ProgressBar(currentActivity, null, android.R.attr.progressBarStyleHorizontal);
	progressBar.setIndeterminate(false);
	progressBar.setMax(max);
	progressBar.setProgress(Math.round(value));
	progressBar.setLayoutParams(new android.widget.LinearLayout.LayoutParams(0, android.view.ViewGroup.LayoutParams.WRAP_CONTENT, 3));

	var text1 = new android.widget.TextView(currentActivity);
	text1.setText(text);
	text1.setGravity(android.view.Gravity.LEFT);
	text1.setTextSize(12);
	text1.setTextColor(android.graphics.Color.parseColor("#FFFFFFFF"));
	text1.setPadding(Convert.convertDpToPixels(8), 0, Convert.convertDpToPixels(8), 0);
	text1.setLayoutParams(new android.widget.LinearLayout.LayoutParams(0, android.view.ViewGroup.LayoutParams.WRAP_CONTENT, 1));

	var layoutH = new android.widget.LinearLayout(currentActivity);
	layoutH.setOrientation(android.widget.LinearLayout.HORIZONTAL);

	layoutH.addView(progressBar);
	layoutH.addView(text1);
	return layoutH;
}

function defaultContentTextView(text) // TextView for contents (basicMinecraftTextView with little changes)
{
	var textview = basicMinecraftTextView(text, 12);
	textview.setTextColor(android.graphics.Color.parseColor(MinecraftButtonLibrary.defaultButtonTextColor));

	return textview;
}

function defaultSubTitle(subtitle) // TextView with Minecraft background
{
	var padding = Convert.convertDpToPixels(8);

	var bg = android.graphics.drawable.GradientDrawable();
	bg.setColor(android.graphics.Color.parseColor("#FF736A6F"));
	bg.setShape(android.graphics.drawable.GradientDrawable.RECTANGLE);
	bg.setStroke(Convert.convertDpToPixels(2), android.graphics.Color.parseColor("#FF93898B"));

	var title = basicMinecraftTextView(subtitle, 16);
	title.setTextColor(android.graphics.Color.WHITE);
	title.setBackgroundDrawable(bg);
	title.setPadding(padding, padding, padding, padding);

	return title;
}

function defaultLayout(title)
{
	var layout = new android.widget.LinearLayout(currentActivity);
	layout.setOrientation(android.widget.LinearLayout.VERTICAL);
	var padding = Convert.convertDpToPixels(8);
	layout.setPadding(padding, padding, padding, padding);
	layout.setBackgroundDrawable(background);

	var titleTextView = basicMinecraftTextView(title, 18);
	titleTextView.setTextColor(android.graphics.Color.WHITE);
	titleTextView.setGravity(android.view.Gravity.CENTER);
	layout.addView(titleTextView);
	Ui.setMarginsToViewInLinearLayout(titleTextView, 0, 4, 0, 4);

	var divider = new android.view.View(currentActivity);
	divider.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.parseColor("#958681")));
	divider.setLayoutParams(new android.view.ViewGroup.LayoutParams(android.view.ViewGroup.LayoutParams.FILL_PARENT, Convert.convertDpToPixels(1)));
	layout.addView(divider);
	Ui.setMarginsToViewInLinearLayout(divider, 0, 8, 0, 8);

	return layout;
}

function defaultPopup(layout)
{
	var scroll = new android.widget.ScrollView(currentActivity);
	scroll.addView(layout);

	var popup = new android.app.Dialog(currentActivity);
	popup.requestWindowFeature(android.view.Window.FEATURE_NO_TITLE);
	popup.setContentView(scroll);
	return popup;
}


//########################################################################################################################################################
// Popup's UI functions
//########################################################################################################################################################

function infoDesnoGunsMod()
{
	currentActivity.runOnUiThread(new java.lang.Runnable()
	{
		run: function()
		{
			try
			{
				var layout;
				if(isPro())
					layout = defaultLayout("DesnoGuns Mod Pro");
				else
					layout = defaultLayout("DesnoGuns Mod");

				var text = defaultContentTextView("Welcome to the DesnoGuns Mod by Desno365!");
				layout.addView(text);
				Ui.setMarginsToViewInLinearLayout(text, 0, MARGIN_HORIZONTAL_SMALL, 0, MARGIN_HORIZONTAL_BIG);

				var informationButton = MinecraftButton();
				informationButton.setText("Information");
				informationButton.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						informationUI();
						popup.dismiss();
					}
				});
				layout.addView(informationButton);
				Ui.setMarginsToViewInLinearLayout(informationButton, 0, MARGIN_HORIZONTAL_SMALL, 0, MARGIN_HORIZONTAL_SMALL);

				var settingsButton = MinecraftButton();
				settingsButton.setText("Settings");
				settingsButton.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						settingsUI();
						popup.dismiss();
					}
				});
				layout.addView(settingsButton);
				Ui.setMarginsToViewInLinearLayout(settingsButton, 0, MARGIN_HORIZONTAL_SMALL, 0, MARGIN_HORIZONTAL_SMALL);

				var addonsButton = MinecraftButton();
				addonsButton.setText("Addons");
				addonsButton.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						addonsUI();
						popup.dismiss();
					}
				});
				layout.addView(addonsButton);
				Ui.setMarginsToViewInLinearLayout(addonsButton, 0, MARGIN_HORIZONTAL_SMALL, 0, MARGIN_HORIZONTAL_BIG);


				var updatesButton = MinecraftButton();
				updatesButton.setText("Check for updates");
				updatesButton.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						if(latestVersion == CURRENT_VERSION || latestVersion == undefined || latestVersion == " ")
						{
							latestVersionUI();
							popup.dismiss();
						} else
						{
							updateAvailableUI();
						}
					}
				});
				layout.addView(updatesButton);
				Ui.setMarginsToViewInLinearLayout(updatesButton, 0, MARGIN_HORIZONTAL_SMALL, 0, MARGIN_HORIZONTAL_SMALL);

				var modThreadButton = MinecraftButton();
				modThreadButton.setText("Visit the mod thread");
				modThreadButton.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						visitThread();
						popup.dismiss();
					}
				});
				layout.addView(modThreadButton);
				Ui.setMarginsToViewInLinearLayout(modThreadButton, 0, MARGIN_HORIZONTAL_SMALL, 0, MARGIN_HORIZONTAL_SMALL);

				var supportButton = MinecraftButton();
				supportButton.setText("Support the developer");
				supportButton.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						supportUI();
						popup.dismiss();
					}
				});
				layout.addView(supportButton);
				Ui.setMarginsToViewInLinearLayout(supportButton, 0, MARGIN_HORIZONTAL_SMALL, 0, MARGIN_HORIZONTAL_BIG);


				var exitButton = MinecraftButton();
				exitButton.setText("Close");
				exitButton.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						popup.dismiss();
					}
				});
				layout.addView(exitButton);
				Ui.setMarginsToViewInLinearLayout(exitButton, 0, MARGIN_HORIZONTAL_SMALL, 0, MARGIN_HORIZONTAL_SMALL);


				var popup = defaultPopup(layout);
				Popup.showImmersivePopup(popup);

			} catch(err)
			{
				clientMessage("Error: " + err);
			}
		}
	});
}

function informationUI()
{
	currentActivity.runOnUiThread(new java.lang.Runnable()
	{
		run: function()
		{
			try
			{
				var layout;
				layout = defaultLayout("Information");

				var button = MinecraftButton();
				button.setText("View guns specifications");
				button.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						if(loadedAddons.length > 0)
							informationGunsSpecificationsArrays();
						else
							informationGunsSpecificationsForGunsArray(defaultGuns, "DesnoGuns");

						popup.dismiss();
					}
				});
				layout.addView(button);
				Ui.setMarginsToViewInLinearLayout(button, 0, MARGIN_HORIZONTAL_SMALL, 0, MARGIN_HORIZONTAL_SMALL);

				var button = MinecraftButton();
				button.setText("Other items");
				button.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						informationOtherItems();
						popup.dismiss();
					}
				});
				layout.addView(button);
				Ui.setMarginsToViewInLinearLayout(button, 0, MARGIN_HORIZONTAL_SMALL, 0, MARGIN_HORIZONTAL_BIG);

				var backButton = MinecraftButton();
				backButton.setText("Back");
				backButton.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						infoDesnoGunsMod();
						popup.dismiss();
					}
				});
				layout.addView(backButton);
				Ui.setMarginsToViewInLinearLayout(backButton, 0, MARGIN_HORIZONTAL_SMALL, 0, MARGIN_HORIZONTAL_SMALL);

				var exitButton = MinecraftButton();
				exitButton.setText("Close");
				exitButton.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						popup.dismiss();
					}
				});
				layout.addView(exitButton);
				Ui.setMarginsToViewInLinearLayout(exitButton, 0, MARGIN_HORIZONTAL_SMALL, 0, MARGIN_HORIZONTAL_SMALL);


				var popup = defaultPopup(layout);
				Popup.showImmersivePopup(popup);

			} catch(err)
			{
				clientMessage("Error: " + err);
			}
		}
	});
}

function informationGunsSpecificationsArrays()
{
	currentActivity.runOnUiThread(new java.lang.Runnable()
	{
		run: function()
		{
			try
			{
				var layout;
				layout = defaultLayout("Guns specifications");

				var button = MinecraftButton();
				button.setText("DesnoGuns");
				button.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						informationGunsSpecificationsForGunsArray(defaultGuns, "DesnoGuns");
						popup.dismiss();
					}
				});
				layout.addView(button);
				Ui.setMarginsToViewInLinearLayout(button, 0, MARGIN_HORIZONTAL_SMALL, 0, MARGIN_HORIZONTAL_SMALL);

				for(var i in loadedAddons)
				{
					var button = MinecraftButton();
					button.setText(loadedAddons[i].name);
					button.setHint(String(i)); // used as a setTag
					button.setOnClickListener(new android.view.View.OnClickListener()
					{
						onClick: function(v)
						{
							var index = parseInt(v.getHint());
							informationGunsSpecificationsForGunsArray(loadedAddons[index].gunsArray, loadedAddons[index].name);
							popup.dismiss();
						}
					});
					layout.addView(button);
					Ui.setMarginsToViewInLinearLayout(button, 0, MARGIN_HORIZONTAL_SMALL, 0, MARGIN_HORIZONTAL_SMALL);
				}
				layout.addView(dividerText());


				var backButton = MinecraftButton();
				backButton.setText("Back");
				backButton.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						informationUI();
						popup.dismiss();
					}
				});
				layout.addView(backButton);
				Ui.setMarginsToViewInLinearLayout(backButton, 0, MARGIN_HORIZONTAL_SMALL, 0, MARGIN_HORIZONTAL_SMALL);

				var exitButton = MinecraftButton();
				exitButton.setText("Close");
				exitButton.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						popup.dismiss();
					}
				});
				layout.addView(exitButton);
				Ui.setMarginsToViewInLinearLayout(exitButton, 0, MARGIN_HORIZONTAL_SMALL, 0, MARGIN_HORIZONTAL_SMALL);


				var popup = defaultPopup(layout);
				Popup.showImmersivePopup(popup);
			} catch(err)
			{
				clientMessage("Error: " + err);
			}
		}
	});
}

function informationGunsSpecificationsForGunsArray(gunsArray, name)
{
	currentActivity.runOnUiThread(new java.lang.Runnable()
	{
		run: function()
		{
			try
			{
				var layout;
				layout = defaultLayout(name);

				var button = MinecraftButton();
				button.setText(getGunTypeName(GUN_TYPE_ASSAULT_RIFLE));
				button.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						informationGunsSpecificationsForGunType(gunsArray, GUN_TYPE_ASSAULT_RIFLE);
						popup.dismiss();
					}
				});
				layout.addView(button);
				Ui.setMarginsToViewInLinearLayout(button, 0, MARGIN_HORIZONTAL_SMALL, 0, MARGIN_HORIZONTAL_SMALL);

				var button = MinecraftButton();
				button.setText(getGunTypeName(GUN_TYPE_SUB_MACHINE));
				button.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						informationGunsSpecificationsForGunType(gunsArray, GUN_TYPE_SUB_MACHINE);
						popup.dismiss();
					}
				});
				layout.addView(button);
				Ui.setMarginsToViewInLinearLayout(button, 0, MARGIN_HORIZONTAL_SMALL, 0, MARGIN_HORIZONTAL_SMALL);

				var button = MinecraftButton();
				button.setText(getGunTypeName(GUN_TYPE_LIGHT_MACHINE));
				button.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						informationGunsSpecificationsForGunType(gunsArray, GUN_TYPE_LIGHT_MACHINE);
						popup.dismiss();
					}
				});
				layout.addView(button);
				Ui.setMarginsToViewInLinearLayout(button, 0, MARGIN_HORIZONTAL_SMALL, 0, MARGIN_HORIZONTAL_SMALL);

				var button = MinecraftButton();
				button.setText(getGunTypeName(GUN_TYPE_SNIPER_RIFLE));
				button.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						informationGunsSpecificationsForGunType(gunsArray, GUN_TYPE_SNIPER_RIFLE);
						popup.dismiss();
					}
				});
				layout.addView(button);
				Ui.setMarginsToViewInLinearLayout(button, 0, MARGIN_HORIZONTAL_SMALL, 0, MARGIN_HORIZONTAL_SMALL);

				var button = MinecraftButton();
				button.setText(getGunTypeName(GUN_TYPE_SHOTGUN));
				button.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						informationGunsSpecificationsForGunType(gunsArray, GUN_TYPE_SHOTGUN);
						popup.dismiss();
					}
				});
				layout.addView(button);
				Ui.setMarginsToViewInLinearLayout(button, 0, MARGIN_HORIZONTAL_SMALL, 0, MARGIN_HORIZONTAL_SMALL);

				var button = MinecraftButton();
				button.setText(getGunTypeName(GUN_TYPE_MACHINE_PISTOL));
				button.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						informationGunsSpecificationsForGunType(gunsArray, GUN_TYPE_MACHINE_PISTOL);
						popup.dismiss();
					}
				});
				layout.addView(button);
				Ui.setMarginsToViewInLinearLayout(button, 0, MARGIN_HORIZONTAL_SMALL, 0, MARGIN_HORIZONTAL_SMALL);

				var button = MinecraftButton();
				button.setText(getGunTypeName(GUN_TYPE_HANDGUN));
				button.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						informationGunsSpecificationsForGunType(gunsArray, GUN_TYPE_HANDGUN);
						popup.dismiss();
					}
				});
				layout.addView(button);
				Ui.setMarginsToViewInLinearLayout(button, 0, MARGIN_HORIZONTAL_SMALL, 0, MARGIN_HORIZONTAL_SMALL);

				var button = MinecraftButton();
				button.setText(getGunTypeName(GUN_TYPE_LAUNCHER));
				button.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						informationGunsSpecificationsForGunType(gunsArray, GUN_TYPE_LAUNCHER);
						popup.dismiss();
					}
				});
				layout.addView(button);
				Ui.setMarginsToViewInLinearLayout(button, 0, MARGIN_HORIZONTAL_SMALL, 0, MARGIN_HORIZONTAL_SMALL);

				var button = MinecraftButton();
				button.setText(getGunTypeName(GUN_TYPE_MINIGUN));
				button.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						informationGunsSpecificationsForGunType(gunsArray, GUN_TYPE_MINIGUN);
						popup.dismiss();
					}
				});
				layout.addView(button);
				Ui.setMarginsToViewInLinearLayout(button, 0, MARGIN_HORIZONTAL_SMALL, 0, MARGIN_HORIZONTAL_BIG);


				var backButton = MinecraftButton();
				backButton.setText("Back");
				backButton.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						if(loadedAddons.length > 0)
							informationGunsSpecificationsArrays();
						else
							informationUI();

						popup.dismiss();
					}
				});
				layout.addView(backButton);
				Ui.setMarginsToViewInLinearLayout(backButton, 0, MARGIN_HORIZONTAL_SMALL, 0, MARGIN_HORIZONTAL_SMALL);

				var exitButton = MinecraftButton();
				exitButton.setText("Close");
				exitButton.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						popup.dismiss();
					}
				});
				layout.addView(exitButton);
				Ui.setMarginsToViewInLinearLayout(exitButton, 0, MARGIN_HORIZONTAL_SMALL, 0, MARGIN_HORIZONTAL_SMALL);


				var popup = defaultPopup(layout);
				Popup.showImmersivePopup(popup);

			} catch(err)
			{
				clientMessage("Error: " + err);
			}
		}
	});
}

function informationGunsSpecificationsForGunType(gunsArray, gunType)
{
	currentActivity.runOnUiThread(new java.lang.Runnable()
	{
		run: function()
		{
			try
			{
				var layout;
				layout = defaultLayout(getGunTypeName(gunType) + " specifications");

				for(var i in gunsArray)
				{
					if(gunsArray[i].gunType == gunType)
					{
						var text = new android.widget.TextView(currentActivity);
						text.setText(new android.text.Html.fromHtml("<b>" + gunsArray[i].name + "</b> (ID: " + gunsArray[i].id + ")"));
						text.setTextColor(android.graphics.Color.parseColor("#FFFFFFFF"));
						layout.addView(text);

						var text = new android.widget.TextView(currentActivity);
						text.setText(getGunTypeName(gunsArray[i].gunType));
						text.setGravity(android.view.Gravity.RIGHT);
						text.setTextSize(12);
						text.setTextColor(android.graphics.Color.parseColor("#FFFFFFFF"));
						layout.addView(text);


						if(gunsArray[i].ammo != 1)
						{
							var text = new android.widget.TextView(currentActivity);
							text.setText("Fire rate");
							text.setTextColor(android.graphics.Color.parseColor("#FFFFFFFF"));
							layout.addView(text);

							if(gunsArray[i].fireRate == 1 && gunsArray[i].buttonType == BUTTON_TYPE_ON_CLICK)
							{
								var text = new android.widget.TextView(currentActivity);
								text.setText("Shoot one bullet every time the user clicks the \"fire\" button");
								text.setTextSize(12);
								text.setTextColor(android.graphics.Color.parseColor("#FFFFFFFF"));
								layout.addView(text);
							} else
							{
								layout.addView(progressBarForInformation(gunsArray[i].fireRate, 20, true, (gunsArray[i].fireRate / 20) + " second(s)"));
							}
						}


						var text = new android.widget.TextView(currentActivity);
						text.setText("Recoil");
						text.setTextColor(android.graphics.Color.parseColor("#FFFFFFFF"));
						layout.addView(text);

						layout.addView(progressBarForInformation(gunsArray[i].recoil, 30, true, (61 - (gunsArray[i].recoil * 2)) + "/60"));


						var text = new android.widget.TextView(currentActivity);
						text.setText("Accuracy");
						text.setTextColor(android.graphics.Color.parseColor("#FFFFFFFF"));
						layout.addView(text);

						layout.addView(progressBarForInformation(gunsArray[i].accuracy, SPAS.accuracy, true, (51 - gunsArray[i].accuracy) + "/50"));


						var text = new android.widget.TextView(currentActivity);
						text.setText("Zoom level (when aiming)");
						text.setTextColor(android.graphics.Color.parseColor("#FFFFFFFF"));
						layout.addView(text);

						layout.addView(progressBarForInformation(gunsArray[i].zoomLevel, ZOOM_SNIPER, false, gunsArray[i].zoomLevel + " FOV"));


						if(gunsArray[i].shotType != SHOT_TYPE_FLAMETHROWER)
						{
							var text = new android.widget.TextView(currentActivity);
							text.setText("Bullet speed");
							text.setTextColor(android.graphics.Color.parseColor("#FFFFFFFF"));
							layout.addView(text);

							layout.addView(progressBarForInformation(gunsArray[i].bulletSpeed * 10, 100, false, gunsArray[i].bulletSpeed * 10 + "/100"));
						}
						

						var text = new android.widget.TextView(currentActivity);
						text.setText("Ammo");
						text.setTextColor(android.graphics.Color.parseColor("#FFFFFFFF"));
						layout.addView(text);

						layout.addView(progressBarForInformation(gunsArray[i].ammo, 125, false, gunsArray[i].ammo.toString()));


						if(gunsArray[i].bulletType == BULLET_TYPE_NORMAL_EXPLOSIVE_ON_TOUCH || gunsArray[i].bulletType == BULLET_TYPE_NORMAL_EXPLOSIVE_ON_TIME)
						{
							var text = new android.widget.TextView(currentActivity);
							text.setText("Explosion radius");
							text.setTextColor(android.graphics.Color.parseColor("#FFFFFFFF"));
							layout.addView(text);

							layout.addView(progressBarForInformation(gunsArray[i].bulletsExplosionRadius, 5, false, gunsArray[i].bulletsExplosionRadius + "/10"));;
						}

						layout.addView(dividerText());
					}
				}


				var backButton = MinecraftButton();
				backButton.setText("Back");
				backButton.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						if(loadedAddons.length > 0)
							informationGunsSpecificationsArrays();
						else
							informationGunsSpecificationsForGunsArray(defaultGuns, "DesnoGuns");

						popup.dismiss();
					}
				});
				layout.addView(backButton);
				Ui.setMarginsToViewInLinearLayout(backButton, 0, MARGIN_HORIZONTAL_SMALL, 0, MARGIN_HORIZONTAL_SMALL);

				var exitButton = MinecraftButton();
				exitButton.setText("Close");
				exitButton.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						popup.dismiss();
					}
				});
				layout.addView(exitButton);
				Ui.setMarginsToViewInLinearLayout(exitButton, 0, MARGIN_HORIZONTAL_SMALL, 0, MARGIN_HORIZONTAL_SMALL);


				var popup = defaultPopup(layout);
				Popup.showImmersivePopup(popup);

			} catch(err)
			{
				clientMessage("Error: " + err);
			}
		}
	});
}

function informationOtherItems()
{
	currentActivity.runOnUiThread(new java.lang.Runnable()
	{
		run: function()
		{
			try
			{
				var layout;
				layout = defaultLayout("Other items");

				var textview = defaultContentTextView("<i>Knife</i>: ID: " + KNIFE_ID);
				layout.addView(textview);

				layout.addView(dividerText());

				var textview = defaultContentTextView("<i>Parachute</i>: ID: " + PARACHUTE_ID);
				layout.addView(textview);

				layout.addView(dividerText());

				var textview = defaultContentTextView("<i>Medical Kit</i>: ID: " + MEDICAL_KIT_ID);
				layout.addView(textview);

				layout.addView(dividerText());

				var textview = defaultContentTextView("<i>Riot Shield</i>: ID: " + RIOT_SHIELD_ID);
				layout.addView(textview);

				layout.addView(dividerText());

				var textview = defaultContentTextView("<i>Grenade</i>: ID: " + GRENADE.id);
				layout.addView(textview);

				layout.addView(dividerText());

				var textview = defaultContentTextView("<i>Fragment Grenade</i>: ID: " + FRAGMENT.id);
				layout.addView(textview);

				layout.addView(dividerText());

				var textview = defaultContentTextView("<i>Molotov</i>: ID: " + MOLOTOV.id);
				layout.addView(textview);

				layout.addView(dividerText());

				var textview = defaultContentTextView("<i>Smoke Grenade</i>: ID: " + SMOKE.id);
				layout.addView(textview);

				layout.addView(dividerText());

				var textview = defaultContentTextView("<i>Assault Rifle Ammo</i>: ID: " + AMMO_ASSAULT_RIFLE_ID);
				layout.addView(textview);

				layout.addView(dividerText());

				var textview = defaultContentTextView("<i>Sub Machine Ammo</i>: ID: " + AMMO_SUB_MACHINE_ID);
				layout.addView(textview);

				layout.addView(dividerText());

				var textview = defaultContentTextView("<i>Light Machine Ammo</i>: ID: " + AMMO_LIGHT_MACHINE_ID);
				layout.addView(textview);

				layout.addView(dividerText());

				var textview = defaultContentTextView("<i>Sniper Rifle Ammo</i>: ID: " + AMMO_SNIPER_RIFLE_ID);
				layout.addView(textview);

				layout.addView(dividerText());

				var textview = defaultContentTextView("<i>Shotgun Ammo</i>: ID: " + AMMO_SHOTGUN_ID);
				layout.addView(textview);

				layout.addView(dividerText());

				var textview = defaultContentTextView("<i>Machine Pistol Ammo</i>: ID: " + AMMO_MACHINE_PISTOL_ID);
				layout.addView(textview);

				layout.addView(dividerText());

				var textview = defaultContentTextView("<i>Handgun Ammo</i>: ID: " + AMMO_HANDGUN_ID);
				layout.addView(textview);

				layout.addView(dividerText());

				var textview = defaultContentTextView("<i>Launcher Ammo</i>: ID: " + AMMO_LAUNCHER_ID);
				layout.addView(textview);

				layout.addView(dividerText());

				var textview = defaultContentTextView("<i>Minigun Ammo</i>: ID: " + AMMO_MINIGUN_ID);
				layout.addView(textview);

				layout.addView(dividerText());

				var textview = defaultContentTextView("<i>Juggernaut Helmet</i>: ID: " + JUGGERNAUT_HELMET_ID);
				layout.addView(textview);

				layout.addView(dividerText());

				var textview = defaultContentTextView("<i>Juggernaut Body</i>: ID: " + JUGGERNAUT_BODY_ID);
				layout.addView(textview);

				layout.addView(dividerText());

				var textview = defaultContentTextView("<i>Juggernaut Pants</i>: ID: " + JUGGERNAUT_PANTS_ID);
				layout.addView(textview);

				layout.addView(dividerText());

				var textview = defaultContentTextView("<i>Juggernaut Boots</i>: ID: " + JUGGERNAUT_BOOTS_ID);
				layout.addView(textview);

				layout.addView(dividerText());


				var backButton = MinecraftButton();
				backButton.setText("Back");
				backButton.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						informationUI();
						popup.dismiss();
					}
				});
				layout.addView(backButton);
				Ui.setMarginsToViewInLinearLayout(backButton, 0, MARGIN_HORIZONTAL_SMALL, 0, MARGIN_HORIZONTAL_SMALL);

				var exitButton = MinecraftButton();
				exitButton.setText("Close");
				exitButton.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						popup.dismiss();
					}
				});
				layout.addView(exitButton);
				Ui.setMarginsToViewInLinearLayout(exitButton, 0, MARGIN_HORIZONTAL_SMALL, 0, MARGIN_HORIZONTAL_SMALL);


				var popup = defaultPopup(layout);
				Popup.showImmersivePopup(popup);

			} catch(err)
			{
				clientMessage("Error: " + err);
			}
		}
	});
}

function settingsUI()
{
	currentActivity.runOnUiThread(new java.lang.Runnable()
	{
		run: function()
		{
			try
			{
				var layout;
				layout = defaultLayout("Settings");

				var padding = Convert.convertDpToPixels(8);


				var title = defaultSubTitle("Buttons");
				layout.addView(title);

				layout.addView(dividerText());

				var sizeText = new android.widget.TextView(currentActivity);
				sizeText.setText("Select the preferred size of the \"fire\" and \"aim\" buttons (default is " + BUTTONS_SIZE_DEFAULT + ")");
				sizeText.setTextColor(android.graphics.Color.parseColor("#FFFFFFFF"));
				sizeText.setPadding(padding, 0, padding, 0);
				layout.addView(sizeText);

				var sizeChooser = new android.widget.SeekBar(currentActivity);
				sizeChooser.setMax(30);
				sizeChooser.setProgress(buttonsSize - 10);
				sizeChooser.setOnSeekBarChangeListener(new android.widget.SeekBar.OnSeekBarChangeListener()
				{
					onProgressChanged: function()
					{
						buttonsSize = sizeChooser.getProgress() + 10;
						sizeText1.setText("Size: " + buttonsSize + "/" + (sizeChooser.getMax() + 10));
					},
					onStopTrackingTouch: function()
					{
						ModPE.saveData("bSize", buttonsSize);
					}
				});
				sizeChooser.setPadding(padding * 2, 0, padding * 2, 0);
				layout.addView(sizeChooser);

				var sizeText1 = new android.widget.TextView(currentActivity);
				sizeText1.setText("Size: " + buttonsSize + "/" + (sizeChooser.getMax() + 10));
				sizeText1.setTextColor(android.graphics.Color.parseColor("#FFC0C0C0"));
				sizeText1.setPadding(padding * 2, 0, padding * 2, 0);
				layout.addView(sizeText1);

				layout.addView(dividerText());



				var moveButtonsText = new android.widget.TextView(currentActivity);
				moveButtonsText.setText("Select the y positions of the \"fire\" and \"aim\" buttons (default is 0)");
				moveButtonsText.setTextColor(android.graphics.Color.parseColor("#FFFFFFFF"));
				moveButtonsText.setPadding(padding, 0, padding, 0);
				layout.addView(moveButtonsText);

				var maxY = (Screen.getHeight() / 4 * 3);
				if(maxY % 2 != 0)
					maxY--;
				var moveButtonsChooser = new android.widget.SeekBar(currentActivity);
				moveButtonsChooser.setMax(maxY);
				moveButtonsChooser.setProgress((-pixelsOffsetButtons) + (maxY / 2));
				moveButtonsChooser.setOnSeekBarChangeListener(new android.widget.SeekBar.OnSeekBarChangeListener()
				{
					onProgressChanged: function()
					{
						pixelsOffsetButtons = -(moveButtonsChooser.getProgress() - (maxY / 2));
						moveButtonsText1.setText("Y position: " + (-pixelsOffsetButtons) + " pixels");
					},
					onStopTrackingTouch: function()
					{
						ModPE.saveData("mButtons", pixelsOffsetButtons);
					}
				});
				moveButtonsChooser.setPadding(padding * 2, 0, padding * 2, 0);
				layout.addView(moveButtonsChooser);

				var moveButtonsText1 = new android.widget.TextView(currentActivity);
				moveButtonsText1.setText("Y position: " + (-pixelsOffsetButtons) + " pixels");
				moveButtonsText1.setTextColor(android.graphics.Color.parseColor("#FFC0C0C0"));
				moveButtonsText1.setPadding(padding * 2, 0, padding * 2, 0);
				layout.addView(moveButtonsText1);

				layout.addView(dividerText());



				var sizeText2 = new android.widget.TextView(currentActivity);
				sizeText2.setText("Select the preferred size of the ammo text (default is " + AMMO_TEXT_SIZE_DEFAULT + ")");
				sizeText2.setTextColor(android.graphics.Color.parseColor("#FFFFFFFF"));
				sizeText2.setPadding(padding, 0, padding, 0);
				layout.addView(sizeText2);

				var sizeChooser1 = new android.widget.SeekBar(currentActivity);
				sizeChooser1.setMax(20);
				sizeChooser1.setProgress(ammoTextSize - 8);
				sizeChooser1.setOnSeekBarChangeListener(new android.widget.SeekBar.OnSeekBarChangeListener()
				{
					onProgressChanged: function()
					{
						ammoTextSize = sizeChooser1.getProgress() + 8;
						sizeText3.setText("Size: " + ammoTextSize + "/" + (sizeChooser1.getMax() + 8));
					},
					onStopTrackingTouch: function()
					{
						ModPE.saveData("aTSize", ammoTextSize);
					}
				});
				sizeChooser1.setPadding(padding * 2, 0, padding * 2, 0);
				layout.addView(sizeChooser1);

				var sizeText3 = new android.widget.TextView(currentActivity);
				sizeText3.setText("Size: " + ammoTextSize + "/" + (sizeChooser1.getMax() + 8));
				sizeText3.setTextColor(android.graphics.Color.parseColor("#FFC0C0C0"));
				sizeText3.setPadding(padding * 2, 0, padding * 2, 0);
				layout.addView(sizeText3);

				layout.addView(dividerText());



				var switchButtonsPosition = new android.widget.Switch(currentActivity);
				switchButtonsPosition.setChecked(switchedButtonsPosition);
				switchButtonsPosition.setText("Switch position of the \"fire\" and \"aim\" buttons");
				switchButtonsPosition.setTextColor(android.graphics.Color.parseColor("#FFFFFFFF"));
				switchButtonsPosition.setOnCheckedChangeListener(new android.widget.CompoundButton.OnCheckedChangeListener()
				{
					onCheckedChanged: function()
					{
						switchedButtonsPosition = !switchedButtonsPosition;
						ModPE.saveData("sBPosition", switchedButtonsPosition);
					}
				});
				switchButtonsPosition.setPadding(padding, 0, padding, 0);
				layout.addView(switchButtonsPosition);

				layout.addView(dividerText());



				var switchButtonsStyle = new android.widget.Switch(currentActivity);
				switchButtonsStyle.setChecked(minecraftStyleForButtons);
				switchButtonsStyle.setText("Enable Minecraft style for the \"fire\" and \"aim\" buttons");
				switchButtonsStyle.setTextColor(android.graphics.Color.parseColor("#FFFFFFFF"));
				switchButtonsStyle.setOnCheckedChangeListener(new android.widget.CompoundButton.OnCheckedChangeListener()
				{
					onCheckedChanged: function()
					{
						minecraftStyleForButtons = !minecraftStyleForButtons;
						ModPE.saveData("sBStyle", minecraftStyleForButtons);
					}
				});
				switchButtonsStyle.setPadding(padding, 0, padding, 0);
				layout.addView(switchButtonsStyle);

				layout.addView(dividerText());




				var title = defaultSubTitle("UI");
				layout.addView(title);

				layout.addView(dividerText());

				var switchSight = new android.widget.Switch(currentActivity);
				switchSight.setChecked(shouldDisplaySight);
				switchSight.setText("Display a little cross in the center of the screen");
				switchSight.setTextColor(android.graphics.Color.parseColor("#FFFFFFFF"));
				switchSight.setOnCheckedChangeListener(new android.widget.CompoundButton.OnCheckedChangeListener()
				{
					onCheckedChanged: function()
					{
						shouldDisplaySight = !shouldDisplaySight;
						ModPE.saveData("dSight", shouldDisplaySight);
						try {
							popupSightImage.dismiss();
						} catch(e) {}
					}
				});
				switchSight.setPadding(padding, 0, padding, 0);
				layout.addView(switchSight);

				layout.addView(dividerText());



				var switchGunName = new android.widget.Switch(currentActivity);
				switchGunName.setChecked(displayGunNameInAmmo);
				switchGunName.setText("Display gun's name in the ammo text");
				switchGunName.setTextColor(android.graphics.Color.parseColor("#FFFFFFFF"));
				switchGunName.setOnCheckedChangeListener(new android.widget.CompoundButton.OnCheckedChangeListener()
				{
					onCheckedChanged: function()
					{
						displayGunNameInAmmo = !displayGunNameInAmmo;
						ModPE.saveData("dNameAmmo", displayGunNameInAmmo);
					}
				});
				switchGunName.setPadding(padding, 0, padding, 0);
				layout.addView(switchGunName);

				layout.addView(dividerText());



				var title = defaultSubTitle("Audio");
				layout.addView(title);

				layout.addView(dividerText());

				var audioText = new android.widget.TextView(currentActivity);
				audioText.setText("Set the sound volume of the mod (default is " + 10 + ")");
				audioText.setTextColor(android.graphics.Color.parseColor("#FFFFFFFF"));
				audioText.setPadding(padding, 0, padding, 0);
				layout.addView(audioText);

				var audioChooser = new android.widget.SeekBar(currentActivity);
				audioChooser.setMax(10);
				audioChooser.setProgress(generalVolume * 10);
				audioChooser.setOnSeekBarChangeListener(new android.widget.SeekBar.OnSeekBarChangeListener()
				{
					onProgressChanged: function()
					{
						generalVolume = audioChooser.getProgress() / 10;
						audioText1.setText("Volume: " + audioChooser.getProgress() + "/" + audioChooser.getMax());
					},
					onStopTrackingTouch: function()
					{
						ModPE.saveData("generalVolume", generalVolume);
					}
				});
				audioChooser.setPadding(padding * 2, 0, padding * 2, 0);
				layout.addView(audioChooser);

				var audioText1 = new android.widget.TextView(currentActivity);
				audioText1.setText("Volume: " + (generalVolume * 10) + "/" + audioChooser.getMax());
				audioText1.setTextColor(android.graphics.Color.parseColor("#FFC0C0C0"));
				audioText1.setPadding(padding * 2, 0, padding * 2, 0);
				layout.addView(audioText1);

				layout.addView(dividerText());



				var title = defaultSubTitle("Other");
				layout.addView(title);

				layout.addView(dividerText());

				var switchReloadCreative = new android.widget.Switch(currentActivity);
				switchReloadCreative.setChecked(reloadInCreative);
				switchReloadCreative.setText("Reload in creative");
				switchReloadCreative.setTextColor(android.graphics.Color.parseColor("#FFFFFFFF"));
				switchReloadCreative.setOnCheckedChangeListener(new android.widget.CompoundButton.OnCheckedChangeListener()
				{
					onCheckedChanged: function()
					{
						reloadInCreative = !reloadInCreative;
						ModPE.saveData("rCreative", reloadInCreative);

						switchInstantReloadCreative.setEnabled(reloadInCreative);
					}
				});
				switchReloadCreative.setPadding(padding, 0, padding, 0);
				layout.addView(switchReloadCreative);

				layout.addView(dividerText());



				var switchInstantReloadCreative = new android.widget.Switch(currentActivity);
				switchInstantReloadCreative.setChecked(instantReloadInCreative);
				switchInstantReloadCreative.setText("Instant reload in creative (disable reload sounds)");
				switchInstantReloadCreative.setTextColor(android.graphics.Color.parseColor("#FFFFFFFF"));
				switchInstantReloadCreative.setOnCheckedChangeListener(new android.widget.CompoundButton.OnCheckedChangeListener()
				{
					onCheckedChanged: function()
					{
						instantReloadInCreative = !instantReloadInCreative;
						ModPE.saveData("instReload", instantReloadInCreative);
					}
				});
				switchInstantReloadCreative.setEnabled(reloadInCreative);
				switchInstantReloadCreative.setPadding(padding, 0, padding, 0);
				layout.addView(switchInstantReloadCreative);

				layout.addView(dividerText());



				var backButton = MinecraftButton();
				backButton.setText("Back");
				backButton.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						infoDesnoGunsMod();
						popup.dismiss();
					}
				});
				layout.addView(backButton);
				Ui.setMarginsToViewInLinearLayout(backButton, 0, MARGIN_HORIZONTAL_SMALL, 0, MARGIN_HORIZONTAL_SMALL);

				var exitButton = MinecraftButton();
				exitButton.setText("Close");
				exitButton.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						popup.dismiss();
					}
				});
				layout.addView(exitButton);
				Ui.setMarginsToViewInLinearLayout(exitButton, 0, MARGIN_HORIZONTAL_SMALL, 0, MARGIN_HORIZONTAL_SMALL);


				var popup = defaultPopup(layout);
				Popup.showImmersivePopup(popup);

			} catch(err)
			{
				clientMessage("Error: " + err);
			}
		}
	});
}

function addonsUI()
{
	currentActivity.runOnUiThread(new java.lang.Runnable()
	{
		run: function()
		{
			try
			{
				var layout;
				layout = defaultLayout("Addons");

				var button = MinecraftButton();
				button.setText("Install an addon");
				button.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						var intentBrowser = new android.content.Intent(currentActivity);
						intentBrowser.setAction(android.content.Intent.ACTION_VIEW);
						intentBrowser.setData(android.net.Uri.parse("http://desno365.github.io/minecraft/desnoguns-mod/addons/"));
						currentActivity.startActivity(intentBrowser);
					}
				});
				layout.addView(button);
				Ui.setMarginsToViewInLinearLayout(button, 0, MARGIN_HORIZONTAL_SMALL, 0, MARGIN_HORIZONTAL_SMALL);

				var button = MinecraftButton();
				button.setText("Featured addons");
				button.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						var intentBrowser = new android.content.Intent(currentActivity);
						intentBrowser.setAction(android.content.Intent.ACTION_VIEW);
						intentBrowser.setData(android.net.Uri.parse("http://desno365.github.io/minecraft/desnoguns-mod/addons/featured/"));
						currentActivity.startActivity(intentBrowser);
					}
				});
				layout.addView(button);
				Ui.setMarginsToViewInLinearLayout(button, 0, MARGIN_HORIZONTAL_SMALL, 0, MARGIN_HORIZONTAL_SMALL);

				var button = MinecraftButton();
				button.setText("Enabled addons");
				button.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						enabledAddonsUI();
						popup.dismiss();
					}
				});
				layout.addView(button);
				Ui.setMarginsToViewInLinearLayout(button, 0, MARGIN_HORIZONTAL_SMALL, 0, MARGIN_HORIZONTAL_BIG);

				var backButton = MinecraftButton();
				backButton.setText("Back");
				backButton.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						infoDesnoGunsMod();
						popup.dismiss();
					}
				});
				layout.addView(backButton);
				Ui.setMarginsToViewInLinearLayout(backButton, 0, MARGIN_HORIZONTAL_SMALL, 0, MARGIN_HORIZONTAL_SMALL);

				var exitButton = MinecraftButton();
				exitButton.setText("Close");
				exitButton.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						popup.dismiss();
					}
				});
				layout.addView(exitButton);
				Ui.setMarginsToViewInLinearLayout(exitButton, 0, MARGIN_HORIZONTAL_SMALL, 0, MARGIN_HORIZONTAL_SMALL);


				var popup = defaultPopup(layout);
				Popup.showImmersivePopup(popup);

			} catch(err)
			{
				clientMessage("Error: " + err);
			}
		}
	});
}

function enabledAddonsUI()
{
	currentActivity.runOnUiThread(new java.lang.Runnable()
	{
		run: function()
		{
			try
			{
				var layout;
				layout = defaultLayout("Enabled addons");

				var padding = Convert.convertDpToPixels(8);


				for(var i in loadedAddons)
				{
					var title = defaultSubTitle(loadedAddons[i].name);
					layout.addView(title);

					layout.addView(dividerText());

					var textview = defaultContentTextView(loadedAddons[i].description + "<br><br>");
					textview.setPadding(padding, 0, padding, 0);
					layout.addView(textview);
				}

				// 0 addons enabled
				if(loadedAddons.length == 0)
				{
					layout.addView(dividerText());

					var textview = defaultContentTextView("You don't have any addon enabled.<br>" +
						"Get one from here: <a href=\"http://desno365.github.io/minecraft/desnoguns-mod/addons/featured/\">featured addons</a>.");
					textview.setMovementMethod(android.text.method.LinkMovementMethod.getInstance());
					layout.addView(textview);

					layout.addView(dividerText());
				}

				// one or more addons enabled without the pro version
				if(loadedAddons.length >= 1 && (!isPro()))
				{
					var textview = defaultContentTextView("Buy the <a href=\"https://play.google.com/store/apps/details?id=com.desno365.desnogunsmodkey\">DesnoGuns Mod Pro Key</a> to enable more than 2 addons simultaneously.<br>");
					textview.setMovementMethod(android.text.method.LinkMovementMethod.getInstance());
					textview.setTextSize(11);
					layout.addView(textview);
				}


				var backButton = MinecraftButton();
				backButton.setText("Back");
				backButton.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						addonsUI();
						popup.dismiss();
					}
				});
				layout.addView(backButton);
				Ui.setMarginsToViewInLinearLayout(backButton, 0, MARGIN_HORIZONTAL_SMALL, 0, MARGIN_HORIZONTAL_SMALL);

				var exitButton = MinecraftButton();
				exitButton.setText("Close");
				exitButton.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						popup.dismiss();
					}
				});
				layout.addView(exitButton);
				Ui.setMarginsToViewInLinearLayout(exitButton, 0, MARGIN_HORIZONTAL_SMALL, 0, MARGIN_HORIZONTAL_SMALL);


				var popup = defaultPopup(layout);
				Popup.showImmersivePopup(popup);

			} catch(err)
			{
				clientMessage("Error: " + err);
			}
		}
	});
}

function latestVersionUI()
{
	currentActivity.runOnUiThread(new java.lang.Runnable()
	{
		run: function()
		{
			try
			{
				var layout;
				layout = defaultLayout("You're up to date");

				var updatesText = defaultContentTextView("You have the latest version of the mod.<br><br>" +
					"Download the Desno365's Mods app to receive notifications of new updates and get the latest news about my mods.");
				layout.addView(updatesText);
				Ui.setMarginsToViewInLinearLayout(updatesText, 0, MARGIN_HORIZONTAL_SMALL, 0, MARGIN_HORIZONTAL_BIG);

				var playStoreView = new android.widget.ImageView(currentActivity);
				playStoreView.setImageBitmap(playStorePngScaled);
				playStoreView.setOnClickListener(new android.view.View.OnClickListener(
				{
					onClick: function()
					{
						try
						{
							//play store installed
							currentActivity.startActivity(new android.content.Intent(android.content.Intent.ACTION_VIEW, android.net.Uri.parse("market://details?id=" + "com.desno365.mods")));
						} catch (err)
						{
							//play store not installed
							currentActivity.startActivity(new android.content.Intent(android.content.Intent.ACTION_VIEW, android.net.Uri.parse("http://play.google.com/store/apps/details?id=" + "com.desno365.mods")));
						}
					}
				}));
				layout.addView(playStoreView);
				Ui.setMarginsToViewInLinearLayout(playStoreView, 0, MARGIN_HORIZONTAL_SMALL, 0, MARGIN_HORIZONTAL_BIG);



				var backButton = MinecraftButton();
				backButton.setText("Back");
				backButton.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						infoDesnoGunsMod();
						popup.dismiss();
					}
				});
				layout.addView(backButton);
				Ui.setMarginsToViewInLinearLayout(backButton, 0, MARGIN_HORIZONTAL_SMALL, 0, MARGIN_HORIZONTAL_SMALL);

				var exitButton = MinecraftButton();
				exitButton.setText("Close");
				exitButton.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						popup.dismiss();
					}
				});
				layout.addView(exitButton);
				Ui.setMarginsToViewInLinearLayout(exitButton, 0, MARGIN_HORIZONTAL_SMALL, 0, MARGIN_HORIZONTAL_SMALL);


				var popup = defaultPopup(layout);
				Popup.showImmersivePopup(popup);

			} catch(err)
			{
				clientMessage("Error: " + err);
			}
		}
	});
}

function updateAvailableUI()
{
	currentActivity.runOnUiThread(new java.lang.Runnable()
	{
		run: function()
		{
			try
			{
				var layout;
				layout = defaultLayout("DesnoGuns Mod: new version");

				var updatesText = defaultContentTextView("New version available, you have the " + CURRENT_VERSION + " version and the latest version is " + latestVersion + ".<br>" +
					"You can find a download link on Desno365's website (press the button to visit it).");
				layout.addView(updatesText);
				Ui.setMarginsToViewInLinearLayout(updatesText, 0, MARGIN_HORIZONTAL_SMALL, 0, MARGIN_HORIZONTAL_SMALL);

				var threadButton = MinecraftButton();
				threadButton.setText("Visit website");
				threadButton.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						var intentBrowser = new android.content.Intent(currentActivity);
						intentBrowser.setAction(android.content.Intent.ACTION_VIEW);
						intentBrowser.setData(android.net.Uri.parse("http://desno365.github.io/minecraft/desnoguns-mod/"));
						currentActivity.startActivity(intentBrowser);
						popup.dismiss();
					}
				});
				layout.addView(threadButton);
				Ui.setMarginsToViewInLinearLayout(threadButton, 0, MARGIN_HORIZONTAL_SMALL, 0, MARGIN_HORIZONTAL_BIG);

				var exitButton = MinecraftButton();
				exitButton.setText("Close");
				exitButton.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						popup.dismiss();
					}
				});
				layout.addView(exitButton);
				Ui.setMarginsToViewInLinearLayout(exitButton, 0, MARGIN_HORIZONTAL_SMALL, 0, MARGIN_HORIZONTAL_SMALL);


				var popup = defaultPopup(layout);
				popup.setCanceledOnTouchOutside(false);
				Popup.showImmersivePopup(popup);

			} catch(err)
			{
				clientMessage("Error: " + err);
			}
		}
	});
}

function visitThread()
{
	currentActivity.runOnUiThread(new java.lang.Runnable()
	{
		run: function()
		{
			try
			{
				var intentBrowser = new android.content.Intent(currentActivity);
				intentBrowser.setAction(android.content.Intent.ACTION_VIEW);
				intentBrowser.setData(android.net.Uri.parse("http://www.minecraftforum.net/forums/minecraft-pocket-edition/mcpe-mods-tools/2299721-mod-desnoguns-mod-more-than-50-weapons-r001-by"));
				currentActivity.startActivity(intentBrowser);
			} catch(err)
			{
				clientMessage("Error: " + err);
			}
		}
	});
}

function supportUI()
{
	currentActivity.runOnUiThread(new java.lang.Runnable()
	{
		run: function()
		{
			try
			{
				var layout;
				layout = defaultLayout("Support me");

				var text = defaultContentTextView("This mod was brought to you with love by Desno365 :)<br>Thank you for playing with it.");
				layout.addView(text);
				Ui.setMarginsToViewInLinearLayout(text, 0, MARGIN_HORIZONTAL_SMALL, 0, MARGIN_HORIZONTAL_SMALL);

				var button1 = MinecraftButton();
				button1.setText("Follow me on Twitter");
				button1.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						android.widget.Toast.makeText(currentActivity, "Opening the URL...", 0).show();
						var intentBrowser = new android.content.Intent(currentActivity);
						intentBrowser.setAction(android.content.Intent.ACTION_VIEW);
						intentBrowser.setData(android.net.Uri.parse("https://twitter.com/desno365"));
						currentActivity.startActivity(intentBrowser);
						popup.dismiss();
					}
				});
				layout.addView(button1);
				Ui.setMarginsToViewInLinearLayout(button1, 0, MARGIN_HORIZONTAL_SMALL, 0, MARGIN_HORIZONTAL_SMALL);

				var button2 = MinecraftButton();
				button2.setText("Subscribe to my YouTube channel");
				button2.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						android.widget.Toast.makeText(currentActivity, "Opening the URL...", 0).show();
						var intentBrowser = new android.content.Intent(currentActivity);
						intentBrowser.setAction(android.content.Intent.ACTION_VIEW);
						intentBrowser.setData(android.net.Uri.parse("http://www.youtube.com/channel/UCJQL47nQnsijcaN_7pMsjCQ/videos"));
						currentActivity.startActivity(intentBrowser);
						popup.dismiss();
					}
				});
				layout.addView(button2);
				if(!isPro())
					Ui.setMarginsToViewInLinearLayout(button2, 0, MARGIN_HORIZONTAL_SMALL, 0, MARGIN_HORIZONTAL_SMALL);
				else
					Ui.setMarginsToViewInLinearLayout(button2, 0, MARGIN_HORIZONTAL_SMALL, 0, MARGIN_HORIZONTAL_BIG);

				if(!isPro())
				{
					var button3 = MinecraftButton();
					button3.setText("Get the Pro Key");
					button3.setOnClickListener(new android.view.View.OnClickListener()
					{
						onClick: function()
						{
							openProKeyOnPlayStore();
							popup.dismiss();
						}
					});
					layout.addView(button3);
					Ui.setMarginsToViewInLinearLayout(button3, 0, MARGIN_HORIZONTAL_SMALL, 0, MARGIN_HORIZONTAL_BIG);
				}

				var backButton = MinecraftButton();
				backButton.setText("Back");
				backButton.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						infoDesnoGunsMod();
						popup.dismiss();
					}
				});
				layout.addView(backButton);
				Ui.setMarginsToViewInLinearLayout(backButton, 0, MARGIN_HORIZONTAL_SMALL, 0, MARGIN_HORIZONTAL_SMALL);

				var exitButton = MinecraftButton();
				exitButton.setText("Close");
				exitButton.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						popup.dismiss();
					}
				});
				layout.addView(exitButton);
				Ui.setMarginsToViewInLinearLayout(exitButton, 0, MARGIN_HORIZONTAL_SMALL, 0, MARGIN_HORIZONTAL_SMALL);


				var popup = defaultPopup(layout);
				Popup.showImmersivePopup(popup);

			} catch(err)
			{
				clientMessage("Error: " + err);
				clientMessage("Maybe GUI is not supported for your device.");
			}
		}
	});
}

function easterEggUI()
{
	currentActivity.runOnUiThread(new java.lang.Runnable()
	{
		run: function()
		{
			try
			{
				var layout;
				layout = defaultLayout("I don't want to explode!");

				layout.addView(dividerText());

				var layoutH = new android.widget.LinearLayout(currentActivity);
				layoutH.setOrientation(android.widget.LinearLayout.HORIZONTAL);

				var inputText1 = new android.widget.EditText(currentActivity);
				inputText1.setHint("The code");
				if(codeEE == null || codeEE == undefined)
					inputText1.setEnabled(false);
				layoutH.addView(inputText1);

				var button1 = MinecraftButton();
				button1.setText("Ok");
				button1.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						if(codeEE != null && codeEE != undefined)
						{
							if(String(codeEE) == String(inputText1.getText()))
							{
								Level.setTime(1000);
								Level.setTime(10000);
								Level.setTime(1000);
								Level.setTile(xCoalEE, yCoalEE, zCoalEE, 0);
								Level.setTile(xCoalEE, yCoalEE - 1, zCoalEE, 0);

								popup.dismiss();
								easterEgg = true;
								unstuck = -1;
								pigmen = [];
								codeEE = null;

								BARRETT_EXPLOSIVE.buttonType = BUTTON_TYPE_ON_TOUCH;
								BARRETT_EXPLOSIVE.ammo = 500;
								BARRETT_EXPLOSIVE.recoil = 3;
								BARRETT_EXPLOSIVE.fireRate = 3;
								Item.setMaxDamage(BARRETT_EXPLOSIVE.id, 500);

								if(Player.getCarriedItem() == BARRETT_EXPLOSIVE.id)
									changeCarriedItemHook(BARRETT_EXPLOSIVE.id, BARRETT.id);

								currentActivity.runOnUiThread(new java.lang.Runnable(
								{
									run: function()
									{
										for(var ms = 0; ms < 60; ms++)
										{
											new android.os.Handler().postDelayed(new java.lang.Runnable(
											{
												run: function()
												{
													ModPE.showTipMessage("§" + currentColorEE.toString(16) + "Easter Egg enabled!");
													if(currentColorEE == 15)
														currentColorEE = 0;
													else
														currentColorEE++;
												}
											}), ms * 250 + 1);
										}
									}
								}));
							} else
							{
								currentActivity.runOnUiThread(new java.lang.Runnable()
								{
									run: function()
									{
										android.widget.Toast.makeText(currentActivity, new android.text.Html.fromHtml("Wrong code!"), android.widget.Toast.LENGTH_SHORT).show();
									}
								});
							}
						}
					}
				});
				if(codeEE == null || codeEE == undefined)
					button1.setEnabled(false);
				layoutH.addView(button1);

				layout.addView(layoutH);

				layout.addView(dividerText());

				var button2 = MinecraftButton();
				button2.setText("Start wave");
				button2.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						Level.setTime(10000);
						for(var i = 0; i <= 20; i++)
						{
							var playerDir = DesnoUtils.getVector(getYaw(), getPitch());

							pigmen.push(Level.spawnMob(getPlayerX() + (playerDir.x * 10), getPlayerY(), getPlayerZ() + (playerDir.z * 10), 36));

							// enable Sin0psysS's spawning pattern code (with some changes by me)
							unstuck = 20;
						}
						clientMessage("Barrett Explosive.");
						popup.dismiss();
					}
				});
				layout.addView(button2);

				layout.addView(dividerText());

				var exitButton = MinecraftButton();
				exitButton.setText("Close");
				exitButton.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						popup.dismiss();
					}
				});
				layout.addView(exitButton);


				var popup = defaultPopup(layout);
				Popup.showImmersivePopup(popup);

			} catch(err)
			{
				clientMessage("Error: " + err);
			}
		}
	});
}

// No Minecraft Layout because this UI can be showed at startup
function addonErrorUI(addonName, error)
{
	currentActivity.runOnUiThread(new java.lang.Runnable()
	{
		run: function()
		{
			try
			{
				var layout = new android.widget.LinearLayout(currentActivity);
				var padding = Convert.convertDpToPixels(8);
				layout.setPadding(padding, padding, padding, padding);
				layout.setOrientation(android.widget.LinearLayout.VERTICAL);

				var scroll = new android.widget.ScrollView(currentActivity);
				scroll.addView(layout);

				var popup = new android.app.Dialog(currentActivity);
				popup.setContentView(scroll);
				popup.setTitle(new android.text.Html.fromHtml("DesnoGuns addon error!"));
				popup.setCanceledOnTouchOutside(false);

				var text = new android.widget.TextView(currentActivity);
				text.setText(new android.text.Html.fromHtml("An error has been found in \"" + addonName + "\". The addon has been disabled.<br><br>" +
					error));
				layout.addView(text);

				layout.addView(dividerText());

				var exitButton = new android.widget.Button(currentActivity);
				exitButton.setText("Close");
				exitButton.setOnClickListener(new android.view.View.OnClickListener()
				{
					onClick: function()
					{
						popup.dismiss();
					}
				});
				layout.addView(exitButton);


				Popup.showImmersivePopup(popup);

			} catch(err)
			{
				print("Error: " + err);
			}
		}
	});
}

// No Minecraft Layout because this UI can be showed at startup
function errorWithModResources()
{
	if(!errorWithModResourcesShowed)
	{
		errorWithModResourcesShowed = true;

		currentActivity.runOnUiThread(new java.lang.Runnable()
		{
			run: function()
			{
				try
				{
					var layout = new android.widget.LinearLayout(currentActivity);
					var padding = Convert.convertDpToPixels(8);
					layout.setPadding(padding, padding, padding, padding);
					layout.setOrientation(android.widget.LinearLayout.VERTICAL);

					var scroll = new android.widget.ScrollView(currentActivity);
					scroll.addView(layout);

					var popup = new android.app.Dialog(currentActivity);
					popup.setContentView(scroll);
					popup.setTitle(new android.text.Html.fromHtml("Restart BlockLauncher"));
					popup.setCanceledOnTouchOutside(false);

					var text = new android.widget.TextView(currentActivity);
					text.setText(new android.text.Html.fromHtml("Resources for the DesnoGuns Mod aren't available now, please <b>restart BlockLauncher</b> to load them."));
					layout.addView(text);
					Ui.setMarginsToViewInLinearLayout(text, 0, MARGIN_HORIZONTAL_SMALL, 0, MARGIN_HORIZONTAL_BIG);


					var nowButton = new android.widget.Button(currentActivity);
					nowButton.setText("Restart now!");
					nowButton.setOnClickListener(new android.view.View.OnClickListener()
					{
						onClick: function()
						{
							DesnoUtils.killBlockLauncher();
							errorWithModResourcesShowed = false;
							popup.dismiss();
						}
					});
					layout.addView(nowButton);
					Ui.setMarginsToViewInLinearLayout(nowButton, 0, MARGIN_HORIZONTAL_SMALL, 0, MARGIN_HORIZONTAL_SMALL);

					var laterButton = new android.widget.Button(currentActivity);
					laterButton.setText("Restart later");
					laterButton.setOnClickListener(new android.view.View.OnClickListener()
					{
						onClick: function()
						{
							errorWithModResourcesShowed = false;
							popup.dismiss();
						}
					});
					layout.addView(laterButton);
					Ui.setMarginsToViewInLinearLayout(laterButton, 0, MARGIN_HORIZONTAL_SMALL, 0, MARGIN_HORIZONTAL_SMALL);


					Popup.showImmersivePopup(popup);

				} catch(err)
				{
					print("Error: " + err);
				}
			}
		});
	}
}

// No Minecraft Layout because this UI can be showed at startup
function errorWithAddonResources(customMessage)
{
	if(!errorWithAddonResourcesShowed)
	{
		errorWithAddonResourcesShowed = true;

		currentActivity.runOnUiThread(new java.lang.Runnable()
		{
			run: function()
			{
				try
				{
					var layout = new android.widget.LinearLayout(currentActivity);
					var padding = Convert.convertDpToPixels(8);
					layout.setPadding(padding, padding, padding, padding);
					layout.setOrientation(android.widget.LinearLayout.VERTICAL);

					var scroll = new android.widget.ScrollView(currentActivity);
					scroll.addView(layout);

					var popup = new android.app.Dialog(currentActivity);
					popup.setContentView(scroll);
					popup.setTitle(new android.text.Html.fromHtml("Addon resources not installed"));
					popup.setCanceledOnTouchOutside(false);

					var text = new android.widget.TextView(currentActivity);
					text.setText(new android.text.Html.fromHtml(customMessage));
					layout.addView(text);

					layout.addView(dividerText());

					var exitButton = new android.widget.Button(currentActivity);
					exitButton.setText("OK");
					exitButton.setOnClickListener(new android.view.View.OnClickListener()
					{
						onClick: function()
						{
							errorWithAddonResourcesShowed = false;
							popup.dismiss();
						}
					});
					layout.addView(exitButton);


					Popup.showImmersivePopup(popup);

				} catch(err)
				{
					print("Error: " + err);
				}
			}
		});
	}
}


//########################################################################################################################################################
// Renders
//########################################################################################################################################################

// grenade render by Anti, thanks!
function addGrenadeRenderType(renderer)
{
	var model = renderer.getModel();

	var head = model.getPart("head");
	var body = model.getPart("body");
	var rArm = model.getPart("rightArm");
	var lArm = model.getPart("leftArm");
	var rLeg = model.getPart("rightLeg");
	var lLeg = model.getPart("leftLeg");

	head.clear();

	body.clear();
	body.setTextureOffset(0, 0);
	body.addBox(-1, 20, -1.5, 2, 4, 3);
	body.setTextureOffset(8, 0);
	body.addBox(-0.5, 20.5, 1.5, 1, 1, 1);

	rArm.clear();

	lArm.clear();

	rLeg.clear();

	lLeg.clear();
}
var grenadeRenderType = Renderer.createHumanoidRenderer();
addGrenadeRenderType(grenadeRenderType);
const GRENADE_RENDER_COLLISION_SIZE_XZ = 1/16 * 4;
const GRENADE_RENDER_COLLISION_SIZE_Y = 1/16 * 4;

Entity.setGrenadeRender = function(entity)
{
	Entity.setRenderType(entity, grenadeRenderType.renderType);
	Entity.setCollisionSize(entity, GRENADE_RENDER_COLLISION_SIZE_XZ, GRENADE_RENDER_COLLISION_SIZE_Y);
}


//########################################################################################################################################################
// Sounds installation
//########################################################################################################################################################

var SoundsInstaller = {};

SoundsInstaller.sounds = {

	version: 7,

	soundArray: [
		// { fileName: "", file: "" },
		// { fileName: "", fileDirectory: "", file: "" },

		{
			fileName: "44Magnum.mp3"
		},
		{
			fileName: "AA-12Shoot.ogg"
		},
		{
			fileName: "AK47Shoot.ogg"
		},
		{
			fileName: "AK74Shoot.ogg"
		},
		{
			fileName: "AT4_and_M72LAW_and_Panzerfaust3Shoot.ogg"
		},
		{
			fileName: "BarrettShoot.ogg"
		},
		{
			fileName: "bell.mp3"
		},
		{
			fileName: "benboncan_parachute.mp3"
		},
		{
			fileName: "CrossbowShoot.wav"
		},
		{
			fileName: "DesertEagleShoot.ogg"
		},
		{
			fileName: "DragunovShoot.ogg"
		},
		{
			fileName: "EmptyGun.ogg"
		},
		{
			fileName: "explosion-countdown.wav"
		},
		{
			fileName: "fire-explosion.mp3"
		},
		{
			fileName: "flamethrower.mp3"
		},
		{
			fileName: "FNSCAR_and_AUG_and_MTARShoot.ogg"
		},
		{
			fileName: "G36Shoot.ogg"
		},
		{
			fileName: "GlockShoot.ogg"
		},
		{
			fileName: "GrenadeLauncherShoot.ogg"
		},
		{
			fileName: "ignite_flamethrower1.ogg"
		},
		{
			fileName: "ignite_flamethrower2.ogg"
		},
		{
			fileName: "ignite_flamethrower3.ogg"
		},
		{
			fileName: "knife_on_blocks.mp3"
		},
		{
			fileName: "knife_stab1.mp3"
		},
		{
			fileName: "knife_stab2.mp3"
		},
		{
			fileName: "L96Shoot.ogg"
		},
		{
			fileName: "LICENSE.txt"
		},
		{
			fileName: "M9Shoot.ogg"
		},
		{
			fileName: "M14_and_M16A4Shoot.ogg"
		},
		{
			fileName: "M21Shoot.ogg"
		},
		{
			fileName: "M249_and_L86Shoot.ogg"
		},
		{
			fileName: "M1014Shoot.ogg"
		},
		{
			fileName: "M1887Shoot.ogg"
		},
		{
			fileName: "MakarovShoot.ogg"
		},
		{
			fileName: "MinigunCooldown.ogg"
		},
		{
			fileName: "MinigunSpin.ogg"
		},
		{
			fileName: "MinigunWarmup.ogg"
		},
		{
			fileName: "MiniUziShoot.ogg"
		},
		{
			fileName: "MolotovExplosion.mp3"
		},
		{
			fileName: "MP5Shoot.ogg"
		},
		{
			fileName: "MSRShoot.mp3"
		},
		{
			fileName: "MultipleRocketLauncherShoot.mp3"
		},
		{
			fileName: "P90_and_Bizon_and_G3Shoot_and_Minigun.ogg"
		},
		{
			fileName: "R700_and_M40A3Shoot.ogg"
		},
		{
			fileName: "R870Shoot.ogg"
		},
		{
			fileName: "RayGunShoot.mp3"
		},
		{
			fileName: "BARReload.ogg",
			fileDirectory: "reload"
		},
		{
			fileName: "BazookaReload.mp3",
			fileDirectory: "reload"
		},
		{
			fileName: "BrenReload.ogg",
			fileDirectory: "reload"
		},
		{
			fileName: "BrowningReload.ogg",
			fileDirectory: "reload"
		},
		{
			fileName: "ColtReload.ogg",
			fileDirectory: "reload"
		},
		{
			fileName: "CrossbowReload.wav",
			fileDirectory: "reload"
		},
		{
			fileName: "DP28Reload.ogg",
			fileDirectory: "reload"
		},
		{
			fileName: "GL6Reload.ogg",
			fileDirectory: "reload"
		},
		{
			fileName: "GrenadeLauncherReload.ogg",
			fileDirectory: "reload"
		},
		{
			fileName: "Kar98kReload.ogg",
			fileDirectory: "reload"
		},
		{
			fileName: "LeeEnfieldReload.ogg",
			fileDirectory: "reload"
		},
		{
			fileName: "LugerReload.ogg",
			fileDirectory: "reload"
		},
		{
			fileName: "M1CarbineReload.ogg",
			fileDirectory: "reload"
		},
		{
			fileName: "M1014Reload.ogg",
			fileDirectory: "reload"
		},
		{
			fileName: "M1887Reload.ogg",
			fileDirectory: "reload"
		},
		{
			fileName: "MG42Reload.ogg",
			fileDirectory: "reload"
		},
		{
			fileName: "MP40Reload.ogg",
			fileDirectory: "reload"
		},
		{
			fileName: "MP44Reload.ogg",
			fileDirectory: "reload"
		},
		{
			fileName: "PPSHReload.ogg",
			fileDirectory: "reload"
		},
		{
			fileName: "RayGunReload.mp3",
			fileDirectory: "reload"
		},
		{
			fileName: "Reload1.ogg",
			fileDirectory: "reload"
		},
		{
			fileName: "SpringfieldReload.ogg",
			fileDirectory: "reload"
		},
		{
			fileName: "StenReload.ogg",
			fileDirectory: "reload"
		},
		{
			fileName: "ThompsonReload.ogg",
			fileDirectory: "reload"
		},
		{
			fileName: "TT33Reload.ogg",
			fileDirectory: "reload"
		},
		{
			fileName: "W1200Reload.ogg",
			fileDirectory: "reload"
		},
		{
			fileName: "riot_shield_attack.mp3"
		},
		{
			fileName: "RPD_and_M60E4_and_RPKShoot.ogg"
		},
		{
			fileName: "RPGShoot.ogg"
		},
		{
			fileName: "SG550Shoot.ogg"
		},
		{
			fileName: "SIGP226Shoot.ogg"
		},
		{
			fileName: "smoke-grenade.mp3"
		},
		{
			fileName: "SkorpionShoot.ogg"
		},
		{
			fileName: "USPShoot.ogg"
		},
		{
			fileName: "W1200_and_SPASShoot.ogg"
		}
	]
};

SoundsInstaller.versionFileName = "version.txt";
SoundsInstaller.pathInSdcard = sdcard + "/games/com.mojang/desnoguns-sounds/";
SoundsInstaller.pathInTexturePack = "/desnoguns-sounds/";


SoundsInstaller.checkAtStartup = function()
{
	Log.log("checkAtStartup(): started check.");

	if(SoundsInstaller.needsInstallation())
	{
		Log.log("checkAtStartup(): sounds NOT correctly installed!");

		SoundsInstaller.install();
	} else
	{
		Log.log("checkAtStartup(): sounds correctly installed.");
	}
}

SoundsInstaller.needsInstallation = function()
{
	if(File.doesFileExist(SoundsInstaller.pathInSdcard + SoundsInstaller.versionFileName))
	{
		var versionOfSounds = SoundsInstaller.getInstalledVersion();
		Log.log("needsInstallation(): version file found, version: " + versionOfSounds);

		// check version
		if(versionOfSounds == SoundsInstaller.sounds.version)
		{
			Log.log("needsInstallation(): version of the file matches saved version.");
			return !SoundsInstaller.areSoundsPresent();
		} else
		{
			Log.log("needsInstallation(): version of the file is different than saved version.");
			return true;
		}
	} else
	{
		Log.log("needsInstallation(): version file not found.");
		return true;
	}
}

SoundsInstaller.getInstalledVersion = function()
{
	var versionFile = new java.io.File(SoundsInstaller.pathInSdcard + SoundsInstaller.versionFileName);
	if(versionFile.exists())
	{
		var loadedVersion = "";
		var streamVersionInput = new java.io.FileInputStream(versionFile);
		var bufferedVersionReader = new java.io.BufferedReader(new java.io.InputStreamReader(streamVersionInput));
		var rowVersion = "";
		while((rowVersion = bufferedVersionReader.readLine()) != null)
		{
			loadedVersion += rowVersion;
		}
		var loadedVersion = loadedVersion.split(" ");
		bufferedVersionReader.close();

		Log.log("getInstalledVersion(): text on the version file: " + loadedVersion);
		return parseInt(loadedVersion);
	} else
	{
		print("Bug found: remember that getInstalledVersion() should be used only when version file exists.");
		return -1;
	}
}

SoundsInstaller.areSoundsPresent = function()
{
	var arrayOfMissingSounds = SoundsInstaller.checkMissingSounds();

	if(arrayOfMissingSounds.length == 0)
	{
		// yeah, all sounds needed have been found
		Log.log("areSoundsPresent(): all sounds present.");
		return true;
	} else
	{
		// not correctly installed :(
		Log.log("areSoundsPresent(): some sounds are missing.");
		Log.log("areSoundsPresent(): missing: " + arrayOfMissingSounds.toString());
		return false;
	}
}

SoundsInstaller.checkMissingSounds = function()
{
	var arrayOfErrors = [];
	for(var i in SoundsInstaller.sounds.soundArray)
	{
		if(SoundsInstaller.sounds.soundArray[i].fileDirectory == undefined || SoundsInstaller.sounds.soundArray[i].fileDirectory == null)
		{
			// file is inside the general sound folder
			if(!File.doesFileExist(SoundsInstaller.pathInSdcard + SoundsInstaller.sounds.soundArray[i].fileName))
			{
				if(arrayOfErrors.indexOf(SoundsInstaller.sounds.soundArray[i].fileName) == -1)
					arrayOfErrors.push(SoundsInstaller.sounds.soundArray[i].fileName);
			} else
			{
				// file exists, maybe is empty?
				if(File.isEmpty(SoundsInstaller.pathInSdcard + SoundsInstaller.sounds.soundArray[i].fileName))
				{
					if(arrayOfErrors.indexOf(SoundsInstaller.sounds.soundArray[i].fileName) == -1)
						arrayOfErrors.push(SoundsInstaller.sounds.soundArray[i].fileName);
				}
			}
		} else
		{
			// file is inside another folder
			if(!File.doesFileExist(SoundsInstaller.pathInSdcard + SoundsInstaller.sounds.soundArray[i].fileDirectory + "/" + SoundsInstaller.sounds.soundArray[i].fileName))
			{
				if(arrayOfErrors.indexOf(SoundsInstaller.sounds.soundArray[i].fileName) == -1)
					arrayOfErrors.push(SoundsInstaller.sounds.soundArray[i].fileName);
			} else
			{
				// file exists, maybe is empty?
				if(File.isEmpty(SoundsInstaller.pathInSdcard + SoundsInstaller.sounds.soundArray[i].fileDirectory + "/" + SoundsInstaller.sounds.soundArray[i].fileName))
				{
					if(arrayOfErrors.indexOf(SoundsInstaller.sounds.soundArray[i].fileName) == -1)
						arrayOfErrors.push(SoundsInstaller.sounds.soundArray[i].fileName);
				}
			}
		}
	}

	return arrayOfErrors;
}

SoundsInstaller.install = function()
{
	new java.lang.Thread(new java.lang.Runnable()
	{
		run: function()
		{
			File.delete(SoundsInstaller.pathInSdcard); //delete previous files if present

			for(var i in SoundsInstaller.sounds.soundArray)
			{
				// save file on the sdcard
				if(SoundsInstaller.sounds.soundArray[i].fileDirectory == undefined || SoundsInstaller.sounds.soundArray[i].fileDirectory == null)
				{
					// file is inside the general sound folder
					try
					{
						File.writeInputStreamToFile(ModPE.openInputStreamFromTexturePack(SoundsInstaller.pathInTexturePack + SoundsInstaller.sounds.soundArray[i].fileName), SoundsInstaller.pathInSdcard + SoundsInstaller.sounds.soundArray[i].fileName);
					} catch(e)
					{
						// probably texture pack not installed
						Log.log("error while writing sound to sdcard (1): " + e);
					}
				} else
				{
					// file is inside another folder
					try
					{
						File.writeInputStreamToFile(ModPE.openInputStreamFromTexturePack(SoundsInstaller.pathInTexturePack + SoundsInstaller.sounds.soundArray[i].fileDirectory + "/" + SoundsInstaller.sounds.soundArray[i].fileName), SoundsInstaller.pathInSdcard + SoundsInstaller.sounds.soundArray[i].fileDirectory + "/" + SoundsInstaller.sounds.soundArray[i].fileName);
					} catch(e)
					{
						// probably texture pack not installed
						Log.log("error while writing sound to sdcard (2): " + e);
					}
				}
			}

			var nomediaFile = new java.io.File(SoundsInstaller.pathInSdcard + ".nomedia");
			if(!nomediaFile.exists())
				nomediaFile.createNewFile();

			// put file version
			SoundsInstaller.saveFileWithVersion();

			// END INSTALLATION
			SoundsInstaller.onFinishInstallation();
		}
	}).start();
}

SoundsInstaller.saveFileWithVersion = function()
{
	var versionSaveFile = new java.io.File(SoundsInstaller.pathInSdcard + SoundsInstaller.versionFileName);
	if(versionSaveFile.exists())
		versionSaveFile.delete();
	versionSaveFile.createNewFile();

	var streamOutputVersion = new java.io.FileOutputStream(versionSaveFile);
	var streamWriterVersion = new java.io.OutputStreamWriter(streamOutputVersion);

	streamWriterVersion.append(SoundsInstaller.sounds.version + " Hi! Did you enjoy playing with the DesnoGuns Mod? I hope you did. -Desno365");
	streamWriterVersion.close();
	streamOutputVersion.close();
}

SoundsInstaller.onFinishInstallation = function()
{
	Log.log("Finished sounds installation. Re-checking sounds...");

	var notSuccess = SoundsInstaller.needsInstallation();
	if(notSuccess)
	{
		currentActivity.runOnUiThread(new java.lang.Runnable() {
			run: function() {
				android.widget.Toast.makeText(currentActivity, new android.text.Html.fromHtml("<b>Desnoguns Mod</b>: An error has happened during sounds installation of the DesnoGuns Mod, please check if the internal storage of your device is available."), android.widget.Toast.LENGTH_LONG).show();
			}
		});
		Log.log("Sounds HAVEN'T been correctly installed!");
	} else
	{
		Log.log("Sounds have been correctly installed. Very good.");
	}
}


//########################################################################################################################################################
// Things to do at startup, will be called at the end of the script
//########################################################################################################################################################

function startup()
{
	// custom variables for DesnoUtils Library (must be set immediately or the default tag will remain)
	DesnoUtils.MOD_NAME = "DesnoGuns";

	// add all items
	createAmmoItems();
	createGeneralItems();
	createGrenadesItems();
	createArmorItems();

	// check if is pro
	refreshIsPro();

	// add xmas guns if necessary
	setUpGunsWithDate();

	// add guns of the mod
	for(var i in defaultGuns)
		addNewGun(defaultGuns[i]);

	// check sounds
	SoundsInstaller.checkAtStartup();

	// create images from base64
	new java.lang.Thread(new java.lang.Runnable()
	{
		run: function()
		{
			try
			{
				createImages();
			} catch(e)
			{
				print("Error in thread at startup" + e);
				Log.log("Error in thread at startup: " + e)
			}
		}
	}).start();

	// load weapons from addons
	currentActivity.runOnUiThread(new java.lang.Runnable(
	{
		run: function()
		{
			new android.os.Handler().postDelayed(new java.lang.Runnable(
			{
				run: function()
				{
					// remove old sounds of addons
					File.delete(sdcard + "/games/com.mojang/desnoguns-temp/");

					// load the weapons saved in addons in the memory
					loadWeaponsFromAddons();

					new android.os.Handler().postDelayed(new java.lang.Runnable(
					{
						run: function()
						{
							// add loaded weapons to the game
							addLoadedAddonsInGame();
						}
					}), 250); // this time should be enough for the mod to load all the addons 
				}
			}), 750); // this time should be enough for BlockLuancher to load all the other scripts
		}
	}));
}


//########################################################################################################################################################
// DesnoUtils Library
//########################################################################################################################################################

// Library version: r002
// Made by Dennis Motta, also known as Desno365

/*
	This work is licensed under the Creative Commons Attribution- NonCommercial 4.0 International License. To view a copy
	of this license, visit http://creativecommons.org/licenses/by-nc/4.0/ or send a letter to Creative Commons, 444 Castro
	Street, Suite 900, Mountain View, California, 94041, USA.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	SOFTWARE.
*/

var DesnoUtils = {};

//########## CUSTOM VARIABLES ##########
DesnoUtils.MOD_NAME = "Test";
DesnoUtils.MAX_LOGARITHMIC_VOLUME = 50;
//########## CUSTOM VARIABLES -  END ##########


//########## GLOBAL VARIABLES ##########
DesnoUtils.currentActivity = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
DesnoUtils.sdcard = android.os.Environment.getExternalStorageDirectory();

DesnoUtils.sound1 = null;
DesnoUtils.sound2 = null;
DesnoUtils.sound3 = null;
DesnoUtils.soundId = null;
DesnoUtils.soundPool = null;
//########## GLOBAL VARIABLES -  END ##########


//########## DEBUG VARIABLES ##########
DesnoUtils.DEBUG_SOUNDS = false;
//########## DEBUG VARIABLES -  END ##########



//########## FILE functions ##########
var File = {};

File.delete = function(path)
{
	var file = new java.io.File(path);

	if(file.isDirectory())
	{
		var directoryFiles = file.listFiles();
		for(var i in directoryFiles)
		{
			File.delete(directoryFiles[i].getAbsolutePath());
		}
		file.delete();
	}

	if(file.isFile())
		file.delete();
}

File.doesFileExist = function(path)
{
	var file = new java.io.File(path);
	return file.exists();
}

File.isEmpty = function(path)
{
	var file = new java.io.File(path);
	if(file.length() > 0)
		return false;
	else
		return true;
}

File.writeByteArrayToFile = function(byteArray, path)
{
	// create file and parent directories
	var file = new java.io.File(path);
	if(file.exists())
		file.delete();
	file.getParentFile().mkdirs();
	file.createNewFile();

	// write to file
	var stream = new java.io.FileOutputStream(file);
	stream.write(byteArray);
	stream.close();

	byteArray = null;
}

File.writeInputStreamToFile = function(inputStream, path)
{
	// create file and parent directories
	var file = new java.io.File(path);
	if(file.exists())
		file.delete();
	file.getParentFile().mkdirs();
	file.createNewFile();

	// write to file
	var outputStream = new java.io.FileOutputStream(file);
	var read = 0;
	var bytes = java.lang.reflect.Array.newInstance(java.lang.Byte.TYPE, 1024);
	while ((read = inputStream.read(bytes)) != -1) {
		outputStream.write(bytes, 0, read);
	}
	outputStream.close();
}
//########## FILE functions - END ##########


//########## IMAGE functions ##########
var Image = {};

Image.decodeBitmapFromBase64 = function(base64String)
{
	if(typeof base64String == "string")
	{
		var byteArray = android.util.Base64.decode(base64String, 0);
		return android.graphics.BitmapFactory.decodeByteArray(byteArray, 0, byteArray.length);
	} else
	{
		throw Log.getLogPrefix() + "Image.decodeBitmapFromBase64 not a string.";
	}
}

Image.scaleBitmapToScreenDensity = function(image)
{
	//
	return Image.scaleBitmapToSize(image, Math.round(image.getWidth() * Screen.getDensity()), Math.round(image.getHeight() * Screen.getDensity()));
}

Image.scaleBitmapToSize = function(image, width, height, filter)
{
	if(filter == null)
		filter = false;
	return android.graphics.Bitmap.createScaledBitmap(image, Math.round(width), Math.round(height), filter);
}
//########## IMAGE functions - END ##########


//########## SOUND functions ##########
var Sound = {};

Sound.playFromPath = function(path, x, y, z, volumeMultiplier)
{
	var volume = 1.0;

	// change volume based on distance from source
	if(!(x == null || y == null || z == null))
	{
		var distance = Math.sqrt( Math.pow(x - Player.getX(), 2) + Math.pow(y - Player.getY(), 2) + Math.pow(z - Player.getZ(), 2) );
		if(distance > DesnoUtils.MAX_LOGARITHMIC_VOLUME)
			volume = 0.0;
		else
		{
			volume = 1 - (Math.log(distance) / Math.log(DesnoUtils.MAX_LOGARITHMIC_VOLUME));
		}
	}

	// apply general volume
	volume = volume * volumeMultiplier;

	// play sound
	try
	{
		if(DesnoUtils.sound1 == null)
		{
			if(DesnoUtils.DEBUG_SOUNDS)
				clientMessage("sound 1");

			if(DesnoUtils.sound1 == null)
				DesnoUtils.sound1 = new android.media.MediaPlayer();
			DesnoUtils.sound1.reset();
			DesnoUtils.sound1.setDataSource(path);
			DesnoUtils.sound1.setVolume(volume, volume);
			DesnoUtils.sound1.prepare();
			DesnoUtils.sound1.setOnCompletionListener(new android.media.MediaPlayer.OnCompletionListener()
			{
				onCompletion: function(mp)
				{
					if(DesnoUtils.DEBUG_SOUNDS)
						clientMessage("sound 1 finish");
					DesnoUtils.sound1.release();
					DesnoUtils.sound1 = null;
				}
			});
			DesnoUtils.sound1.start();
			return 1; // END
		}
		if(DesnoUtils.sound2 == null)
		{
			if(DesnoUtils.DEBUG_SOUNDS)
				clientMessage("sound 2");

			if(DesnoUtils.sound2 == null)
				DesnoUtils.sound2 = new android.media.MediaPlayer();
			DesnoUtils.sound2.reset();
			DesnoUtils.sound2.setDataSource(path);
			DesnoUtils.sound2.setVolume(volume, volume);
			DesnoUtils.sound2.prepare();
			DesnoUtils.sound2.setOnCompletionListener(new android.media.MediaPlayer.OnCompletionListener()
			{
				onCompletion: function(mp)
				{
					if(DesnoUtils.DEBUG_SOUNDS)
						clientMessage("sound 2 finish");
					DesnoUtils.sound2.release();
					DesnoUtils.sound2 = null;
				}
			});
			DesnoUtils.sound2.start();
			return 2; // END
		}
		if(DesnoUtils.sound3 == null)
		{
			if(DesnoUtils.DEBUG_SOUNDS)
				clientMessage("sound 3");

			if(DesnoUtils.sound3 == null)
				DesnoUtils.sound3 = new android.media.MediaPlayer();
			DesnoUtils.sound3.reset();
			DesnoUtils.sound3.setDataSource(path);
			DesnoUtils.sound3.setVolume(volume, volume);
			DesnoUtils.sound3.prepare();
			DesnoUtils.sound3.setOnCompletionListener(new android.media.MediaPlayer.OnCompletionListener()
			{
				onCompletion: function(mp)
				{
					if(DesnoUtils.DEBUG_SOUNDS)
						clientMessage("sound 3 finish");
					DesnoUtils.sound3.release();
					DesnoUtils.sound3 = null;
				}
			});
			DesnoUtils.sound3.start();
			return 3; // END
		} else
		{
			if(DesnoUtils.DEBUG_SOUNDS)
				clientMessage("sound 1 all");

			if(DesnoUtils.sound1 == null)
				DesnoUtils.sound1 = new android.media.MediaPlayer();
			DesnoUtils.sound1.reset();
			DesnoUtils.sound1.setDataSource(path);
			DesnoUtils.sound1.setVolume(volume, volume);
			DesnoUtils.sound1.prepare();
			DesnoUtils.sound1.setOnCompletionListener(new android.media.MediaPlayer.OnCompletionListener()
			{
				onCompletion: function(mp)
				{
					if(DesnoUtils.DEBUG_SOUNDS)
						clientMessage("sound 1 all finish");
					DesnoUtils.sound1.release();
					DesnoUtils.sound1 = null;
				}
			});
			DesnoUtils.sound1.start();
			return 1; // END
		}
	} catch(e)
	{
		ModPE.showTipMessage(Log.getLogPrefix() + "Sounds not installed!");
		Log.log("Error in playFromPath: " + e);
	}
}

Sound.loadSoundPoolFromPath = function(path)
{
	try
	{
		DesnoUtils.soundPool = new android.media.SoundPool(5, android.media.AudioManager.STREAM_MUSIC, 0);
		DesnoUtils.soundId = DesnoUtils.soundPool.load(path, 1);
	} catch(e)
	{
		ModPE.showTipMessage(Log.getLogPrefix() + "Sounds not installed!");
		Log.log("Error in loadSoundPoolFromPath: " + e);
	}
}

Sound.playLoadedSoundPool = function(volume, volumeMultiplier)
{
	if(volume == null)
		volume = 1.0;

	try
	{
		volume = volume * volumeMultiplier;
		DesnoUtils.soundPool.play(DesnoUtils.soundId, volume, volume, 1, 0, 1.0);
	} catch(e)
	{
		Log.log("Error in playLoadedSoundPool: " + e);
	}
}

Sound.stopAllSounds = function()
{
	Sound.stopSoundPool();

	try {
		DesnoUtils.sound1.reset();
		DesnoUtils.sound1 = null;
	} catch(e) { }
	try {
		DesnoUtils.sound2.reset();
		DesnoUtils.sound2 = null;
	} catch(e) { }
	try {
		DesnoUtils.sound3.reset();
		DesnoUtils.sound3 = null;
	} catch(e) { }
}

Sound.stopSoundPool = function()
{
	try
	{
		if(DesnoUtils.SoundPool != null)
			DesnoUtils.SoundPool.release();
		DesnoUtils.SoundPool = null;
		DesnoUtils.soundId = null;
	} catch(e)
	{
		Log.log("Error in stopSoundPool: " + e);
	}
}
//########## SOUND functions - END ##########


//########## ITEM functions ##########
Item.setVerticalRender = function(id)
{
	//
	Item.setHandEquipped(id, true);
}
//########## ITEM functions - END ##########


//########## PLAYER functions ##########
Player.damageCarriedItem = function()
{
	if(Player.getCarriedItemData() < Item.getMaxDamage(Player.getCarriedItem()))
	{
		Entity.setCarriedItem(Player.getEntity(), Player.getCarriedItem(), Player.getCarriedItemCount(), Player.getCarriedItemData() + 1);
	}
	else
	{
		Level.playSoundEnt(Player.getEntity(), "random.break", 100, 0);
		if(Player.getCarriedItemCount() == 1)
			Player.clearInventorySlot(Player.getSelectedSlotId());
		else
			Entity.setCarriedItem(Player.getEntity(), Player.getCarriedItem(), Player.getCarriedItemCount() - 1, 0);
	}
}

Player.decreaseByOneCarriedItem = function()
{
	if(Player.getCarriedItemCount() == 1)
		Player.clearInventorySlot(Player.getSelectedSlotId());
	else
		Entity.setCarriedItem(Player.getEntity(), Player.getCarriedItem(), Player.getCarriedItemCount() - 1, 0);
}

Player.getSlotOfItem = function(itemId, count)
{
	// return -1 if the item wasn't found or the count is less than the requested count, otherwise returns the inventory slot

	if(count == null || count <= 0)
		count = 1;

	for(var i = 0; i <= 255; i++)
	{
		if(Player.getInventorySlot(i) == itemId)
		{
			if(Player.getInventorySlotCount(i) >= count)
			{
				return i;
			}
		}
	}
	return -1;
}

Player.removeItemsFromInventory = function(slot, count)
{
	if(Player.getInventorySlotCount(slot) > count)
	{
		var id = Player.getInventorySlot(slot);
		var countBefore = Player.getInventorySlotCount(slot);

		Player.clearInventorySlot(slot);
		Player.addItemInventory(id, countBefore - count);
	} else
	{
		Player.clearInventorySlot(slot);
	}
}
//########## PLAYER functions - END ##########


//########## SCREEN functions ##########
var Screen = {};

Screen.getHeight = function()
{
	if(android.os.Build.VERSION.SDK_INT >= 17)
	{
		var uiFlags = DesnoUtils.currentActivity.getWindow().getDecorView().getSystemUiVisibility();
		if((uiFlags & android.view.View.SYSTEM_UI_FLAG_HIDE_NAVIGATION) != 0)
		{
			var metrics = new android.util.DisplayMetrics();
			DesnoUtils.currentActivity.getWindowManager().getDefaultDisplay().getRealMetrics(metrics);
			var realHeight = metrics.heightPixels;
			var realWidth = metrics.widthPixels;

			if(realHeight > realWidth) // fix auto-rotation disabled bug
			{
				var x = realHeight;
				realHeight = realWidth;
				realWidth = x;
			}

			return realHeight;
		} else
		{
			return Screen.getFullHeight();
		}
	} else
	{
		return Screen.getFullHeight();
	}
}

Screen.getWidth = function()
{
	if(android.os.Build.VERSION.SDK_INT >= 17)
	{
		var uiFlags = DesnoUtils.currentActivity.getWindow().getDecorView().getSystemUiVisibility();
		if((uiFlags & android.view.View.SYSTEM_UI_FLAG_HIDE_NAVIGATION) != 0)
		{
			var metrics = new android.util.DisplayMetrics();
			DesnoUtils.currentActivity.getWindowManager().getDefaultDisplay().getRealMetrics(metrics);
			var realHeight = metrics.heightPixels;
			var realWidth = metrics.widthPixels;

			if(realHeight > realWidth) // fix auto-rotation disabled bug
			{
				var x = realHeight;
				realHeight = realWidth;
				realWidth = x;
			}

			return realWidth;
		} else
		{
			return Screen.getFullWidth();
		}
	} else
	{
		return Screen.getFullWidth();
	}
}

Screen.getFullHeight = function()
{
	var metrics = new android.util.DisplayMetrics();
	DesnoUtils.currentActivity.getWindowManager().getDefaultDisplay().getMetrics(metrics);
	var displayHeight = metrics.heightPixels;
	var displayWidth = metrics.widthPixels;

	if(displayHeight > displayWidth) // fix auto-rotation disabled bug on some devices
	{
		var x = displayHeight;
		displayHeight = displayWidth;
		displayWidth = x;
	}

	return displayHeight;
}

Screen.getFullWidth = function()
{
	var metrics = new android.util.DisplayMetrics();
	DesnoUtils.currentActivity.getWindowManager().getDefaultDisplay().getMetrics(metrics);
	var displayHeight = metrics.heightPixels;
	var displayWidth = metrics.widthPixels;

	if(displayHeight > displayWidth) // fix auto-rotation disabled bug on some devices
	{
		var x = displayHeight;
		displayHeight = displayWidth;
		displayWidth = x;
	}

	return displayWidth;
}

Screen.getDensity = function()
{
	var metrics = new android.util.DisplayMetrics();
	DesnoUtils.currentActivity.getWindowManager().getDefaultDisplay().getMetrics(metrics);
	return metrics.density;
}
//########## SCREEN functions - END ##########


//########## CONVERSIONS functions ##########
var Convert = {};

Convert.stringToBoolean = function(string)
{
	if(typeof string != "string")
		string = String(string);

	switch(string.toLowerCase())
	{
		case "true":
		case "yes":
		case "1":
			return true;
		case "false":
		case "no":
		case "0":
		case null:
			return false;
		default:
			return Boolean(string);
	}
}

Convert.convertDpToPixels = function(dp)
{
	//
	return Math.round(dp * Screen.getDensity());
}
//########## CONVERSIONS functions - END ##########


//########## LOG functions ##########
var Log = {};

Log.log = function(err)
{
	//
	ModPE.log(Log.getLogPrefix() + err);
}

Log.getLogPrefix = function()
{
	//
	return DesnoUtils.MOD_NAME + ": ";
}
//########## LOG functions - END ##########


//########## MISC functions ##########
DesnoUtils.getVector = function(yaw, pitch)
{
	var vector = { x: 0, y: 0, z: 0 };
	vector.y = -Math.sin(java.lang.Math.toRadians(pitch));
	vector.x = -Math.sin(java.lang.Math.toRadians(yaw)) * Math.cos(java.lang.Math.toRadians(pitch));
	vector.z = Math.cos(java.lang.Math.toRadians(yaw)) * Math.cos(java.lang.Math.toRadians(pitch));
	return vector;
}

DesnoUtils.killBlockLauncher = function()
{
	DesnoUtils.currentActivity.finish();
	java.lang.System.exit(0);
}
//########## MISC functions - END ##########


//########## POPUP functions ##########
var Popup = {};

Popup.showImmersivePopup = function(popup)
{
	//Set the dialog to not focusable (makes navigation ignore us adding the window)
	// http://stackoverflow.com/questions/22794049/how-to-maintain-the-immersive-mode-in-dialogs
	popup.getWindow().setFlags(android.view.WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE, android.view.WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE);

	//Show the dialog!
	popup.show();

	//Set the dialog to immersive
	popup.getWindow().getDecorView().setSystemUiVisibility(DesnoUtils.currentActivity.getWindow().getDecorView().getSystemUiVisibility());

	//Clear the not focusable flag from the window
	popup.getWindow().clearFlags(android.view.WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE);
}
//########## POPUP functions - END ##########


//########## UI functions ##########
var Ui = {};

Ui.setMarginsToViewInLinearLayout = function(view, left, top, right, bottom)
{
	var originalParams = view.getLayoutParams();
	var newParams = new android.widget.LinearLayout.LayoutParams(originalParams);
	newParams.setMargins(Convert.convertDpToPixels(left), Convert.convertDpToPixels(top), Convert.convertDpToPixels(right), Convert.convertDpToPixels(bottom));
	view.setLayoutParams(newParams);
}
//########## UI functions - END ##########


//########################################################################################################################################################
// Minecraft Button Library
//########################################################################################################################################################

// Library version: 1.2.5
// Made by Dennis Motta, also known as Desno365
// https://github.com/Desno365/Minecraft-Button-Library

/*
	The MIT License (MIT)

	Copyright (c) 2015 Dennis Motta 

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	SOFTWARE.
*/

var MinecraftButtonLibrary = {};

// Customization
// These are the default values of the library, you can change them to make the buttons look how you want to.
MinecraftButtonLibrary.defaultButtonPadding = 8;
MinecraftButtonLibrary.defaultButtonTextSize = 16;
MinecraftButtonLibrary.defaultButtonTextLineSpacing = 4;
MinecraftButtonLibrary.defaultButtonTextColor = "#FFDDDDDD";
MinecraftButtonLibrary.defaultButtonTextPressedColor = "#FFFBFF97";
MinecraftButtonLibrary.defaultButtonTextShadowColor = "#FF292929";

// Variables
MinecraftButtonLibrary.Resources = {};
MinecraftButtonLibrary.ProcessedResources = {};

MinecraftButtonLibrary.context = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
MinecraftButtonLibrary.metrics = new android.util.DisplayMetrics();
MinecraftButtonLibrary.context.getWindowManager().getDefaultDisplay().getMetrics(MinecraftButtonLibrary.metrics);
MinecraftButtonLibrary.sdcard = new android.os.Environment.getExternalStorageDirectory();
MinecraftButtonLibrary.LOG_TAG = "Minecraft Button Library ";

MinecraftButtonLibrary.ProcessedResources.font = null;
MinecraftButtonLibrary.ProcessedResources.mcNormalNineDrawable = null;
MinecraftButtonLibrary.ProcessedResources.mcPressedNineDrawable = null;

//########################################################################################################################################################
// LIBRARY
//########################################################################################################################################################

// MinecraftButton(int textSize, bool enableSound, string customTextColor)
// set an argument null if you want to use the default value
function MinecraftButton(textSize, enableSound, customTextColor)
{
	if(textSize == null)
		textSize = MinecraftButtonLibrary.defaultButtonTextSize;
	if(enableSound == null)
		enableSound = true;
	if(customTextColor == null)
		customTextColor = MinecraftButtonLibrary.defaultButtonTextColor;

	var button = new android.widget.Button(MinecraftButtonLibrary.context);
	button.setTextSize(textSize);
	button.setOnTouchListener(new android.view.View.OnTouchListener()
	{
		onTouch: function(v, motionEvent)
		{
			MinecraftButtonLibrary.onTouch(v, motionEvent, enableSound, customTextColor);
			return false;
		}
	});
	if (android.os.Build.VERSION.SDK_INT >= 14)
		button.setAllCaps(false);
	MinecraftButtonLibrary.setButtonBackground(button, MinecraftButtonLibrary.ProcessedResources.mcNormalNineDrawable);
	button.setTag(false); // is pressed?
	button.setSoundEffectsEnabled(false);
	button.setGravity(android.view.Gravity.CENTER);
	button.setTextColor(android.graphics.Color.parseColor(customTextColor));
	button.setPadding(MinecraftButtonLibrary.convertDpToPixel(MinecraftButtonLibrary.defaultButtonPadding), MinecraftButtonLibrary.convertDpToPixel(MinecraftButtonLibrary.defaultButtonPadding), MinecraftButtonLibrary.convertDpToPixel(MinecraftButtonLibrary.defaultButtonPadding), MinecraftButtonLibrary.convertDpToPixel(MinecraftButtonLibrary.defaultButtonPadding));
	MinecraftButtonLibrary.addMinecraftStyleToTextView(button);

	return button;
}

// ######### BUTTON UTILS functions #########
MinecraftButtonLibrary.addMinecraftStyleToTextView = function(textview)
{
	// works also for subclasses of TextView
	// you must set the text size before calling this function!

	textview.setTypeface(MinecraftButtonLibrary.ProcessedResources.font);
	textview.setPaintFlags(textview.getPaintFlags() | android.graphics.Paint.SUBPIXEL_TEXT_FLAG);
	textview.setLineSpacing(MinecraftButtonLibrary.convertDpToPixel(MinecraftButtonLibrary.defaultButtonTextLineSpacing), 1);
	if (android.os.Build.VERSION.SDK_INT >= 19) // KitKat
		textview.setShadowLayer(1, Math.round((textview.getLineHeight() - MinecraftButtonLibrary.convertDpToPixel(MinecraftButtonLibrary.defaultButtonTextLineSpacing)) / 8), Math.round((textview.getLineHeight() - MinecraftButtonLibrary.convertDpToPixel(MinecraftButtonLibrary.defaultButtonTextLineSpacing)) / 8), android.graphics.Color.parseColor(MinecraftButtonLibrary.defaultButtonTextShadowColor));
	else
		textview.setShadowLayer(0.0001, Math.round((textview.getLineHeight() - MinecraftButtonLibrary.convertDpToPixel(MinecraftButtonLibrary.defaultButtonTextLineSpacing)) / 8), Math.round((textview.getLineHeight() - MinecraftButtonLibrary.convertDpToPixel(MinecraftButtonLibrary.defaultButtonTextLineSpacing)) / 8), android.graphics.Color.parseColor(MinecraftButtonLibrary.defaultButtonTextShadowColor));

}

MinecraftButtonLibrary.setButtonBackground = function(button, background)
{
	if (android.os.Build.VERSION.SDK_INT >= 16)
		button.setBackground(background);
	else
		button.setBackgroundDrawable(background);
}

MinecraftButtonLibrary.convertDpToPixel = function(dp)
{
	var density = MinecraftButtonLibrary.metrics.density;

	return (dp * density);
}

MinecraftButtonLibrary.onTouch = function(v, motionEvent, enableSound, customTextColor)
{
	if(enableSound == null)
		enableSound = true;
	if(customTextColor == null)
		customTextColor = MinecraftButtonLibrary.defaultButtonTextColor;
	
	var action = motionEvent.getActionMasked();
	if(action == android.view.MotionEvent.ACTION_DOWN)
	{
		// button pressed
		MinecraftButtonLibrary.changeToPressedState(v);
	}
	if(action == android.view.MotionEvent.ACTION_CANCEL || action == android.view.MotionEvent.ACTION_UP)
	{
		// button released
		MinecraftButtonLibrary.changeToNormalState(v, customTextColor);
		
		var rect = new android.graphics.Rect(v.getLeft(), v.getTop(), v.getRight(), v.getBottom());
		if(rect.contains(v.getLeft() + motionEvent.getX(), v.getTop() + motionEvent.getY())) // detect if the event happens inside the view
		{
			// onClick will run soon

			// play sound
			if(enableSound)
				Level.playSoundEnt(Player.getEntity(), "random.click", 100, 0);
		}
	}
	if(action == android.view.MotionEvent.ACTION_MOVE)
	{
		var rect = new android.graphics.Rect(v.getLeft(), v.getTop(), v.getRight(), v.getBottom());
		if(rect.contains(v.getLeft() + motionEvent.getX(), v.getTop() + motionEvent.getY())) // detect if the event happens inside the view
		{
			// pointer inside the view
			if(v.getTag() == false)
			{
				// restore pressed state
				v.setTag(true); // is pressed?

				MinecraftButtonLibrary.changeToPressedState(v);
			}
		} else
		{
			// pointer outside the view
			if(v.getTag() == true)
			{
				// restore pressed state
				v.setTag(false); // is pressed?

				MinecraftButtonLibrary.changeToNormalState(v, customTextColor);
			}
		}
	}
}

MinecraftButtonLibrary.changeToNormalState = function(button, customTextColor)
{
	MinecraftButtonLibrary.setButtonBackground(button, MinecraftButtonLibrary.ProcessedResources.mcNormalNineDrawable);
	button.setTextColor(android.graphics.Color.parseColor(customTextColor));
	// reset pressed padding
	button.setPadding(MinecraftButtonLibrary.convertDpToPixel(MinecraftButtonLibrary.defaultButtonPadding), MinecraftButtonLibrary.convertDpToPixel(MinecraftButtonLibrary.defaultButtonPadding), MinecraftButtonLibrary.convertDpToPixel(MinecraftButtonLibrary.defaultButtonPadding), MinecraftButtonLibrary.convertDpToPixel(MinecraftButtonLibrary.defaultButtonPadding));
}

MinecraftButtonLibrary.changeToPressedState = function(button)
{
	MinecraftButtonLibrary.setButtonBackground(button, MinecraftButtonLibrary.ProcessedResources.mcPressedNineDrawable);
	button.setTextColor(android.graphics.Color.parseColor(MinecraftButtonLibrary.defaultButtonTextPressedColor));
	// make the effect of a pressed button with padding
	button.setPadding(MinecraftButtonLibrary.convertDpToPixel(MinecraftButtonLibrary.defaultButtonPadding), MinecraftButtonLibrary.convertDpToPixel(MinecraftButtonLibrary.defaultButtonPadding) + MinecraftButtonLibrary.convertDpToPixel(2), MinecraftButtonLibrary.convertDpToPixel(MinecraftButtonLibrary.defaultButtonPadding), MinecraftButtonLibrary.convertDpToPixel(MinecraftButtonLibrary.defaultButtonPadding) - MinecraftButtonLibrary.convertDpToPixel(2));
}
// ######### END - BUTTON UTILS functions #########


// ######### CREATE NINE PATCH functions #########
MinecraftButtonLibrary.createNinePatchDrawables = function()
{
	var mcButtonNormalBitmap = MinecraftButtonLibrary.getMinecraftButtonBitmap();
	var mcButtonPressedBitmap = MinecraftButtonLibrary.getMinecraftButtonPressedBitmap();

	var mcNormalNinePatch = new android.graphics.NinePatch(mcButtonNormalBitmap, mcButtonNormalBitmap.getNinePatchChunk(), null);
	var mcPressedNinePatch = new android.graphics.NinePatch(mcButtonPressedBitmap, mcButtonPressedBitmap.getNinePatchChunk(), null);

	// here is used a deprecated method that doesn't deals with density
	//noinspection deprecation
	MinecraftButtonLibrary.ProcessedResources.mcNormalNineDrawable = new android.graphics.drawable.NinePatchDrawable(mcNormalNinePatch);
	MinecraftButtonLibrary.ProcessedResources.mcNormalNineDrawable.setFilterBitmap(false);
	//noinspection deprecation
	MinecraftButtonLibrary.ProcessedResources.mcPressedNineDrawable = new android.graphics.drawable.NinePatchDrawable(mcPressedNinePatch);
	MinecraftButtonLibrary.ProcessedResources.mcPressedNineDrawable.setFilterBitmap(false);
}

MinecraftButtonLibrary.getMinecraftButtonBitmap = function()
{
	var density = MinecraftButtonLibrary.metrics.density;

	if(density < 1)
	{
		ModPE.log(MinecraftButtonLibrary.LOG_TAG + "Density: " + density + ", ldpi");
		return MinecraftButtonLibrary.decodeImageFromBase64(MinecraftButtonLibrary.Resources.minecraftButtonStateNormalLDPI);
	}
	if(density >= 1 && density < 1.5)
	{
		ModPE.log(MinecraftButtonLibrary.LOG_TAG + "Density: " + density + ", mdpi");
		return MinecraftButtonLibrary.decodeImageFromBase64(MinecraftButtonLibrary.Resources.minecraftButtonStateNormalMDPI);
	}
	if(density >= 1.5 && density < 2)
	{
		ModPE.log(MinecraftButtonLibrary.LOG_TAG + "Density: " + density + ", hdpi");
		return MinecraftButtonLibrary.decodeImageFromBase64(MinecraftButtonLibrary.Resources.minecraftButtonStateNormalHDPI);
	}
	if(density >= 2 && density < 2.5)
	{
		ModPE.log(MinecraftButtonLibrary.LOG_TAG + "Density: " + density + ", xhdpi");
		return MinecraftButtonLibrary.decodeImageFromBase64(MinecraftButtonLibrary.Resources.minecraftButtonStateNormalXHDPI);
	}
	if(density >= 2.5)
	{
		ModPE.log(MinecraftButtonLibrary.LOG_TAG + "Density: " + density + ", xxhdpi");
		return MinecraftButtonLibrary.decodeImageFromBase64(MinecraftButtonLibrary.Resources.minecraftButtonStateNormalXXHDPI);
	}

	ModPE.log(MinecraftButtonLibrary.LOG_TAG + "Error: " + density + ", xhdpi");
	return MinecraftButtonLibrary.decodeImageFromBase64(MinecraftButtonLibrary.Resources.minecraftButtonStateNormalXHDPI);
}

MinecraftButtonLibrary.getMinecraftButtonPressedBitmap = function()
{
	var density = MinecraftButtonLibrary.metrics.density;

	if(density < 1)
	{
		ModPE.log(MinecraftButtonLibrary.LOG_TAG + "Density: " + density + ", ldpi");
		return MinecraftButtonLibrary.decodeImageFromBase64(MinecraftButtonLibrary.Resources.minecraftButtonStatePressedLDPI);
	}
	if(density >= 1 && density < 1.5)
	{
		ModPE.log(MinecraftButtonLibrary.LOG_TAG + "Density: " + density + ", mdpi");
		return MinecraftButtonLibrary.decodeImageFromBase64(MinecraftButtonLibrary.Resources.minecraftButtonStatePressedMDPI);
	}
	if(density >= 1.5 && density < 2)
	{
		ModPE.log(MinecraftButtonLibrary.LOG_TAG + "Density: " + density + ", hdpi");
		return MinecraftButtonLibrary.decodeImageFromBase64(MinecraftButtonLibrary.Resources.minecraftButtonStatePressedHDPI);
	}
	if(density >= 2 && density < 2.5)
	{
		ModPE.log(MinecraftButtonLibrary.LOG_TAG + "Density: " + density + ", xhdpi");
		return MinecraftButtonLibrary.decodeImageFromBase64(MinecraftButtonLibrary.Resources.minecraftButtonStatePressedXHDPI);
	}
	if(density >= 2.5)
	{
		ModPE.log(MinecraftButtonLibrary.LOG_TAG + "Density: " + density + ", xxhdpi");
		return MinecraftButtonLibrary.decodeImageFromBase64(MinecraftButtonLibrary.Resources.minecraftButtonStatePressedXXHDPI);
	}

	ModPE.log(MinecraftButtonLibrary.LOG_TAG + "Error: " + density + ", xhdpi");
	return MinecraftButtonLibrary.decodeImageFromBase64(MinecraftButtonLibrary.Resources.minecraftButtonStatePressedXHDPI);
}

MinecraftButtonLibrary.decodeImageFromBase64 = function(base64String)
{
	var byteArray = android.util.Base64.decode(base64String, 0);
	return android.graphics.BitmapFactory.decodeByteArray(byteArray, 0, byteArray.length);
}
// ######### END - CREATE NINE PATCH functions #########


// ######### CREATE TYPEFACE functions #########
MinecraftButtonLibrary.createTypeface = function()
{
	MinecraftButtonLibrary.writeFileFromByteArray(android.util.Base64.decode(MinecraftButtonLibrary.Resources.base64Font, 0), MinecraftButtonLibrary.sdcard + "/minecraft.ttf");
	MinecraftButtonLibrary.ProcessedResources.font = android.graphics.Typeface.createFromFile(MinecraftButtonLibrary.sdcard + "/minecraft.ttf");
	MinecraftButtonLibrary.deleteFile(MinecraftButtonLibrary.sdcard + "/minecraft.ttf");
}

MinecraftButtonLibrary.writeFileFromByteArray = function(byteArray, path)
{
	var file = new java.io.File(path);
	if(file.exists())
		file.delete();
	file.createNewFile();
	var stream = new java.io.FileOutputStream(file);
	stream.write(byteArray);
	stream.close();
	byteArray = null;
}
// ######### END - CREATE TYPEFACE functions #########


// ######### UTILS functions #########
MinecraftButtonLibrary.removeResources = function()
{
	MinecraftButtonLibrary.Resources.minecraftButtonStateNormalLDPI = null;
	MinecraftButtonLibrary.Resources.minecraftButtonStateNormalMDPI = null;
	MinecraftButtonLibrary.Resources.minecraftButtonStateNormalHDPI = null;
	MinecraftButtonLibrary.Resources.minecraftButtonStateNormalXHDPI = null;
	MinecraftButtonLibrary.Resources.minecraftButtonStateNormalXXHDPI = null;
	MinecraftButtonLibrary.Resources.minecraftButtonStatePressedLDPI = null;
	MinecraftButtonLibrary.Resources.minecraftButtonStatePressedMDPI = null;
	MinecraftButtonLibrary.Resources.minecraftButtonStatePressedHDPI = null;
	MinecraftButtonLibrary.Resources.minecraftButtonStatePressedXHDPI = null;
	MinecraftButtonLibrary.Resources.minecraftButtonStatePressedXXHDPI = null;

	MinecraftButtonLibrary.Resources.base64Font = null;
}

MinecraftButtonLibrary.deleteFile = function(path)
{
	var file = new java.io.File(path);

	if(file.isDirectory())
	{
		var directoryFiles = file.listFiles();
		for(var i in directoryFiles)
		{
			deleteFile(directoryFiles[i].getAbsolutePath());
		}
		file.delete();
	}

	if(file.isFile())
		file.delete();
}
// ######### END - UTILS functions #########


//########################################################################################################################################################
// RESOURCES IN BASE64
//########################################################################################################################################################

// backgrounds
MinecraftButtonLibrary.Resources.minecraftButtonStateNormalLDPI = "iVBORw0KGgoAAAANSUhEUgAAAAgAAAAICAYAAADED76LAAAAGG5wT2wAAAAAAAAAAAAAAAAAAAAAAAAAAP8AAADYHRhkAAAAVG5wVGMAAgIJIAAAACgAAAAAAAACAAAAAgAAAAMAAAACMAAAAAAAAAEAAAAHAAAAAgAAAAf/vLGr/7yxqwAAAAH/vLGr/5WGgQAAAAH/cmVnAAAAAf8oJyoMgs1WAAAASUlEQVQY02Pcs3H1fwY8gAmf5NYtexhYGBgYGG5evYZVwfZDh/GbwPD/PwEFjIwEFBByJAPDfwaWbVv2MGw7eIiBgRFuLrIdDADq5BFxvezsVAAAAABJRU5ErkJggg==";
MinecraftButtonLibrary.Resources.minecraftButtonStateNormalMDPI = "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAGG5wT2wAAAAAAAAAAAAAAAAAAAAAAAAAAP8AAADYHRhkAAAAVG5wVGMAAgIJIAAAACgAAAAAAAAEAAAABAAAAAYAAAAEMAAAAAAAAAIAAAAOAAAABAAAAA7/vLGr/7yxqwAAAAH/vLGr/5WGgQAAAAH/cmVnAAAAAf8oJyqdu2NqAAAAT0lEQVQ4y2Pcs3H1fwYKABMDhYCFXI1bt+yhsgtuXr1Gksbthw4PcBgw/P8/0C5gZKSOCwbeAPLDgIFasbANmqa3HTwEDV2M4MYVDdRxAQBscxGJWBLxyQAAAABJRU5ErkJggg==";
MinecraftButtonLibrary.Resources.minecraftButtonStateNormalHDPI = "iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAAGG5wT2wAAAAAAAAAAAAAAAAAAAAAAAAAAP8AAADYHRhkAAAAVG5wVGMAAgIJIAAAACgAAAAAAAAGAAAABgAAAAkAAAAGMAAAAAAAAAMAAAAVAAAABgAAABX/vLGr/7yxqwAAAAH/vLGr/5WGgQAAAAH/cmVnAAAAAf8oJyqPt1DfAAAAV0lEQVRIx2Pcs3H1fwYaAiYGGgOaW8BCC0O3btkzXIPo5tVrVDF0+6HDo6mIAPj/fzSICABGxmEURKMWDFAqYhhWGW0bUu2z7eAhpMyCMxcRk9OGURABAH/ZEZn4HdB3AAAAAElFTkSuQmCC";
MinecraftButtonLibrary.Resources.minecraftButtonStateNormalXHDPI = "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAGG5wT2wAAAAAAAAAAAAAAAAAAAAAAAAAAP8AAADYHRhkAAAAVG5wVGMAAgIJIAAAACgAAAAAAAAIAAAACAAAAAwAAAAIMAAAAAAAAAQAAAAcAAAACAAAABz/vLGr/7yxqwAAAAH/vLGr/5WGgQAAAAH/cmVnAAAAAf8oJypkuTlTAAAAZUlEQVRYw2Pcs3H1f4YBBEwMAwxGHcBCbwu3btkzGgWDPA3cvHqNphZuP3R4NApGeDnA8P//aBSM9DTAyDgaBaMOGHXASC8HGEbrgsGWBrahtdO3HTyEVnYTLNxJrQxGo2BwOQAAWckRqcYME3kAAAAASUVORK5CYII=";
MinecraftButtonLibrary.Resources.minecraftButtonStateNormalXXHDPI = "iVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAYAAABXAvmHAAAAGG5wT2wAAAAAAAAAAAAAAAAAAAAAAAAAAP8AAADYHRhkAAAAVG5wVGMAAgIJIAAAACgAAAAAAAAMAAAADAAAABIAAAAMMAAAAAAAAAYAAAAqAAAADAAAACr/vLGr/7yxqwAAAAH/vLGr/5WGgQAAAAH/cmVnAAAAAf8oJypAoV45AAAAg0lEQVRo3u3ZwQmAMAyF4UTcfxFPgtZLL9YZFJwmTtCDINQ0/5sgHzxCQzXPk4njDOI8AABEB4xeBl2XTIUAAAi1he7z+tWgWzmoEAAAvIVaxowKAQDAFmoZVSoEAAAAAAAAAIj7FhIuMgAA+txCqfL3lPZSuYxen1JfnWRUCACAHgEPIUcRyZ0dVsEAAAAASUVORK5CYII=";
MinecraftButtonLibrary.Resources.minecraftButtonStatePressedLDPI = "iVBORw0KGgoAAAANSUhEUgAAAAgAAAAICAYAAADED76LAAAAGG5wT2wAAAAAAAAAAAAAAAAAAAAAAAAAAP8AAADYHRhkAAAAVG5wVGMAAgIJIAAAACgAAAAAAAACAAAAAgAAAAIAAAADMAAAAAAAAAEAAAAHAAAAAQAAAAb/KCcqAAAAAf9yZWcAAAABAAAAAQAAAAEAAAABAAAAAQAAAAGZYAV4AAAAb0lEQVQY012OQQqDMBRE34Scwp1QsHgHs7CbGnv9UjzNuIjRxuHD/wzzhq/nMBrKIIENAhA5TUQwS0pUiZIFeK8zEVSAQy5Vpxdq3k3HdYbLq2xTRwBht2T9QxJxSRP588I2d9kmPvqO7ftryb+9AxX7IG5YZYu3AAAAAElFTkSuQmCC";
MinecraftButtonLibrary.Resources.minecraftButtonStatePressedMDPI = "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAGG5wT2wAAAAAAAAAAAAAAAAAAAAAAAAAAP8AAADYHRhkAAAAVG5wVGMAAgIJIAAAACgAAAAAAAAEAAAABAAAAAQAAAAGMAAAAAAAAAIAAAAOAAAAAgAAAAz/KCcqAAAAAf9yZWcAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEDO+tuAAAAkklEQVQ4y62SwQrCMAyGvwyfwpswcOwd7EEvbu71Zfg08ZIgi10ZtLm0CSn5/r+R4ToqAGwPRCy3gqV+mdMNgI7KOPnIKaVsgw/WUH++7s0IZCsxhP5Myfa184CgVf5cyJvTgiDarUYixV/wQrtfUC1rjiRim1pPMNlOz8vDSPTQQ++rJ+gvZwA+77WseSevJvgCGagihHTV1j0AAAAASUVORK5CYII=";
MinecraftButtonLibrary.Resources.minecraftButtonStatePressedHDPI = "iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAAGG5wT2wAAAAAAAAAAAAAAAAAAAAAAAAAAP8AAADYHRhkAAAAVG5wVGMAAgIJIAAAACgAAAAAAAAGAAAABgAAAAYAAAAJMAAAAAAAAAMAAAAVAAAAAwAAABL/KCcqAAAAAf9yZWcAAAABAAAAAQAAAAEAAAABAAAAAQAAAAGqizz1AAAAl0lEQVRIx92VwQqAIAyGXfQU3YKg6B3yUJe0Xj+ip1k3+QOHGXhoO+l0Ch/flIZ+ZBMiPjREkIcFSOPE2ymMK1M4il9QIwtnbbIAqbCwZ91mXYgoLoUQ/NQrWavMIiMYQqJHadVUIJK6iAEXZTUaLihrNOY8WyRcBM+7AkQOfh+/L4CLPx+KtQoQdW0TJtdx5tnyIv9/RDcytSKUL7bTXAAAAABJRU5ErkJggg==";
MinecraftButtonLibrary.Resources.minecraftButtonStatePressedXHDPI = "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAGG5wT2wAAAAAAAAAAAAAAAAAAAAAAAAAAP8AAADYHRhkAAAAVG5wVGMAAgIJIAAAACgAAAAAAAAIAAAACAAAAAgAAAAMMAAAAAAAAAQAAAAcAAAABAAAABj/KCcqAAAAAf9yZWcAAAABAAAAAQAAAAEAAAABAAAAAQAAAAHs/TEDAAAAqUlEQVRYw+2WwQqAIAyGXfQU3YKg6B3yUJe0Xj+ip1ln/8AhBnrYbroxhe/frzSNM5sg4ktDBHkogDRueLsE68YUDr1Ai5CdtUkNEDkL9fuxKoLqNEDxMRaCv0aR1E8R1OcDRphrEp0gzTgUQQ0akMydQROU9RZggSKo7y1gzptzSRMEf0pFUF4DDv7p/txAE/zrgdhPEZTXwNB3wcZz3XlznphXBMUv8AJ9bSKkEsE9twAAAABJRU5ErkJggg==";
MinecraftButtonLibrary.Resources.minecraftButtonStatePressedXXHDPI = "iVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAYAAABXAvmHAAAAGG5wT2wAAAAAAAAAAAAAAAAAAAAAAAAAAP8AAADYHRhkAAAAVG5wVGMAAgIJIAAAACgAAAAAAAALAAAACwAAAAsAAAARMAAAAAAAAAYAAAAqAAAABgAAACT/KCcqAAAAAf9yZWcAAAABAAAAAQAAAAEAAAABAAAAAQAAAAGV/cSjAAAAzElEQVRo3u2ZQQrCMBBFM9JTuBMEi3cwC93Y6vVFPM14gfzFQIpMfLNMJk0ffD5/WptPZy/Nii0XM9EvDoh2tbHWS3N9V5IXAAD8O8CkbGWptcsFymw8+Jz744qEAABgUBeyWFQJluvw1OVeJAQAAKNmoRLMMBZOQ31CFRICAID8LhQdpVy4UyzbRCcydQAJAQDAqBOZ+7bZJupOJr5+IyEAAMjuQov497Q+b8Kd/Ccvqu5FQgAAkN2Fjod9c+Pzem+bbTr1IyEAAEheX2f8IsSeFAnbAAAAAElFTkSuQmCC";

// font
MinecraftButtonLibrary.Resources.base64Font = "";

//########################################################################################################################################################
// START CREATION OF RESOURCES
//########################################################################################################################################################

new java.lang.Thread(new java.lang.Runnable()
{
	run: function()
	{
		try
		{
			MinecraftButtonLibrary.createNinePatchDrawables();
			MinecraftButtonLibrary.createTypeface();

			MinecraftButtonLibrary.removeResources();
		} catch(e)
		{
			print("Error " + e);
		}
	}
}).start();







//########################################################################################################################################################
// Do startup code when all the functions are loaded (libraries too)
//########################################################################################################################################################

startup();


